/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.onebot = (function() {

    /**
     * Namespace onebot.
     * @exports onebot
     * @namespace
     */
    var onebot = {};

    onebot.Frame = (function() {

        /**
         * Properties of a Frame.
         * @memberof onebot
         * @interface IFrame
         * @property {Long|null} [botId] Frame botId
         * @property {onebot.Frame.FrameType|null} [frameType] Frame frameType
         * @property {string|null} [echo] Frame echo
         * @property {boolean|null} [ok] Frame ok
         * @property {Object.<string,string>|null} [extra] Frame extra
         * @property {onebot.IPrivateMessageEvent|null} [privateMessageEvent] Frame privateMessageEvent
         * @property {onebot.IGroupMessageEvent|null} [groupMessageEvent] Frame groupMessageEvent
         * @property {onebot.IGroupUploadNoticeEvent|null} [groupUploadNoticeEvent] Frame groupUploadNoticeEvent
         * @property {onebot.IGroupAdminNoticeEvent|null} [groupAdminNoticeEvent] Frame groupAdminNoticeEvent
         * @property {onebot.IGroupDecreaseNoticeEvent|null} [groupDecreaseNoticeEvent] Frame groupDecreaseNoticeEvent
         * @property {onebot.IGroupIncreaseNoticeEvent|null} [groupIncreaseNoticeEvent] Frame groupIncreaseNoticeEvent
         * @property {onebot.IGroupBanNoticeEvent|null} [groupBanNoticeEvent] Frame groupBanNoticeEvent
         * @property {onebot.IFriendAddNoticeEvent|null} [friendAddNoticeEvent] Frame friendAddNoticeEvent
         * @property {onebot.IGroupRecallNoticeEvent|null} [groupRecallNoticeEvent] Frame groupRecallNoticeEvent
         * @property {onebot.IFriendRecallNoticeEvent|null} [friendRecallNoticeEvent] Frame friendRecallNoticeEvent
         * @property {onebot.IFriendRequestEvent|null} [friendRequestEvent] Frame friendRequestEvent
         * @property {onebot.IGroupRequestEvent|null} [groupRequestEvent] Frame groupRequestEvent
         * @property {onebot.ISendPrivateMsgReq|null} [sendPrivateMsgReq] Frame sendPrivateMsgReq
         * @property {onebot.ISendGroupMsgReq|null} [sendGroupMsgReq] Frame sendGroupMsgReq
         * @property {onebot.ISendMsgReq|null} [sendMsgReq] Frame sendMsgReq
         * @property {onebot.IDeleteMsgReq|null} [deleteMsgReq] Frame deleteMsgReq
         * @property {onebot.IGetMsgReq|null} [getMsgReq] Frame getMsgReq
         * @property {onebot.IGetForwardMsgReq|null} [getForwardMsgReq] Frame getForwardMsgReq
         * @property {onebot.ISendLikeReq|null} [sendLikeReq] Frame sendLikeReq
         * @property {onebot.ISetGroupKickReq|null} [setGroupKickReq] Frame setGroupKickReq
         * @property {onebot.ISetGroupBanReq|null} [setGroupBanReq] Frame setGroupBanReq
         * @property {onebot.ISetGroupAnonymousBanReq|null} [setGroupAnonymousBanReq] Frame setGroupAnonymousBanReq
         * @property {onebot.ISetGroupWholeBanReq|null} [setGroupWholeBanReq] Frame setGroupWholeBanReq
         * @property {onebot.ISetGroupAdminReq|null} [setGroupAdminReq] Frame setGroupAdminReq
         * @property {onebot.ISetGroupAnonymousReq|null} [setGroupAnonymousReq] Frame setGroupAnonymousReq
         * @property {onebot.ISetGroupCardReq|null} [setGroupCardReq] Frame setGroupCardReq
         * @property {onebot.ISetGroupNameReq|null} [setGroupNameReq] Frame setGroupNameReq
         * @property {onebot.ISetGroupLeaveReq|null} [setGroupLeaveReq] Frame setGroupLeaveReq
         * @property {onebot.ISetGroupSpecialTitleReq|null} [setGroupSpecialTitleReq] Frame setGroupSpecialTitleReq
         * @property {onebot.ISetFriendAddRequestReq|null} [setFriendAddRequestReq] Frame setFriendAddRequestReq
         * @property {onebot.ISetGroupAddRequestReq|null} [setGroupAddRequestReq] Frame setGroupAddRequestReq
         * @property {onebot.IGetLoginInfoReq|null} [getLoginInfoReq] Frame getLoginInfoReq
         * @property {onebot.IGetStrangerInfoReq|null} [getStrangerInfoReq] Frame getStrangerInfoReq
         * @property {onebot.IGetFriendListReq|null} [getFriendListReq] Frame getFriendListReq
         * @property {onebot.IGetGroupInfoReq|null} [getGroupInfoReq] Frame getGroupInfoReq
         * @property {onebot.IGetGroupListReq|null} [getGroupListReq] Frame getGroupListReq
         * @property {onebot.IGetGroupMemberInfoReq|null} [getGroupMemberInfoReq] Frame getGroupMemberInfoReq
         * @property {onebot.IGetGroupMemberListReq|null} [getGroupMemberListReq] Frame getGroupMemberListReq
         * @property {onebot.IGetGroupHonorInfoReq|null} [getGroupHonorInfoReq] Frame getGroupHonorInfoReq
         * @property {onebot.IGetCookiesReq|null} [getCookiesReq] Frame getCookiesReq
         * @property {onebot.IGetCsrfTokenReq|null} [getCsrfTokenReq] Frame getCsrfTokenReq
         * @property {onebot.IGetCredentialsReq|null} [getCredentialsReq] Frame getCredentialsReq
         * @property {onebot.IGetRecordReq|null} [getRecordReq] Frame getRecordReq
         * @property {onebot.IGetImageReq|null} [getImageReq] Frame getImageReq
         * @property {onebot.ICanSendImageReq|null} [canSendImageReq] Frame canSendImageReq
         * @property {onebot.ICanSendRecordReq|null} [canSendRecordReq] Frame canSendRecordReq
         * @property {onebot.IGetStatusReq|null} [getStatusReq] Frame getStatusReq
         * @property {onebot.IGetVersionInfoReq|null} [getVersionInfoReq] Frame getVersionInfoReq
         * @property {onebot.ISetRestartReq|null} [setRestartReq] Frame setRestartReq
         * @property {onebot.ICleanCacheReq|null} [cleanCacheReq] Frame cleanCacheReq
         * @property {onebot.ISendPrivateMsgResp|null} [sendPrivateMsgResp] Frame sendPrivateMsgResp
         * @property {onebot.ISendGroupMsgResp|null} [sendGroupMsgResp] Frame sendGroupMsgResp
         * @property {onebot.ISendMsgResp|null} [sendMsgResp] Frame sendMsgResp
         * @property {onebot.IDeleteMsgResp|null} [deleteMsgResp] Frame deleteMsgResp
         * @property {onebot.IGetMsgResp|null} [getMsgResp] Frame getMsgResp
         * @property {onebot.IGetForwardMsgResp|null} [getForwardMsgResp] Frame getForwardMsgResp
         * @property {onebot.ISendLikeResp|null} [sendLikeResp] Frame sendLikeResp
         * @property {onebot.ISetGroupKickResp|null} [setGroupKickResp] Frame setGroupKickResp
         * @property {onebot.ISetGroupBanResp|null} [setGroupBanResp] Frame setGroupBanResp
         * @property {onebot.ISetGroupAnonymousBanResp|null} [setGroupAnonymousBanResp] Frame setGroupAnonymousBanResp
         * @property {onebot.ISetGroupWholeBanResp|null} [setGroupWholeBanResp] Frame setGroupWholeBanResp
         * @property {onebot.ISetGroupAdminResp|null} [setGroupAdminResp] Frame setGroupAdminResp
         * @property {onebot.ISetGroupAnonymousResp|null} [setGroupAnonymousResp] Frame setGroupAnonymousResp
         * @property {onebot.ISetGroupCardResp|null} [setGroupCardResp] Frame setGroupCardResp
         * @property {onebot.ISetGroupNameResp|null} [setGroupNameResp] Frame setGroupNameResp
         * @property {onebot.ISetGroupLeaveResp|null} [setGroupLeaveResp] Frame setGroupLeaveResp
         * @property {onebot.ISetGroupSpecialTitleResp|null} [setGroupSpecialTitleResp] Frame setGroupSpecialTitleResp
         * @property {onebot.ISetFriendAddRequestResp|null} [setFriendAddRequestResp] Frame setFriendAddRequestResp
         * @property {onebot.ISetGroupAddRequestResp|null} [setGroupAddRequestResp] Frame setGroupAddRequestResp
         * @property {onebot.IGetLoginInfoResp|null} [getLoginInfoResp] Frame getLoginInfoResp
         * @property {onebot.IGetStrangerInfoResp|null} [getStrangerInfoResp] Frame getStrangerInfoResp
         * @property {onebot.IGetFriendListResp|null} [getFriendListResp] Frame getFriendListResp
         * @property {onebot.IGetGroupInfoResp|null} [getGroupInfoResp] Frame getGroupInfoResp
         * @property {onebot.IGetGroupListResp|null} [getGroupListResp] Frame getGroupListResp
         * @property {onebot.IGetGroupMemberInfoResp|null} [getGroupMemberInfoResp] Frame getGroupMemberInfoResp
         * @property {onebot.IGetGroupMemberListResp|null} [getGroupMemberListResp] Frame getGroupMemberListResp
         * @property {onebot.IGetGroupHonorInfoResp|null} [getGroupHonorInfoResp] Frame getGroupHonorInfoResp
         * @property {onebot.IGetCookiesResp|null} [getCookiesResp] Frame getCookiesResp
         * @property {onebot.IGetCsrfTokenResp|null} [getCsrfTokenResp] Frame getCsrfTokenResp
         * @property {onebot.IGetCredentialsResp|null} [getCredentialsResp] Frame getCredentialsResp
         * @property {onebot.IGetRecordResp|null} [getRecordResp] Frame getRecordResp
         * @property {onebot.IGetImageResp|null} [getImageResp] Frame getImageResp
         * @property {onebot.ICanSendImageResp|null} [canSendImageResp] Frame canSendImageResp
         * @property {onebot.ICanSendRecordResp|null} [canSendRecordResp] Frame canSendRecordResp
         * @property {onebot.IGetStatusResp|null} [getStatusResp] Frame getStatusResp
         * @property {onebot.IGetVersionInfoResp|null} [getVersionInfoResp] Frame getVersionInfoResp
         * @property {onebot.ISetRestartResp|null} [setRestartResp] Frame setRestartResp
         * @property {onebot.ICleanCacheResp|null} [cleanCacheResp] Frame cleanCacheResp
         */

        /**
         * Constructs a new Frame.
         * @memberof onebot
         * @classdesc Represents a Frame.
         * @implements IFrame
         * @constructor
         * @param {onebot.IFrame=} [properties] Properties to set
         */
        function Frame(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Frame botId.
         * @member {Long} botId
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.botId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Frame frameType.
         * @member {onebot.Frame.FrameType} frameType
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.frameType = 0;

        /**
         * Frame echo.
         * @member {string} echo
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.echo = "";

        /**
         * Frame ok.
         * @member {boolean} ok
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.ok = false;

        /**
         * Frame extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.extra = $util.emptyObject;

        /**
         * Frame privateMessageEvent.
         * @member {onebot.IPrivateMessageEvent|null|undefined} privateMessageEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.privateMessageEvent = null;

        /**
         * Frame groupMessageEvent.
         * @member {onebot.IGroupMessageEvent|null|undefined} groupMessageEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupMessageEvent = null;

        /**
         * Frame groupUploadNoticeEvent.
         * @member {onebot.IGroupUploadNoticeEvent|null|undefined} groupUploadNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupUploadNoticeEvent = null;

        /**
         * Frame groupAdminNoticeEvent.
         * @member {onebot.IGroupAdminNoticeEvent|null|undefined} groupAdminNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupAdminNoticeEvent = null;

        /**
         * Frame groupDecreaseNoticeEvent.
         * @member {onebot.IGroupDecreaseNoticeEvent|null|undefined} groupDecreaseNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupDecreaseNoticeEvent = null;

        /**
         * Frame groupIncreaseNoticeEvent.
         * @member {onebot.IGroupIncreaseNoticeEvent|null|undefined} groupIncreaseNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupIncreaseNoticeEvent = null;

        /**
         * Frame groupBanNoticeEvent.
         * @member {onebot.IGroupBanNoticeEvent|null|undefined} groupBanNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupBanNoticeEvent = null;

        /**
         * Frame friendAddNoticeEvent.
         * @member {onebot.IFriendAddNoticeEvent|null|undefined} friendAddNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.friendAddNoticeEvent = null;

        /**
         * Frame groupRecallNoticeEvent.
         * @member {onebot.IGroupRecallNoticeEvent|null|undefined} groupRecallNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupRecallNoticeEvent = null;

        /**
         * Frame friendRecallNoticeEvent.
         * @member {onebot.IFriendRecallNoticeEvent|null|undefined} friendRecallNoticeEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.friendRecallNoticeEvent = null;

        /**
         * Frame friendRequestEvent.
         * @member {onebot.IFriendRequestEvent|null|undefined} friendRequestEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.friendRequestEvent = null;

        /**
         * Frame groupRequestEvent.
         * @member {onebot.IGroupRequestEvent|null|undefined} groupRequestEvent
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.groupRequestEvent = null;

        /**
         * Frame sendPrivateMsgReq.
         * @member {onebot.ISendPrivateMsgReq|null|undefined} sendPrivateMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendPrivateMsgReq = null;

        /**
         * Frame sendGroupMsgReq.
         * @member {onebot.ISendGroupMsgReq|null|undefined} sendGroupMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendGroupMsgReq = null;

        /**
         * Frame sendMsgReq.
         * @member {onebot.ISendMsgReq|null|undefined} sendMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendMsgReq = null;

        /**
         * Frame deleteMsgReq.
         * @member {onebot.IDeleteMsgReq|null|undefined} deleteMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.deleteMsgReq = null;

        /**
         * Frame getMsgReq.
         * @member {onebot.IGetMsgReq|null|undefined} getMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getMsgReq = null;

        /**
         * Frame getForwardMsgReq.
         * @member {onebot.IGetForwardMsgReq|null|undefined} getForwardMsgReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getForwardMsgReq = null;

        /**
         * Frame sendLikeReq.
         * @member {onebot.ISendLikeReq|null|undefined} sendLikeReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendLikeReq = null;

        /**
         * Frame setGroupKickReq.
         * @member {onebot.ISetGroupKickReq|null|undefined} setGroupKickReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupKickReq = null;

        /**
         * Frame setGroupBanReq.
         * @member {onebot.ISetGroupBanReq|null|undefined} setGroupBanReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupBanReq = null;

        /**
         * Frame setGroupAnonymousBanReq.
         * @member {onebot.ISetGroupAnonymousBanReq|null|undefined} setGroupAnonymousBanReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAnonymousBanReq = null;

        /**
         * Frame setGroupWholeBanReq.
         * @member {onebot.ISetGroupWholeBanReq|null|undefined} setGroupWholeBanReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupWholeBanReq = null;

        /**
         * Frame setGroupAdminReq.
         * @member {onebot.ISetGroupAdminReq|null|undefined} setGroupAdminReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAdminReq = null;

        /**
         * Frame setGroupAnonymousReq.
         * @member {onebot.ISetGroupAnonymousReq|null|undefined} setGroupAnonymousReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAnonymousReq = null;

        /**
         * Frame setGroupCardReq.
         * @member {onebot.ISetGroupCardReq|null|undefined} setGroupCardReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupCardReq = null;

        /**
         * Frame setGroupNameReq.
         * @member {onebot.ISetGroupNameReq|null|undefined} setGroupNameReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupNameReq = null;

        /**
         * Frame setGroupLeaveReq.
         * @member {onebot.ISetGroupLeaveReq|null|undefined} setGroupLeaveReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupLeaveReq = null;

        /**
         * Frame setGroupSpecialTitleReq.
         * @member {onebot.ISetGroupSpecialTitleReq|null|undefined} setGroupSpecialTitleReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupSpecialTitleReq = null;

        /**
         * Frame setFriendAddRequestReq.
         * @member {onebot.ISetFriendAddRequestReq|null|undefined} setFriendAddRequestReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setFriendAddRequestReq = null;

        /**
         * Frame setGroupAddRequestReq.
         * @member {onebot.ISetGroupAddRequestReq|null|undefined} setGroupAddRequestReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAddRequestReq = null;

        /**
         * Frame getLoginInfoReq.
         * @member {onebot.IGetLoginInfoReq|null|undefined} getLoginInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getLoginInfoReq = null;

        /**
         * Frame getStrangerInfoReq.
         * @member {onebot.IGetStrangerInfoReq|null|undefined} getStrangerInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getStrangerInfoReq = null;

        /**
         * Frame getFriendListReq.
         * @member {onebot.IGetFriendListReq|null|undefined} getFriendListReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getFriendListReq = null;

        /**
         * Frame getGroupInfoReq.
         * @member {onebot.IGetGroupInfoReq|null|undefined} getGroupInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupInfoReq = null;

        /**
         * Frame getGroupListReq.
         * @member {onebot.IGetGroupListReq|null|undefined} getGroupListReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupListReq = null;

        /**
         * Frame getGroupMemberInfoReq.
         * @member {onebot.IGetGroupMemberInfoReq|null|undefined} getGroupMemberInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupMemberInfoReq = null;

        /**
         * Frame getGroupMemberListReq.
         * @member {onebot.IGetGroupMemberListReq|null|undefined} getGroupMemberListReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupMemberListReq = null;

        /**
         * Frame getGroupHonorInfoReq.
         * @member {onebot.IGetGroupHonorInfoReq|null|undefined} getGroupHonorInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupHonorInfoReq = null;

        /**
         * Frame getCookiesReq.
         * @member {onebot.IGetCookiesReq|null|undefined} getCookiesReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCookiesReq = null;

        /**
         * Frame getCsrfTokenReq.
         * @member {onebot.IGetCsrfTokenReq|null|undefined} getCsrfTokenReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCsrfTokenReq = null;

        /**
         * Frame getCredentialsReq.
         * @member {onebot.IGetCredentialsReq|null|undefined} getCredentialsReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCredentialsReq = null;

        /**
         * Frame getRecordReq.
         * @member {onebot.IGetRecordReq|null|undefined} getRecordReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getRecordReq = null;

        /**
         * Frame getImageReq.
         * @member {onebot.IGetImageReq|null|undefined} getImageReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getImageReq = null;

        /**
         * Frame canSendImageReq.
         * @member {onebot.ICanSendImageReq|null|undefined} canSendImageReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.canSendImageReq = null;

        /**
         * Frame canSendRecordReq.
         * @member {onebot.ICanSendRecordReq|null|undefined} canSendRecordReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.canSendRecordReq = null;

        /**
         * Frame getStatusReq.
         * @member {onebot.IGetStatusReq|null|undefined} getStatusReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getStatusReq = null;

        /**
         * Frame getVersionInfoReq.
         * @member {onebot.IGetVersionInfoReq|null|undefined} getVersionInfoReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getVersionInfoReq = null;

        /**
         * Frame setRestartReq.
         * @member {onebot.ISetRestartReq|null|undefined} setRestartReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setRestartReq = null;

        /**
         * Frame cleanCacheReq.
         * @member {onebot.ICleanCacheReq|null|undefined} cleanCacheReq
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.cleanCacheReq = null;

        /**
         * Frame sendPrivateMsgResp.
         * @member {onebot.ISendPrivateMsgResp|null|undefined} sendPrivateMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendPrivateMsgResp = null;

        /**
         * Frame sendGroupMsgResp.
         * @member {onebot.ISendGroupMsgResp|null|undefined} sendGroupMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendGroupMsgResp = null;

        /**
         * Frame sendMsgResp.
         * @member {onebot.ISendMsgResp|null|undefined} sendMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendMsgResp = null;

        /**
         * Frame deleteMsgResp.
         * @member {onebot.IDeleteMsgResp|null|undefined} deleteMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.deleteMsgResp = null;

        /**
         * Frame getMsgResp.
         * @member {onebot.IGetMsgResp|null|undefined} getMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getMsgResp = null;

        /**
         * Frame getForwardMsgResp.
         * @member {onebot.IGetForwardMsgResp|null|undefined} getForwardMsgResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getForwardMsgResp = null;

        /**
         * Frame sendLikeResp.
         * @member {onebot.ISendLikeResp|null|undefined} sendLikeResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.sendLikeResp = null;

        /**
         * Frame setGroupKickResp.
         * @member {onebot.ISetGroupKickResp|null|undefined} setGroupKickResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupKickResp = null;

        /**
         * Frame setGroupBanResp.
         * @member {onebot.ISetGroupBanResp|null|undefined} setGroupBanResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupBanResp = null;

        /**
         * Frame setGroupAnonymousBanResp.
         * @member {onebot.ISetGroupAnonymousBanResp|null|undefined} setGroupAnonymousBanResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAnonymousBanResp = null;

        /**
         * Frame setGroupWholeBanResp.
         * @member {onebot.ISetGroupWholeBanResp|null|undefined} setGroupWholeBanResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupWholeBanResp = null;

        /**
         * Frame setGroupAdminResp.
         * @member {onebot.ISetGroupAdminResp|null|undefined} setGroupAdminResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAdminResp = null;

        /**
         * Frame setGroupAnonymousResp.
         * @member {onebot.ISetGroupAnonymousResp|null|undefined} setGroupAnonymousResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAnonymousResp = null;

        /**
         * Frame setGroupCardResp.
         * @member {onebot.ISetGroupCardResp|null|undefined} setGroupCardResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupCardResp = null;

        /**
         * Frame setGroupNameResp.
         * @member {onebot.ISetGroupNameResp|null|undefined} setGroupNameResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupNameResp = null;

        /**
         * Frame setGroupLeaveResp.
         * @member {onebot.ISetGroupLeaveResp|null|undefined} setGroupLeaveResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupLeaveResp = null;

        /**
         * Frame setGroupSpecialTitleResp.
         * @member {onebot.ISetGroupSpecialTitleResp|null|undefined} setGroupSpecialTitleResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupSpecialTitleResp = null;

        /**
         * Frame setFriendAddRequestResp.
         * @member {onebot.ISetFriendAddRequestResp|null|undefined} setFriendAddRequestResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setFriendAddRequestResp = null;

        /**
         * Frame setGroupAddRequestResp.
         * @member {onebot.ISetGroupAddRequestResp|null|undefined} setGroupAddRequestResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setGroupAddRequestResp = null;

        /**
         * Frame getLoginInfoResp.
         * @member {onebot.IGetLoginInfoResp|null|undefined} getLoginInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getLoginInfoResp = null;

        /**
         * Frame getStrangerInfoResp.
         * @member {onebot.IGetStrangerInfoResp|null|undefined} getStrangerInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getStrangerInfoResp = null;

        /**
         * Frame getFriendListResp.
         * @member {onebot.IGetFriendListResp|null|undefined} getFriendListResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getFriendListResp = null;

        /**
         * Frame getGroupInfoResp.
         * @member {onebot.IGetGroupInfoResp|null|undefined} getGroupInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupInfoResp = null;

        /**
         * Frame getGroupListResp.
         * @member {onebot.IGetGroupListResp|null|undefined} getGroupListResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupListResp = null;

        /**
         * Frame getGroupMemberInfoResp.
         * @member {onebot.IGetGroupMemberInfoResp|null|undefined} getGroupMemberInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupMemberInfoResp = null;

        /**
         * Frame getGroupMemberListResp.
         * @member {onebot.IGetGroupMemberListResp|null|undefined} getGroupMemberListResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupMemberListResp = null;

        /**
         * Frame getGroupHonorInfoResp.
         * @member {onebot.IGetGroupHonorInfoResp|null|undefined} getGroupHonorInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getGroupHonorInfoResp = null;

        /**
         * Frame getCookiesResp.
         * @member {onebot.IGetCookiesResp|null|undefined} getCookiesResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCookiesResp = null;

        /**
         * Frame getCsrfTokenResp.
         * @member {onebot.IGetCsrfTokenResp|null|undefined} getCsrfTokenResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCsrfTokenResp = null;

        /**
         * Frame getCredentialsResp.
         * @member {onebot.IGetCredentialsResp|null|undefined} getCredentialsResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getCredentialsResp = null;

        /**
         * Frame getRecordResp.
         * @member {onebot.IGetRecordResp|null|undefined} getRecordResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getRecordResp = null;

        /**
         * Frame getImageResp.
         * @member {onebot.IGetImageResp|null|undefined} getImageResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getImageResp = null;

        /**
         * Frame canSendImageResp.
         * @member {onebot.ICanSendImageResp|null|undefined} canSendImageResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.canSendImageResp = null;

        /**
         * Frame canSendRecordResp.
         * @member {onebot.ICanSendRecordResp|null|undefined} canSendRecordResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.canSendRecordResp = null;

        /**
         * Frame getStatusResp.
         * @member {onebot.IGetStatusResp|null|undefined} getStatusResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getStatusResp = null;

        /**
         * Frame getVersionInfoResp.
         * @member {onebot.IGetVersionInfoResp|null|undefined} getVersionInfoResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.getVersionInfoResp = null;

        /**
         * Frame setRestartResp.
         * @member {onebot.ISetRestartResp|null|undefined} setRestartResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.setRestartResp = null;

        /**
         * Frame cleanCacheResp.
         * @member {onebot.ICleanCacheResp|null|undefined} cleanCacheResp
         * @memberof onebot.Frame
         * @instance
         */
        Frame.prototype.cleanCacheResp = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * Frame data.
         * @member {"privateMessageEvent"|"groupMessageEvent"|"groupUploadNoticeEvent"|"groupAdminNoticeEvent"|"groupDecreaseNoticeEvent"|"groupIncreaseNoticeEvent"|"groupBanNoticeEvent"|"friendAddNoticeEvent"|"groupRecallNoticeEvent"|"friendRecallNoticeEvent"|"friendRequestEvent"|"groupRequestEvent"|"sendPrivateMsgReq"|"sendGroupMsgReq"|"sendMsgReq"|"deleteMsgReq"|"getMsgReq"|"getForwardMsgReq"|"sendLikeReq"|"setGroupKickReq"|"setGroupBanReq"|"setGroupAnonymousBanReq"|"setGroupWholeBanReq"|"setGroupAdminReq"|"setGroupAnonymousReq"|"setGroupCardReq"|"setGroupNameReq"|"setGroupLeaveReq"|"setGroupSpecialTitleReq"|"setFriendAddRequestReq"|"setGroupAddRequestReq"|"getLoginInfoReq"|"getStrangerInfoReq"|"getFriendListReq"|"getGroupInfoReq"|"getGroupListReq"|"getGroupMemberInfoReq"|"getGroupMemberListReq"|"getGroupHonorInfoReq"|"getCookiesReq"|"getCsrfTokenReq"|"getCredentialsReq"|"getRecordReq"|"getImageReq"|"canSendImageReq"|"canSendRecordReq"|"getStatusReq"|"getVersionInfoReq"|"setRestartReq"|"cleanCacheReq"|"sendPrivateMsgResp"|"sendGroupMsgResp"|"sendMsgResp"|"deleteMsgResp"|"getMsgResp"|"getForwardMsgResp"|"sendLikeResp"|"setGroupKickResp"|"setGroupBanResp"|"setGroupAnonymousBanResp"|"setGroupWholeBanResp"|"setGroupAdminResp"|"setGroupAnonymousResp"|"setGroupCardResp"|"setGroupNameResp"|"setGroupLeaveResp"|"setGroupSpecialTitleResp"|"setFriendAddRequestResp"|"setGroupAddRequestResp"|"getLoginInfoResp"|"getStrangerInfoResp"|"getFriendListResp"|"getGroupInfoResp"|"getGroupListResp"|"getGroupMemberInfoResp"|"getGroupMemberListResp"|"getGroupHonorInfoResp"|"getCookiesResp"|"getCsrfTokenResp"|"getCredentialsResp"|"getRecordResp"|"getImageResp"|"canSendImageResp"|"canSendRecordResp"|"getStatusResp"|"getVersionInfoResp"|"setRestartResp"|"cleanCacheResp"|undefined} data
         * @memberof onebot.Frame
         * @instance
         */
        Object.defineProperty(Frame.prototype, "data", {
            get: $util.oneOfGetter($oneOfFields = ["privateMessageEvent", "groupMessageEvent", "groupUploadNoticeEvent", "groupAdminNoticeEvent", "groupDecreaseNoticeEvent", "groupIncreaseNoticeEvent", "groupBanNoticeEvent", "friendAddNoticeEvent", "groupRecallNoticeEvent", "friendRecallNoticeEvent", "friendRequestEvent", "groupRequestEvent", "sendPrivateMsgReq", "sendGroupMsgReq", "sendMsgReq", "deleteMsgReq", "getMsgReq", "getForwardMsgReq", "sendLikeReq", "setGroupKickReq", "setGroupBanReq", "setGroupAnonymousBanReq", "setGroupWholeBanReq", "setGroupAdminReq", "setGroupAnonymousReq", "setGroupCardReq", "setGroupNameReq", "setGroupLeaveReq", "setGroupSpecialTitleReq", "setFriendAddRequestReq", "setGroupAddRequestReq", "getLoginInfoReq", "getStrangerInfoReq", "getFriendListReq", "getGroupInfoReq", "getGroupListReq", "getGroupMemberInfoReq", "getGroupMemberListReq", "getGroupHonorInfoReq", "getCookiesReq", "getCsrfTokenReq", "getCredentialsReq", "getRecordReq", "getImageReq", "canSendImageReq", "canSendRecordReq", "getStatusReq", "getVersionInfoReq", "setRestartReq", "cleanCacheReq", "sendPrivateMsgResp", "sendGroupMsgResp", "sendMsgResp", "deleteMsgResp", "getMsgResp", "getForwardMsgResp", "sendLikeResp", "setGroupKickResp", "setGroupBanResp", "setGroupAnonymousBanResp", "setGroupWholeBanResp", "setGroupAdminResp", "setGroupAnonymousResp", "setGroupCardResp", "setGroupNameResp", "setGroupLeaveResp", "setGroupSpecialTitleResp", "setFriendAddRequestResp", "setGroupAddRequestResp", "getLoginInfoResp", "getStrangerInfoResp", "getFriendListResp", "getGroupInfoResp", "getGroupListResp", "getGroupMemberInfoResp", "getGroupMemberListResp", "getGroupHonorInfoResp", "getCookiesResp", "getCsrfTokenResp", "getCredentialsResp", "getRecordResp", "getImageResp", "canSendImageResp", "canSendRecordResp", "getStatusResp", "getVersionInfoResp", "setRestartResp", "cleanCacheResp"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new Frame instance using the specified properties.
         * @function create
         * @memberof onebot.Frame
         * @static
         * @param {onebot.IFrame=} [properties] Properties to set
         * @returns {onebot.Frame} Frame instance
         */
        Frame.create = function create(properties) {
            return new Frame(properties);
        };

        /**
         * Encodes the specified Frame message. Does not implicitly {@link onebot.Frame.verify|verify} messages.
         * @function encode
         * @memberof onebot.Frame
         * @static
         * @param {onebot.IFrame} message Frame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Frame.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.botId != null && Object.hasOwnProperty.call(message, "botId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.botId);
            if (message.frameType != null && Object.hasOwnProperty.call(message, "frameType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.frameType);
            if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.echo);
            if (message.ok != null && Object.hasOwnProperty.call(message, "ok"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.ok);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 100, wireType 2 =*/802).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            if (message.privateMessageEvent != null && Object.hasOwnProperty.call(message, "privateMessageEvent"))
                $root.onebot.PrivateMessageEvent.encode(message.privateMessageEvent, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
            if (message.groupMessageEvent != null && Object.hasOwnProperty.call(message, "groupMessageEvent"))
                $root.onebot.GroupMessageEvent.encode(message.groupMessageEvent, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
            if (message.groupUploadNoticeEvent != null && Object.hasOwnProperty.call(message, "groupUploadNoticeEvent"))
                $root.onebot.GroupUploadNoticeEvent.encode(message.groupUploadNoticeEvent, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();
            if (message.groupAdminNoticeEvent != null && Object.hasOwnProperty.call(message, "groupAdminNoticeEvent"))
                $root.onebot.GroupAdminNoticeEvent.encode(message.groupAdminNoticeEvent, writer.uint32(/* id 104, wireType 2 =*/834).fork()).ldelim();
            if (message.groupDecreaseNoticeEvent != null && Object.hasOwnProperty.call(message, "groupDecreaseNoticeEvent"))
                $root.onebot.GroupDecreaseNoticeEvent.encode(message.groupDecreaseNoticeEvent, writer.uint32(/* id 105, wireType 2 =*/842).fork()).ldelim();
            if (message.groupIncreaseNoticeEvent != null && Object.hasOwnProperty.call(message, "groupIncreaseNoticeEvent"))
                $root.onebot.GroupIncreaseNoticeEvent.encode(message.groupIncreaseNoticeEvent, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();
            if (message.groupBanNoticeEvent != null && Object.hasOwnProperty.call(message, "groupBanNoticeEvent"))
                $root.onebot.GroupBanNoticeEvent.encode(message.groupBanNoticeEvent, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();
            if (message.friendAddNoticeEvent != null && Object.hasOwnProperty.call(message, "friendAddNoticeEvent"))
                $root.onebot.FriendAddNoticeEvent.encode(message.friendAddNoticeEvent, writer.uint32(/* id 108, wireType 2 =*/866).fork()).ldelim();
            if (message.groupRecallNoticeEvent != null && Object.hasOwnProperty.call(message, "groupRecallNoticeEvent"))
                $root.onebot.GroupRecallNoticeEvent.encode(message.groupRecallNoticeEvent, writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
            if (message.friendRecallNoticeEvent != null && Object.hasOwnProperty.call(message, "friendRecallNoticeEvent"))
                $root.onebot.FriendRecallNoticeEvent.encode(message.friendRecallNoticeEvent, writer.uint32(/* id 110, wireType 2 =*/882).fork()).ldelim();
            if (message.friendRequestEvent != null && Object.hasOwnProperty.call(message, "friendRequestEvent"))
                $root.onebot.FriendRequestEvent.encode(message.friendRequestEvent, writer.uint32(/* id 111, wireType 2 =*/890).fork()).ldelim();
            if (message.groupRequestEvent != null && Object.hasOwnProperty.call(message, "groupRequestEvent"))
                $root.onebot.GroupRequestEvent.encode(message.groupRequestEvent, writer.uint32(/* id 112, wireType 2 =*/898).fork()).ldelim();
            if (message.sendPrivateMsgReq != null && Object.hasOwnProperty.call(message, "sendPrivateMsgReq"))
                $root.onebot.SendPrivateMsgReq.encode(message.sendPrivateMsgReq, writer.uint32(/* id 201, wireType 2 =*/1610).fork()).ldelim();
            if (message.sendGroupMsgReq != null && Object.hasOwnProperty.call(message, "sendGroupMsgReq"))
                $root.onebot.SendGroupMsgReq.encode(message.sendGroupMsgReq, writer.uint32(/* id 202, wireType 2 =*/1618).fork()).ldelim();
            if (message.sendMsgReq != null && Object.hasOwnProperty.call(message, "sendMsgReq"))
                $root.onebot.SendMsgReq.encode(message.sendMsgReq, writer.uint32(/* id 203, wireType 2 =*/1626).fork()).ldelim();
            if (message.deleteMsgReq != null && Object.hasOwnProperty.call(message, "deleteMsgReq"))
                $root.onebot.DeleteMsgReq.encode(message.deleteMsgReq, writer.uint32(/* id 204, wireType 2 =*/1634).fork()).ldelim();
            if (message.getMsgReq != null && Object.hasOwnProperty.call(message, "getMsgReq"))
                $root.onebot.GetMsgReq.encode(message.getMsgReq, writer.uint32(/* id 205, wireType 2 =*/1642).fork()).ldelim();
            if (message.getForwardMsgReq != null && Object.hasOwnProperty.call(message, "getForwardMsgReq"))
                $root.onebot.GetForwardMsgReq.encode(message.getForwardMsgReq, writer.uint32(/* id 206, wireType 2 =*/1650).fork()).ldelim();
            if (message.sendLikeReq != null && Object.hasOwnProperty.call(message, "sendLikeReq"))
                $root.onebot.SendLikeReq.encode(message.sendLikeReq, writer.uint32(/* id 207, wireType 2 =*/1658).fork()).ldelim();
            if (message.setGroupKickReq != null && Object.hasOwnProperty.call(message, "setGroupKickReq"))
                $root.onebot.SetGroupKickReq.encode(message.setGroupKickReq, writer.uint32(/* id 208, wireType 2 =*/1666).fork()).ldelim();
            if (message.setGroupBanReq != null && Object.hasOwnProperty.call(message, "setGroupBanReq"))
                $root.onebot.SetGroupBanReq.encode(message.setGroupBanReq, writer.uint32(/* id 209, wireType 2 =*/1674).fork()).ldelim();
            if (message.setGroupAnonymousBanReq != null && Object.hasOwnProperty.call(message, "setGroupAnonymousBanReq"))
                $root.onebot.SetGroupAnonymousBanReq.encode(message.setGroupAnonymousBanReq, writer.uint32(/* id 210, wireType 2 =*/1682).fork()).ldelim();
            if (message.setGroupWholeBanReq != null && Object.hasOwnProperty.call(message, "setGroupWholeBanReq"))
                $root.onebot.SetGroupWholeBanReq.encode(message.setGroupWholeBanReq, writer.uint32(/* id 211, wireType 2 =*/1690).fork()).ldelim();
            if (message.setGroupAdminReq != null && Object.hasOwnProperty.call(message, "setGroupAdminReq"))
                $root.onebot.SetGroupAdminReq.encode(message.setGroupAdminReq, writer.uint32(/* id 212, wireType 2 =*/1698).fork()).ldelim();
            if (message.setGroupAnonymousReq != null && Object.hasOwnProperty.call(message, "setGroupAnonymousReq"))
                $root.onebot.SetGroupAnonymousReq.encode(message.setGroupAnonymousReq, writer.uint32(/* id 213, wireType 2 =*/1706).fork()).ldelim();
            if (message.setGroupCardReq != null && Object.hasOwnProperty.call(message, "setGroupCardReq"))
                $root.onebot.SetGroupCardReq.encode(message.setGroupCardReq, writer.uint32(/* id 214, wireType 2 =*/1714).fork()).ldelim();
            if (message.setGroupNameReq != null && Object.hasOwnProperty.call(message, "setGroupNameReq"))
                $root.onebot.SetGroupNameReq.encode(message.setGroupNameReq, writer.uint32(/* id 215, wireType 2 =*/1722).fork()).ldelim();
            if (message.setGroupLeaveReq != null && Object.hasOwnProperty.call(message, "setGroupLeaveReq"))
                $root.onebot.SetGroupLeaveReq.encode(message.setGroupLeaveReq, writer.uint32(/* id 216, wireType 2 =*/1730).fork()).ldelim();
            if (message.setGroupSpecialTitleReq != null && Object.hasOwnProperty.call(message, "setGroupSpecialTitleReq"))
                $root.onebot.SetGroupSpecialTitleReq.encode(message.setGroupSpecialTitleReq, writer.uint32(/* id 217, wireType 2 =*/1738).fork()).ldelim();
            if (message.setFriendAddRequestReq != null && Object.hasOwnProperty.call(message, "setFriendAddRequestReq"))
                $root.onebot.SetFriendAddRequestReq.encode(message.setFriendAddRequestReq, writer.uint32(/* id 218, wireType 2 =*/1746).fork()).ldelim();
            if (message.setGroupAddRequestReq != null && Object.hasOwnProperty.call(message, "setGroupAddRequestReq"))
                $root.onebot.SetGroupAddRequestReq.encode(message.setGroupAddRequestReq, writer.uint32(/* id 219, wireType 2 =*/1754).fork()).ldelim();
            if (message.getLoginInfoReq != null && Object.hasOwnProperty.call(message, "getLoginInfoReq"))
                $root.onebot.GetLoginInfoReq.encode(message.getLoginInfoReq, writer.uint32(/* id 220, wireType 2 =*/1762).fork()).ldelim();
            if (message.getStrangerInfoReq != null && Object.hasOwnProperty.call(message, "getStrangerInfoReq"))
                $root.onebot.GetStrangerInfoReq.encode(message.getStrangerInfoReq, writer.uint32(/* id 221, wireType 2 =*/1770).fork()).ldelim();
            if (message.getFriendListReq != null && Object.hasOwnProperty.call(message, "getFriendListReq"))
                $root.onebot.GetFriendListReq.encode(message.getFriendListReq, writer.uint32(/* id 222, wireType 2 =*/1778).fork()).ldelim();
            if (message.getGroupInfoReq != null && Object.hasOwnProperty.call(message, "getGroupInfoReq"))
                $root.onebot.GetGroupInfoReq.encode(message.getGroupInfoReq, writer.uint32(/* id 223, wireType 2 =*/1786).fork()).ldelim();
            if (message.getGroupListReq != null && Object.hasOwnProperty.call(message, "getGroupListReq"))
                $root.onebot.GetGroupListReq.encode(message.getGroupListReq, writer.uint32(/* id 224, wireType 2 =*/1794).fork()).ldelim();
            if (message.getGroupMemberInfoReq != null && Object.hasOwnProperty.call(message, "getGroupMemberInfoReq"))
                $root.onebot.GetGroupMemberInfoReq.encode(message.getGroupMemberInfoReq, writer.uint32(/* id 225, wireType 2 =*/1802).fork()).ldelim();
            if (message.getGroupMemberListReq != null && Object.hasOwnProperty.call(message, "getGroupMemberListReq"))
                $root.onebot.GetGroupMemberListReq.encode(message.getGroupMemberListReq, writer.uint32(/* id 226, wireType 2 =*/1810).fork()).ldelim();
            if (message.getGroupHonorInfoReq != null && Object.hasOwnProperty.call(message, "getGroupHonorInfoReq"))
                $root.onebot.GetGroupHonorInfoReq.encode(message.getGroupHonorInfoReq, writer.uint32(/* id 227, wireType 2 =*/1818).fork()).ldelim();
            if (message.getCookiesReq != null && Object.hasOwnProperty.call(message, "getCookiesReq"))
                $root.onebot.GetCookiesReq.encode(message.getCookiesReq, writer.uint32(/* id 228, wireType 2 =*/1826).fork()).ldelim();
            if (message.getCsrfTokenReq != null && Object.hasOwnProperty.call(message, "getCsrfTokenReq"))
                $root.onebot.GetCsrfTokenReq.encode(message.getCsrfTokenReq, writer.uint32(/* id 229, wireType 2 =*/1834).fork()).ldelim();
            if (message.getCredentialsReq != null && Object.hasOwnProperty.call(message, "getCredentialsReq"))
                $root.onebot.GetCredentialsReq.encode(message.getCredentialsReq, writer.uint32(/* id 230, wireType 2 =*/1842).fork()).ldelim();
            if (message.getRecordReq != null && Object.hasOwnProperty.call(message, "getRecordReq"))
                $root.onebot.GetRecordReq.encode(message.getRecordReq, writer.uint32(/* id 231, wireType 2 =*/1850).fork()).ldelim();
            if (message.getImageReq != null && Object.hasOwnProperty.call(message, "getImageReq"))
                $root.onebot.GetImageReq.encode(message.getImageReq, writer.uint32(/* id 232, wireType 2 =*/1858).fork()).ldelim();
            if (message.canSendImageReq != null && Object.hasOwnProperty.call(message, "canSendImageReq"))
                $root.onebot.CanSendImageReq.encode(message.canSendImageReq, writer.uint32(/* id 233, wireType 2 =*/1866).fork()).ldelim();
            if (message.canSendRecordReq != null && Object.hasOwnProperty.call(message, "canSendRecordReq"))
                $root.onebot.CanSendRecordReq.encode(message.canSendRecordReq, writer.uint32(/* id 234, wireType 2 =*/1874).fork()).ldelim();
            if (message.getStatusReq != null && Object.hasOwnProperty.call(message, "getStatusReq"))
                $root.onebot.GetStatusReq.encode(message.getStatusReq, writer.uint32(/* id 235, wireType 2 =*/1882).fork()).ldelim();
            if (message.getVersionInfoReq != null && Object.hasOwnProperty.call(message, "getVersionInfoReq"))
                $root.onebot.GetVersionInfoReq.encode(message.getVersionInfoReq, writer.uint32(/* id 236, wireType 2 =*/1890).fork()).ldelim();
            if (message.setRestartReq != null && Object.hasOwnProperty.call(message, "setRestartReq"))
                $root.onebot.SetRestartReq.encode(message.setRestartReq, writer.uint32(/* id 237, wireType 2 =*/1898).fork()).ldelim();
            if (message.cleanCacheReq != null && Object.hasOwnProperty.call(message, "cleanCacheReq"))
                $root.onebot.CleanCacheReq.encode(message.cleanCacheReq, writer.uint32(/* id 238, wireType 2 =*/1906).fork()).ldelim();
            if (message.sendPrivateMsgResp != null && Object.hasOwnProperty.call(message, "sendPrivateMsgResp"))
                $root.onebot.SendPrivateMsgResp.encode(message.sendPrivateMsgResp, writer.uint32(/* id 301, wireType 2 =*/2410).fork()).ldelim();
            if (message.sendGroupMsgResp != null && Object.hasOwnProperty.call(message, "sendGroupMsgResp"))
                $root.onebot.SendGroupMsgResp.encode(message.sendGroupMsgResp, writer.uint32(/* id 302, wireType 2 =*/2418).fork()).ldelim();
            if (message.sendMsgResp != null && Object.hasOwnProperty.call(message, "sendMsgResp"))
                $root.onebot.SendMsgResp.encode(message.sendMsgResp, writer.uint32(/* id 303, wireType 2 =*/2426).fork()).ldelim();
            if (message.deleteMsgResp != null && Object.hasOwnProperty.call(message, "deleteMsgResp"))
                $root.onebot.DeleteMsgResp.encode(message.deleteMsgResp, writer.uint32(/* id 304, wireType 2 =*/2434).fork()).ldelim();
            if (message.getMsgResp != null && Object.hasOwnProperty.call(message, "getMsgResp"))
                $root.onebot.GetMsgResp.encode(message.getMsgResp, writer.uint32(/* id 305, wireType 2 =*/2442).fork()).ldelim();
            if (message.getForwardMsgResp != null && Object.hasOwnProperty.call(message, "getForwardMsgResp"))
                $root.onebot.GetForwardMsgResp.encode(message.getForwardMsgResp, writer.uint32(/* id 306, wireType 2 =*/2450).fork()).ldelim();
            if (message.sendLikeResp != null && Object.hasOwnProperty.call(message, "sendLikeResp"))
                $root.onebot.SendLikeResp.encode(message.sendLikeResp, writer.uint32(/* id 307, wireType 2 =*/2458).fork()).ldelim();
            if (message.setGroupKickResp != null && Object.hasOwnProperty.call(message, "setGroupKickResp"))
                $root.onebot.SetGroupKickResp.encode(message.setGroupKickResp, writer.uint32(/* id 308, wireType 2 =*/2466).fork()).ldelim();
            if (message.setGroupBanResp != null && Object.hasOwnProperty.call(message, "setGroupBanResp"))
                $root.onebot.SetGroupBanResp.encode(message.setGroupBanResp, writer.uint32(/* id 309, wireType 2 =*/2474).fork()).ldelim();
            if (message.setGroupAnonymousBanResp != null && Object.hasOwnProperty.call(message, "setGroupAnonymousBanResp"))
                $root.onebot.SetGroupAnonymousBanResp.encode(message.setGroupAnonymousBanResp, writer.uint32(/* id 310, wireType 2 =*/2482).fork()).ldelim();
            if (message.setGroupWholeBanResp != null && Object.hasOwnProperty.call(message, "setGroupWholeBanResp"))
                $root.onebot.SetGroupWholeBanResp.encode(message.setGroupWholeBanResp, writer.uint32(/* id 311, wireType 2 =*/2490).fork()).ldelim();
            if (message.setGroupAdminResp != null && Object.hasOwnProperty.call(message, "setGroupAdminResp"))
                $root.onebot.SetGroupAdminResp.encode(message.setGroupAdminResp, writer.uint32(/* id 312, wireType 2 =*/2498).fork()).ldelim();
            if (message.setGroupAnonymousResp != null && Object.hasOwnProperty.call(message, "setGroupAnonymousResp"))
                $root.onebot.SetGroupAnonymousResp.encode(message.setGroupAnonymousResp, writer.uint32(/* id 313, wireType 2 =*/2506).fork()).ldelim();
            if (message.setGroupCardResp != null && Object.hasOwnProperty.call(message, "setGroupCardResp"))
                $root.onebot.SetGroupCardResp.encode(message.setGroupCardResp, writer.uint32(/* id 314, wireType 2 =*/2514).fork()).ldelim();
            if (message.setGroupNameResp != null && Object.hasOwnProperty.call(message, "setGroupNameResp"))
                $root.onebot.SetGroupNameResp.encode(message.setGroupNameResp, writer.uint32(/* id 315, wireType 2 =*/2522).fork()).ldelim();
            if (message.setGroupLeaveResp != null && Object.hasOwnProperty.call(message, "setGroupLeaveResp"))
                $root.onebot.SetGroupLeaveResp.encode(message.setGroupLeaveResp, writer.uint32(/* id 316, wireType 2 =*/2530).fork()).ldelim();
            if (message.setGroupSpecialTitleResp != null && Object.hasOwnProperty.call(message, "setGroupSpecialTitleResp"))
                $root.onebot.SetGroupSpecialTitleResp.encode(message.setGroupSpecialTitleResp, writer.uint32(/* id 317, wireType 2 =*/2538).fork()).ldelim();
            if (message.setFriendAddRequestResp != null && Object.hasOwnProperty.call(message, "setFriendAddRequestResp"))
                $root.onebot.SetFriendAddRequestResp.encode(message.setFriendAddRequestResp, writer.uint32(/* id 318, wireType 2 =*/2546).fork()).ldelim();
            if (message.setGroupAddRequestResp != null && Object.hasOwnProperty.call(message, "setGroupAddRequestResp"))
                $root.onebot.SetGroupAddRequestResp.encode(message.setGroupAddRequestResp, writer.uint32(/* id 319, wireType 2 =*/2554).fork()).ldelim();
            if (message.getLoginInfoResp != null && Object.hasOwnProperty.call(message, "getLoginInfoResp"))
                $root.onebot.GetLoginInfoResp.encode(message.getLoginInfoResp, writer.uint32(/* id 320, wireType 2 =*/2562).fork()).ldelim();
            if (message.getStrangerInfoResp != null && Object.hasOwnProperty.call(message, "getStrangerInfoResp"))
                $root.onebot.GetStrangerInfoResp.encode(message.getStrangerInfoResp, writer.uint32(/* id 321, wireType 2 =*/2570).fork()).ldelim();
            if (message.getFriendListResp != null && Object.hasOwnProperty.call(message, "getFriendListResp"))
                $root.onebot.GetFriendListResp.encode(message.getFriendListResp, writer.uint32(/* id 322, wireType 2 =*/2578).fork()).ldelim();
            if (message.getGroupInfoResp != null && Object.hasOwnProperty.call(message, "getGroupInfoResp"))
                $root.onebot.GetGroupInfoResp.encode(message.getGroupInfoResp, writer.uint32(/* id 323, wireType 2 =*/2586).fork()).ldelim();
            if (message.getGroupListResp != null && Object.hasOwnProperty.call(message, "getGroupListResp"))
                $root.onebot.GetGroupListResp.encode(message.getGroupListResp, writer.uint32(/* id 324, wireType 2 =*/2594).fork()).ldelim();
            if (message.getGroupMemberInfoResp != null && Object.hasOwnProperty.call(message, "getGroupMemberInfoResp"))
                $root.onebot.GetGroupMemberInfoResp.encode(message.getGroupMemberInfoResp, writer.uint32(/* id 325, wireType 2 =*/2602).fork()).ldelim();
            if (message.getGroupMemberListResp != null && Object.hasOwnProperty.call(message, "getGroupMemberListResp"))
                $root.onebot.GetGroupMemberListResp.encode(message.getGroupMemberListResp, writer.uint32(/* id 326, wireType 2 =*/2610).fork()).ldelim();
            if (message.getGroupHonorInfoResp != null && Object.hasOwnProperty.call(message, "getGroupHonorInfoResp"))
                $root.onebot.GetGroupHonorInfoResp.encode(message.getGroupHonorInfoResp, writer.uint32(/* id 327, wireType 2 =*/2618).fork()).ldelim();
            if (message.getCookiesResp != null && Object.hasOwnProperty.call(message, "getCookiesResp"))
                $root.onebot.GetCookiesResp.encode(message.getCookiesResp, writer.uint32(/* id 328, wireType 2 =*/2626).fork()).ldelim();
            if (message.getCsrfTokenResp != null && Object.hasOwnProperty.call(message, "getCsrfTokenResp"))
                $root.onebot.GetCsrfTokenResp.encode(message.getCsrfTokenResp, writer.uint32(/* id 329, wireType 2 =*/2634).fork()).ldelim();
            if (message.getCredentialsResp != null && Object.hasOwnProperty.call(message, "getCredentialsResp"))
                $root.onebot.GetCredentialsResp.encode(message.getCredentialsResp, writer.uint32(/* id 330, wireType 2 =*/2642).fork()).ldelim();
            if (message.getRecordResp != null && Object.hasOwnProperty.call(message, "getRecordResp"))
                $root.onebot.GetRecordResp.encode(message.getRecordResp, writer.uint32(/* id 331, wireType 2 =*/2650).fork()).ldelim();
            if (message.getImageResp != null && Object.hasOwnProperty.call(message, "getImageResp"))
                $root.onebot.GetImageResp.encode(message.getImageResp, writer.uint32(/* id 332, wireType 2 =*/2658).fork()).ldelim();
            if (message.canSendImageResp != null && Object.hasOwnProperty.call(message, "canSendImageResp"))
                $root.onebot.CanSendImageResp.encode(message.canSendImageResp, writer.uint32(/* id 333, wireType 2 =*/2666).fork()).ldelim();
            if (message.canSendRecordResp != null && Object.hasOwnProperty.call(message, "canSendRecordResp"))
                $root.onebot.CanSendRecordResp.encode(message.canSendRecordResp, writer.uint32(/* id 334, wireType 2 =*/2674).fork()).ldelim();
            if (message.getStatusResp != null && Object.hasOwnProperty.call(message, "getStatusResp"))
                $root.onebot.GetStatusResp.encode(message.getStatusResp, writer.uint32(/* id 335, wireType 2 =*/2682).fork()).ldelim();
            if (message.getVersionInfoResp != null && Object.hasOwnProperty.call(message, "getVersionInfoResp"))
                $root.onebot.GetVersionInfoResp.encode(message.getVersionInfoResp, writer.uint32(/* id 336, wireType 2 =*/2690).fork()).ldelim();
            if (message.setRestartResp != null && Object.hasOwnProperty.call(message, "setRestartResp"))
                $root.onebot.SetRestartResp.encode(message.setRestartResp, writer.uint32(/* id 337, wireType 2 =*/2698).fork()).ldelim();
            if (message.cleanCacheResp != null && Object.hasOwnProperty.call(message, "cleanCacheResp"))
                $root.onebot.CleanCacheResp.encode(message.cleanCacheResp, writer.uint32(/* id 338, wireType 2 =*/2706).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Frame message, length delimited. Does not implicitly {@link onebot.Frame.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.Frame
         * @static
         * @param {onebot.IFrame} message Frame message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Frame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Frame message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.Frame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.Frame} Frame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Frame.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.Frame(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.botId = reader.int64();
                    break;
                case 2:
                    message.frameType = reader.int32();
                    break;
                case 3:
                    message.echo = reader.string();
                    break;
                case 4:
                    message.ok = reader.bool();
                    break;
                case 100:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                case 101:
                    message.privateMessageEvent = $root.onebot.PrivateMessageEvent.decode(reader, reader.uint32());
                    break;
                case 102:
                    message.groupMessageEvent = $root.onebot.GroupMessageEvent.decode(reader, reader.uint32());
                    break;
                case 103:
                    message.groupUploadNoticeEvent = $root.onebot.GroupUploadNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 104:
                    message.groupAdminNoticeEvent = $root.onebot.GroupAdminNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 105:
                    message.groupDecreaseNoticeEvent = $root.onebot.GroupDecreaseNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 106:
                    message.groupIncreaseNoticeEvent = $root.onebot.GroupIncreaseNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 107:
                    message.groupBanNoticeEvent = $root.onebot.GroupBanNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 108:
                    message.friendAddNoticeEvent = $root.onebot.FriendAddNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 109:
                    message.groupRecallNoticeEvent = $root.onebot.GroupRecallNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 110:
                    message.friendRecallNoticeEvent = $root.onebot.FriendRecallNoticeEvent.decode(reader, reader.uint32());
                    break;
                case 111:
                    message.friendRequestEvent = $root.onebot.FriendRequestEvent.decode(reader, reader.uint32());
                    break;
                case 112:
                    message.groupRequestEvent = $root.onebot.GroupRequestEvent.decode(reader, reader.uint32());
                    break;
                case 201:
                    message.sendPrivateMsgReq = $root.onebot.SendPrivateMsgReq.decode(reader, reader.uint32());
                    break;
                case 202:
                    message.sendGroupMsgReq = $root.onebot.SendGroupMsgReq.decode(reader, reader.uint32());
                    break;
                case 203:
                    message.sendMsgReq = $root.onebot.SendMsgReq.decode(reader, reader.uint32());
                    break;
                case 204:
                    message.deleteMsgReq = $root.onebot.DeleteMsgReq.decode(reader, reader.uint32());
                    break;
                case 205:
                    message.getMsgReq = $root.onebot.GetMsgReq.decode(reader, reader.uint32());
                    break;
                case 206:
                    message.getForwardMsgReq = $root.onebot.GetForwardMsgReq.decode(reader, reader.uint32());
                    break;
                case 207:
                    message.sendLikeReq = $root.onebot.SendLikeReq.decode(reader, reader.uint32());
                    break;
                case 208:
                    message.setGroupKickReq = $root.onebot.SetGroupKickReq.decode(reader, reader.uint32());
                    break;
                case 209:
                    message.setGroupBanReq = $root.onebot.SetGroupBanReq.decode(reader, reader.uint32());
                    break;
                case 210:
                    message.setGroupAnonymousBanReq = $root.onebot.SetGroupAnonymousBanReq.decode(reader, reader.uint32());
                    break;
                case 211:
                    message.setGroupWholeBanReq = $root.onebot.SetGroupWholeBanReq.decode(reader, reader.uint32());
                    break;
                case 212:
                    message.setGroupAdminReq = $root.onebot.SetGroupAdminReq.decode(reader, reader.uint32());
                    break;
                case 213:
                    message.setGroupAnonymousReq = $root.onebot.SetGroupAnonymousReq.decode(reader, reader.uint32());
                    break;
                case 214:
                    message.setGroupCardReq = $root.onebot.SetGroupCardReq.decode(reader, reader.uint32());
                    break;
                case 215:
                    message.setGroupNameReq = $root.onebot.SetGroupNameReq.decode(reader, reader.uint32());
                    break;
                case 216:
                    message.setGroupLeaveReq = $root.onebot.SetGroupLeaveReq.decode(reader, reader.uint32());
                    break;
                case 217:
                    message.setGroupSpecialTitleReq = $root.onebot.SetGroupSpecialTitleReq.decode(reader, reader.uint32());
                    break;
                case 218:
                    message.setFriendAddRequestReq = $root.onebot.SetFriendAddRequestReq.decode(reader, reader.uint32());
                    break;
                case 219:
                    message.setGroupAddRequestReq = $root.onebot.SetGroupAddRequestReq.decode(reader, reader.uint32());
                    break;
                case 220:
                    message.getLoginInfoReq = $root.onebot.GetLoginInfoReq.decode(reader, reader.uint32());
                    break;
                case 221:
                    message.getStrangerInfoReq = $root.onebot.GetStrangerInfoReq.decode(reader, reader.uint32());
                    break;
                case 222:
                    message.getFriendListReq = $root.onebot.GetFriendListReq.decode(reader, reader.uint32());
                    break;
                case 223:
                    message.getGroupInfoReq = $root.onebot.GetGroupInfoReq.decode(reader, reader.uint32());
                    break;
                case 224:
                    message.getGroupListReq = $root.onebot.GetGroupListReq.decode(reader, reader.uint32());
                    break;
                case 225:
                    message.getGroupMemberInfoReq = $root.onebot.GetGroupMemberInfoReq.decode(reader, reader.uint32());
                    break;
                case 226:
                    message.getGroupMemberListReq = $root.onebot.GetGroupMemberListReq.decode(reader, reader.uint32());
                    break;
                case 227:
                    message.getGroupHonorInfoReq = $root.onebot.GetGroupHonorInfoReq.decode(reader, reader.uint32());
                    break;
                case 228:
                    message.getCookiesReq = $root.onebot.GetCookiesReq.decode(reader, reader.uint32());
                    break;
                case 229:
                    message.getCsrfTokenReq = $root.onebot.GetCsrfTokenReq.decode(reader, reader.uint32());
                    break;
                case 230:
                    message.getCredentialsReq = $root.onebot.GetCredentialsReq.decode(reader, reader.uint32());
                    break;
                case 231:
                    message.getRecordReq = $root.onebot.GetRecordReq.decode(reader, reader.uint32());
                    break;
                case 232:
                    message.getImageReq = $root.onebot.GetImageReq.decode(reader, reader.uint32());
                    break;
                case 233:
                    message.canSendImageReq = $root.onebot.CanSendImageReq.decode(reader, reader.uint32());
                    break;
                case 234:
                    message.canSendRecordReq = $root.onebot.CanSendRecordReq.decode(reader, reader.uint32());
                    break;
                case 235:
                    message.getStatusReq = $root.onebot.GetStatusReq.decode(reader, reader.uint32());
                    break;
                case 236:
                    message.getVersionInfoReq = $root.onebot.GetVersionInfoReq.decode(reader, reader.uint32());
                    break;
                case 237:
                    message.setRestartReq = $root.onebot.SetRestartReq.decode(reader, reader.uint32());
                    break;
                case 238:
                    message.cleanCacheReq = $root.onebot.CleanCacheReq.decode(reader, reader.uint32());
                    break;
                case 301:
                    message.sendPrivateMsgResp = $root.onebot.SendPrivateMsgResp.decode(reader, reader.uint32());
                    break;
                case 302:
                    message.sendGroupMsgResp = $root.onebot.SendGroupMsgResp.decode(reader, reader.uint32());
                    break;
                case 303:
                    message.sendMsgResp = $root.onebot.SendMsgResp.decode(reader, reader.uint32());
                    break;
                case 304:
                    message.deleteMsgResp = $root.onebot.DeleteMsgResp.decode(reader, reader.uint32());
                    break;
                case 305:
                    message.getMsgResp = $root.onebot.GetMsgResp.decode(reader, reader.uint32());
                    break;
                case 306:
                    message.getForwardMsgResp = $root.onebot.GetForwardMsgResp.decode(reader, reader.uint32());
                    break;
                case 307:
                    message.sendLikeResp = $root.onebot.SendLikeResp.decode(reader, reader.uint32());
                    break;
                case 308:
                    message.setGroupKickResp = $root.onebot.SetGroupKickResp.decode(reader, reader.uint32());
                    break;
                case 309:
                    message.setGroupBanResp = $root.onebot.SetGroupBanResp.decode(reader, reader.uint32());
                    break;
                case 310:
                    message.setGroupAnonymousBanResp = $root.onebot.SetGroupAnonymousBanResp.decode(reader, reader.uint32());
                    break;
                case 311:
                    message.setGroupWholeBanResp = $root.onebot.SetGroupWholeBanResp.decode(reader, reader.uint32());
                    break;
                case 312:
                    message.setGroupAdminResp = $root.onebot.SetGroupAdminResp.decode(reader, reader.uint32());
                    break;
                case 313:
                    message.setGroupAnonymousResp = $root.onebot.SetGroupAnonymousResp.decode(reader, reader.uint32());
                    break;
                case 314:
                    message.setGroupCardResp = $root.onebot.SetGroupCardResp.decode(reader, reader.uint32());
                    break;
                case 315:
                    message.setGroupNameResp = $root.onebot.SetGroupNameResp.decode(reader, reader.uint32());
                    break;
                case 316:
                    message.setGroupLeaveResp = $root.onebot.SetGroupLeaveResp.decode(reader, reader.uint32());
                    break;
                case 317:
                    message.setGroupSpecialTitleResp = $root.onebot.SetGroupSpecialTitleResp.decode(reader, reader.uint32());
                    break;
                case 318:
                    message.setFriendAddRequestResp = $root.onebot.SetFriendAddRequestResp.decode(reader, reader.uint32());
                    break;
                case 319:
                    message.setGroupAddRequestResp = $root.onebot.SetGroupAddRequestResp.decode(reader, reader.uint32());
                    break;
                case 320:
                    message.getLoginInfoResp = $root.onebot.GetLoginInfoResp.decode(reader, reader.uint32());
                    break;
                case 321:
                    message.getStrangerInfoResp = $root.onebot.GetStrangerInfoResp.decode(reader, reader.uint32());
                    break;
                case 322:
                    message.getFriendListResp = $root.onebot.GetFriendListResp.decode(reader, reader.uint32());
                    break;
                case 323:
                    message.getGroupInfoResp = $root.onebot.GetGroupInfoResp.decode(reader, reader.uint32());
                    break;
                case 324:
                    message.getGroupListResp = $root.onebot.GetGroupListResp.decode(reader, reader.uint32());
                    break;
                case 325:
                    message.getGroupMemberInfoResp = $root.onebot.GetGroupMemberInfoResp.decode(reader, reader.uint32());
                    break;
                case 326:
                    message.getGroupMemberListResp = $root.onebot.GetGroupMemberListResp.decode(reader, reader.uint32());
                    break;
                case 327:
                    message.getGroupHonorInfoResp = $root.onebot.GetGroupHonorInfoResp.decode(reader, reader.uint32());
                    break;
                case 328:
                    message.getCookiesResp = $root.onebot.GetCookiesResp.decode(reader, reader.uint32());
                    break;
                case 329:
                    message.getCsrfTokenResp = $root.onebot.GetCsrfTokenResp.decode(reader, reader.uint32());
                    break;
                case 330:
                    message.getCredentialsResp = $root.onebot.GetCredentialsResp.decode(reader, reader.uint32());
                    break;
                case 331:
                    message.getRecordResp = $root.onebot.GetRecordResp.decode(reader, reader.uint32());
                    break;
                case 332:
                    message.getImageResp = $root.onebot.GetImageResp.decode(reader, reader.uint32());
                    break;
                case 333:
                    message.canSendImageResp = $root.onebot.CanSendImageResp.decode(reader, reader.uint32());
                    break;
                case 334:
                    message.canSendRecordResp = $root.onebot.CanSendRecordResp.decode(reader, reader.uint32());
                    break;
                case 335:
                    message.getStatusResp = $root.onebot.GetStatusResp.decode(reader, reader.uint32());
                    break;
                case 336:
                    message.getVersionInfoResp = $root.onebot.GetVersionInfoResp.decode(reader, reader.uint32());
                    break;
                case 337:
                    message.setRestartResp = $root.onebot.SetRestartResp.decode(reader, reader.uint32());
                    break;
                case 338:
                    message.cleanCacheResp = $root.onebot.CleanCacheResp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Frame message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.Frame
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.Frame} Frame
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Frame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Frame message.
         * @function verify
         * @memberof onebot.Frame
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Frame.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.botId != null && message.hasOwnProperty("botId"))
                if (!$util.isInteger(message.botId) && !(message.botId && $util.isInteger(message.botId.low) && $util.isInteger(message.botId.high)))
                    return "botId: integer|Long expected";
            if (message.frameType != null && message.hasOwnProperty("frameType"))
                switch (message.frameType) {
                default:
                    return "frameType: enum value expected";
                case 0:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 238:
                case 301:
                case 302:
                case 303:
                case 304:
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 316:
                case 317:
                case 318:
                case 319:
                case 320:
                case 321:
                case 322:
                case 323:
                case 324:
                case 325:
                case 326:
                case 327:
                case 328:
                case 329:
                case 330:
                case 331:
                case 332:
                case 333:
                case 334:
                case 335:
                case 336:
                case 337:
                case 338:
                    break;
                }
            if (message.echo != null && message.hasOwnProperty("echo"))
                if (!$util.isString(message.echo))
                    return "echo: string expected";
            if (message.ok != null && message.hasOwnProperty("ok"))
                if (typeof message.ok !== "boolean")
                    return "ok: boolean expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            if (message.privateMessageEvent != null && message.hasOwnProperty("privateMessageEvent")) {
                properties.data = 1;
                {
                    var error = $root.onebot.PrivateMessageEvent.verify(message.privateMessageEvent);
                    if (error)
                        return "privateMessageEvent." + error;
                }
            }
            if (message.groupMessageEvent != null && message.hasOwnProperty("groupMessageEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupMessageEvent.verify(message.groupMessageEvent);
                    if (error)
                        return "groupMessageEvent." + error;
                }
            }
            if (message.groupUploadNoticeEvent != null && message.hasOwnProperty("groupUploadNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupUploadNoticeEvent.verify(message.groupUploadNoticeEvent);
                    if (error)
                        return "groupUploadNoticeEvent." + error;
                }
            }
            if (message.groupAdminNoticeEvent != null && message.hasOwnProperty("groupAdminNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupAdminNoticeEvent.verify(message.groupAdminNoticeEvent);
                    if (error)
                        return "groupAdminNoticeEvent." + error;
                }
            }
            if (message.groupDecreaseNoticeEvent != null && message.hasOwnProperty("groupDecreaseNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupDecreaseNoticeEvent.verify(message.groupDecreaseNoticeEvent);
                    if (error)
                        return "groupDecreaseNoticeEvent." + error;
                }
            }
            if (message.groupIncreaseNoticeEvent != null && message.hasOwnProperty("groupIncreaseNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupIncreaseNoticeEvent.verify(message.groupIncreaseNoticeEvent);
                    if (error)
                        return "groupIncreaseNoticeEvent." + error;
                }
            }
            if (message.groupBanNoticeEvent != null && message.hasOwnProperty("groupBanNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupBanNoticeEvent.verify(message.groupBanNoticeEvent);
                    if (error)
                        return "groupBanNoticeEvent." + error;
                }
            }
            if (message.friendAddNoticeEvent != null && message.hasOwnProperty("friendAddNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.FriendAddNoticeEvent.verify(message.friendAddNoticeEvent);
                    if (error)
                        return "friendAddNoticeEvent." + error;
                }
            }
            if (message.groupRecallNoticeEvent != null && message.hasOwnProperty("groupRecallNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupRecallNoticeEvent.verify(message.groupRecallNoticeEvent);
                    if (error)
                        return "groupRecallNoticeEvent." + error;
                }
            }
            if (message.friendRecallNoticeEvent != null && message.hasOwnProperty("friendRecallNoticeEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.FriendRecallNoticeEvent.verify(message.friendRecallNoticeEvent);
                    if (error)
                        return "friendRecallNoticeEvent." + error;
                }
            }
            if (message.friendRequestEvent != null && message.hasOwnProperty("friendRequestEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.FriendRequestEvent.verify(message.friendRequestEvent);
                    if (error)
                        return "friendRequestEvent." + error;
                }
            }
            if (message.groupRequestEvent != null && message.hasOwnProperty("groupRequestEvent")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GroupRequestEvent.verify(message.groupRequestEvent);
                    if (error)
                        return "groupRequestEvent." + error;
                }
            }
            if (message.sendPrivateMsgReq != null && message.hasOwnProperty("sendPrivateMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendPrivateMsgReq.verify(message.sendPrivateMsgReq);
                    if (error)
                        return "sendPrivateMsgReq." + error;
                }
            }
            if (message.sendGroupMsgReq != null && message.hasOwnProperty("sendGroupMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendGroupMsgReq.verify(message.sendGroupMsgReq);
                    if (error)
                        return "sendGroupMsgReq." + error;
                }
            }
            if (message.sendMsgReq != null && message.hasOwnProperty("sendMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendMsgReq.verify(message.sendMsgReq);
                    if (error)
                        return "sendMsgReq." + error;
                }
            }
            if (message.deleteMsgReq != null && message.hasOwnProperty("deleteMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.DeleteMsgReq.verify(message.deleteMsgReq);
                    if (error)
                        return "deleteMsgReq." + error;
                }
            }
            if (message.getMsgReq != null && message.hasOwnProperty("getMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetMsgReq.verify(message.getMsgReq);
                    if (error)
                        return "getMsgReq." + error;
                }
            }
            if (message.getForwardMsgReq != null && message.hasOwnProperty("getForwardMsgReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetForwardMsgReq.verify(message.getForwardMsgReq);
                    if (error)
                        return "getForwardMsgReq." + error;
                }
            }
            if (message.sendLikeReq != null && message.hasOwnProperty("sendLikeReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendLikeReq.verify(message.sendLikeReq);
                    if (error)
                        return "sendLikeReq." + error;
                }
            }
            if (message.setGroupKickReq != null && message.hasOwnProperty("setGroupKickReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupKickReq.verify(message.setGroupKickReq);
                    if (error)
                        return "setGroupKickReq." + error;
                }
            }
            if (message.setGroupBanReq != null && message.hasOwnProperty("setGroupBanReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupBanReq.verify(message.setGroupBanReq);
                    if (error)
                        return "setGroupBanReq." + error;
                }
            }
            if (message.setGroupAnonymousBanReq != null && message.hasOwnProperty("setGroupAnonymousBanReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAnonymousBanReq.verify(message.setGroupAnonymousBanReq);
                    if (error)
                        return "setGroupAnonymousBanReq." + error;
                }
            }
            if (message.setGroupWholeBanReq != null && message.hasOwnProperty("setGroupWholeBanReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupWholeBanReq.verify(message.setGroupWholeBanReq);
                    if (error)
                        return "setGroupWholeBanReq." + error;
                }
            }
            if (message.setGroupAdminReq != null && message.hasOwnProperty("setGroupAdminReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAdminReq.verify(message.setGroupAdminReq);
                    if (error)
                        return "setGroupAdminReq." + error;
                }
            }
            if (message.setGroupAnonymousReq != null && message.hasOwnProperty("setGroupAnonymousReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAnonymousReq.verify(message.setGroupAnonymousReq);
                    if (error)
                        return "setGroupAnonymousReq." + error;
                }
            }
            if (message.setGroupCardReq != null && message.hasOwnProperty("setGroupCardReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupCardReq.verify(message.setGroupCardReq);
                    if (error)
                        return "setGroupCardReq." + error;
                }
            }
            if (message.setGroupNameReq != null && message.hasOwnProperty("setGroupNameReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupNameReq.verify(message.setGroupNameReq);
                    if (error)
                        return "setGroupNameReq." + error;
                }
            }
            if (message.setGroupLeaveReq != null && message.hasOwnProperty("setGroupLeaveReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupLeaveReq.verify(message.setGroupLeaveReq);
                    if (error)
                        return "setGroupLeaveReq." + error;
                }
            }
            if (message.setGroupSpecialTitleReq != null && message.hasOwnProperty("setGroupSpecialTitleReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupSpecialTitleReq.verify(message.setGroupSpecialTitleReq);
                    if (error)
                        return "setGroupSpecialTitleReq." + error;
                }
            }
            if (message.setFriendAddRequestReq != null && message.hasOwnProperty("setFriendAddRequestReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetFriendAddRequestReq.verify(message.setFriendAddRequestReq);
                    if (error)
                        return "setFriendAddRequestReq." + error;
                }
            }
            if (message.setGroupAddRequestReq != null && message.hasOwnProperty("setGroupAddRequestReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAddRequestReq.verify(message.setGroupAddRequestReq);
                    if (error)
                        return "setGroupAddRequestReq." + error;
                }
            }
            if (message.getLoginInfoReq != null && message.hasOwnProperty("getLoginInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetLoginInfoReq.verify(message.getLoginInfoReq);
                    if (error)
                        return "getLoginInfoReq." + error;
                }
            }
            if (message.getStrangerInfoReq != null && message.hasOwnProperty("getStrangerInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetStrangerInfoReq.verify(message.getStrangerInfoReq);
                    if (error)
                        return "getStrangerInfoReq." + error;
                }
            }
            if (message.getFriendListReq != null && message.hasOwnProperty("getFriendListReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetFriendListReq.verify(message.getFriendListReq);
                    if (error)
                        return "getFriendListReq." + error;
                }
            }
            if (message.getGroupInfoReq != null && message.hasOwnProperty("getGroupInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupInfoReq.verify(message.getGroupInfoReq);
                    if (error)
                        return "getGroupInfoReq." + error;
                }
            }
            if (message.getGroupListReq != null && message.hasOwnProperty("getGroupListReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupListReq.verify(message.getGroupListReq);
                    if (error)
                        return "getGroupListReq." + error;
                }
            }
            if (message.getGroupMemberInfoReq != null && message.hasOwnProperty("getGroupMemberInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupMemberInfoReq.verify(message.getGroupMemberInfoReq);
                    if (error)
                        return "getGroupMemberInfoReq." + error;
                }
            }
            if (message.getGroupMemberListReq != null && message.hasOwnProperty("getGroupMemberListReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupMemberListReq.verify(message.getGroupMemberListReq);
                    if (error)
                        return "getGroupMemberListReq." + error;
                }
            }
            if (message.getGroupHonorInfoReq != null && message.hasOwnProperty("getGroupHonorInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupHonorInfoReq.verify(message.getGroupHonorInfoReq);
                    if (error)
                        return "getGroupHonorInfoReq." + error;
                }
            }
            if (message.getCookiesReq != null && message.hasOwnProperty("getCookiesReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCookiesReq.verify(message.getCookiesReq);
                    if (error)
                        return "getCookiesReq." + error;
                }
            }
            if (message.getCsrfTokenReq != null && message.hasOwnProperty("getCsrfTokenReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCsrfTokenReq.verify(message.getCsrfTokenReq);
                    if (error)
                        return "getCsrfTokenReq." + error;
                }
            }
            if (message.getCredentialsReq != null && message.hasOwnProperty("getCredentialsReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCredentialsReq.verify(message.getCredentialsReq);
                    if (error)
                        return "getCredentialsReq." + error;
                }
            }
            if (message.getRecordReq != null && message.hasOwnProperty("getRecordReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetRecordReq.verify(message.getRecordReq);
                    if (error)
                        return "getRecordReq." + error;
                }
            }
            if (message.getImageReq != null && message.hasOwnProperty("getImageReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetImageReq.verify(message.getImageReq);
                    if (error)
                        return "getImageReq." + error;
                }
            }
            if (message.canSendImageReq != null && message.hasOwnProperty("canSendImageReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CanSendImageReq.verify(message.canSendImageReq);
                    if (error)
                        return "canSendImageReq." + error;
                }
            }
            if (message.canSendRecordReq != null && message.hasOwnProperty("canSendRecordReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CanSendRecordReq.verify(message.canSendRecordReq);
                    if (error)
                        return "canSendRecordReq." + error;
                }
            }
            if (message.getStatusReq != null && message.hasOwnProperty("getStatusReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetStatusReq.verify(message.getStatusReq);
                    if (error)
                        return "getStatusReq." + error;
                }
            }
            if (message.getVersionInfoReq != null && message.hasOwnProperty("getVersionInfoReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetVersionInfoReq.verify(message.getVersionInfoReq);
                    if (error)
                        return "getVersionInfoReq." + error;
                }
            }
            if (message.setRestartReq != null && message.hasOwnProperty("setRestartReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetRestartReq.verify(message.setRestartReq);
                    if (error)
                        return "setRestartReq." + error;
                }
            }
            if (message.cleanCacheReq != null && message.hasOwnProperty("cleanCacheReq")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CleanCacheReq.verify(message.cleanCacheReq);
                    if (error)
                        return "cleanCacheReq." + error;
                }
            }
            if (message.sendPrivateMsgResp != null && message.hasOwnProperty("sendPrivateMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendPrivateMsgResp.verify(message.sendPrivateMsgResp);
                    if (error)
                        return "sendPrivateMsgResp." + error;
                }
            }
            if (message.sendGroupMsgResp != null && message.hasOwnProperty("sendGroupMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendGroupMsgResp.verify(message.sendGroupMsgResp);
                    if (error)
                        return "sendGroupMsgResp." + error;
                }
            }
            if (message.sendMsgResp != null && message.hasOwnProperty("sendMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendMsgResp.verify(message.sendMsgResp);
                    if (error)
                        return "sendMsgResp." + error;
                }
            }
            if (message.deleteMsgResp != null && message.hasOwnProperty("deleteMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.DeleteMsgResp.verify(message.deleteMsgResp);
                    if (error)
                        return "deleteMsgResp." + error;
                }
            }
            if (message.getMsgResp != null && message.hasOwnProperty("getMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetMsgResp.verify(message.getMsgResp);
                    if (error)
                        return "getMsgResp." + error;
                }
            }
            if (message.getForwardMsgResp != null && message.hasOwnProperty("getForwardMsgResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetForwardMsgResp.verify(message.getForwardMsgResp);
                    if (error)
                        return "getForwardMsgResp." + error;
                }
            }
            if (message.sendLikeResp != null && message.hasOwnProperty("sendLikeResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SendLikeResp.verify(message.sendLikeResp);
                    if (error)
                        return "sendLikeResp." + error;
                }
            }
            if (message.setGroupKickResp != null && message.hasOwnProperty("setGroupKickResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupKickResp.verify(message.setGroupKickResp);
                    if (error)
                        return "setGroupKickResp." + error;
                }
            }
            if (message.setGroupBanResp != null && message.hasOwnProperty("setGroupBanResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupBanResp.verify(message.setGroupBanResp);
                    if (error)
                        return "setGroupBanResp." + error;
                }
            }
            if (message.setGroupAnonymousBanResp != null && message.hasOwnProperty("setGroupAnonymousBanResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAnonymousBanResp.verify(message.setGroupAnonymousBanResp);
                    if (error)
                        return "setGroupAnonymousBanResp." + error;
                }
            }
            if (message.setGroupWholeBanResp != null && message.hasOwnProperty("setGroupWholeBanResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupWholeBanResp.verify(message.setGroupWholeBanResp);
                    if (error)
                        return "setGroupWholeBanResp." + error;
                }
            }
            if (message.setGroupAdminResp != null && message.hasOwnProperty("setGroupAdminResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAdminResp.verify(message.setGroupAdminResp);
                    if (error)
                        return "setGroupAdminResp." + error;
                }
            }
            if (message.setGroupAnonymousResp != null && message.hasOwnProperty("setGroupAnonymousResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAnonymousResp.verify(message.setGroupAnonymousResp);
                    if (error)
                        return "setGroupAnonymousResp." + error;
                }
            }
            if (message.setGroupCardResp != null && message.hasOwnProperty("setGroupCardResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupCardResp.verify(message.setGroupCardResp);
                    if (error)
                        return "setGroupCardResp." + error;
                }
            }
            if (message.setGroupNameResp != null && message.hasOwnProperty("setGroupNameResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupNameResp.verify(message.setGroupNameResp);
                    if (error)
                        return "setGroupNameResp." + error;
                }
            }
            if (message.setGroupLeaveResp != null && message.hasOwnProperty("setGroupLeaveResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupLeaveResp.verify(message.setGroupLeaveResp);
                    if (error)
                        return "setGroupLeaveResp." + error;
                }
            }
            if (message.setGroupSpecialTitleResp != null && message.hasOwnProperty("setGroupSpecialTitleResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupSpecialTitleResp.verify(message.setGroupSpecialTitleResp);
                    if (error)
                        return "setGroupSpecialTitleResp." + error;
                }
            }
            if (message.setFriendAddRequestResp != null && message.hasOwnProperty("setFriendAddRequestResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetFriendAddRequestResp.verify(message.setFriendAddRequestResp);
                    if (error)
                        return "setFriendAddRequestResp." + error;
                }
            }
            if (message.setGroupAddRequestResp != null && message.hasOwnProperty("setGroupAddRequestResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetGroupAddRequestResp.verify(message.setGroupAddRequestResp);
                    if (error)
                        return "setGroupAddRequestResp." + error;
                }
            }
            if (message.getLoginInfoResp != null && message.hasOwnProperty("getLoginInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetLoginInfoResp.verify(message.getLoginInfoResp);
                    if (error)
                        return "getLoginInfoResp." + error;
                }
            }
            if (message.getStrangerInfoResp != null && message.hasOwnProperty("getStrangerInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetStrangerInfoResp.verify(message.getStrangerInfoResp);
                    if (error)
                        return "getStrangerInfoResp." + error;
                }
            }
            if (message.getFriendListResp != null && message.hasOwnProperty("getFriendListResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetFriendListResp.verify(message.getFriendListResp);
                    if (error)
                        return "getFriendListResp." + error;
                }
            }
            if (message.getGroupInfoResp != null && message.hasOwnProperty("getGroupInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupInfoResp.verify(message.getGroupInfoResp);
                    if (error)
                        return "getGroupInfoResp." + error;
                }
            }
            if (message.getGroupListResp != null && message.hasOwnProperty("getGroupListResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupListResp.verify(message.getGroupListResp);
                    if (error)
                        return "getGroupListResp." + error;
                }
            }
            if (message.getGroupMemberInfoResp != null && message.hasOwnProperty("getGroupMemberInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupMemberInfoResp.verify(message.getGroupMemberInfoResp);
                    if (error)
                        return "getGroupMemberInfoResp." + error;
                }
            }
            if (message.getGroupMemberListResp != null && message.hasOwnProperty("getGroupMemberListResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupMemberListResp.verify(message.getGroupMemberListResp);
                    if (error)
                        return "getGroupMemberListResp." + error;
                }
            }
            if (message.getGroupHonorInfoResp != null && message.hasOwnProperty("getGroupHonorInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetGroupHonorInfoResp.verify(message.getGroupHonorInfoResp);
                    if (error)
                        return "getGroupHonorInfoResp." + error;
                }
            }
            if (message.getCookiesResp != null && message.hasOwnProperty("getCookiesResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCookiesResp.verify(message.getCookiesResp);
                    if (error)
                        return "getCookiesResp." + error;
                }
            }
            if (message.getCsrfTokenResp != null && message.hasOwnProperty("getCsrfTokenResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCsrfTokenResp.verify(message.getCsrfTokenResp);
                    if (error)
                        return "getCsrfTokenResp." + error;
                }
            }
            if (message.getCredentialsResp != null && message.hasOwnProperty("getCredentialsResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetCredentialsResp.verify(message.getCredentialsResp);
                    if (error)
                        return "getCredentialsResp." + error;
                }
            }
            if (message.getRecordResp != null && message.hasOwnProperty("getRecordResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetRecordResp.verify(message.getRecordResp);
                    if (error)
                        return "getRecordResp." + error;
                }
            }
            if (message.getImageResp != null && message.hasOwnProperty("getImageResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetImageResp.verify(message.getImageResp);
                    if (error)
                        return "getImageResp." + error;
                }
            }
            if (message.canSendImageResp != null && message.hasOwnProperty("canSendImageResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CanSendImageResp.verify(message.canSendImageResp);
                    if (error)
                        return "canSendImageResp." + error;
                }
            }
            if (message.canSendRecordResp != null && message.hasOwnProperty("canSendRecordResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CanSendRecordResp.verify(message.canSendRecordResp);
                    if (error)
                        return "canSendRecordResp." + error;
                }
            }
            if (message.getStatusResp != null && message.hasOwnProperty("getStatusResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetStatusResp.verify(message.getStatusResp);
                    if (error)
                        return "getStatusResp." + error;
                }
            }
            if (message.getVersionInfoResp != null && message.hasOwnProperty("getVersionInfoResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.GetVersionInfoResp.verify(message.getVersionInfoResp);
                    if (error)
                        return "getVersionInfoResp." + error;
                }
            }
            if (message.setRestartResp != null && message.hasOwnProperty("setRestartResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.SetRestartResp.verify(message.setRestartResp);
                    if (error)
                        return "setRestartResp." + error;
                }
            }
            if (message.cleanCacheResp != null && message.hasOwnProperty("cleanCacheResp")) {
                if (properties.data === 1)
                    return "data: multiple values";
                properties.data = 1;
                {
                    var error = $root.onebot.CleanCacheResp.verify(message.cleanCacheResp);
                    if (error)
                        return "cleanCacheResp." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Frame message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.Frame
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.Frame} Frame
         */
        Frame.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.Frame)
                return object;
            var message = new $root.onebot.Frame();
            if (object.botId != null)
                if ($util.Long)
                    (message.botId = $util.Long.fromValue(object.botId)).unsigned = false;
                else if (typeof object.botId === "string")
                    message.botId = parseInt(object.botId, 10);
                else if (typeof object.botId === "number")
                    message.botId = object.botId;
                else if (typeof object.botId === "object")
                    message.botId = new $util.LongBits(object.botId.low >>> 0, object.botId.high >>> 0).toNumber();
            switch (object.frameType) {
            case "TUNKNOWN":
            case 0:
                message.frameType = 0;
                break;
            case "TPrivateMessageEvent":
            case 101:
                message.frameType = 101;
                break;
            case "TGroupMessageEvent":
            case 102:
                message.frameType = 102;
                break;
            case "TGroupUploadNoticeEvent":
            case 103:
                message.frameType = 103;
                break;
            case "TGroupAdminNoticeEvent":
            case 104:
                message.frameType = 104;
                break;
            case "TGroupDecreaseNoticeEvent":
            case 105:
                message.frameType = 105;
                break;
            case "TGroupIncreaseNoticeEvent":
            case 106:
                message.frameType = 106;
                break;
            case "TGroupBanNoticeEvent":
            case 107:
                message.frameType = 107;
                break;
            case "TFriendAddNoticeEvent":
            case 108:
                message.frameType = 108;
                break;
            case "TGroupRecallNoticeEvent":
            case 109:
                message.frameType = 109;
                break;
            case "TFriendRecallNoticeEvent":
            case 110:
                message.frameType = 110;
                break;
            case "TFriendRequestEvent":
            case 111:
                message.frameType = 111;
                break;
            case "TGroupRequestEvent":
            case 112:
                message.frameType = 112;
                break;
            case "TSendPrivateMsgReq":
            case 201:
                message.frameType = 201;
                break;
            case "TSendGroupMsgReq":
            case 202:
                message.frameType = 202;
                break;
            case "TSendMsgReq":
            case 203:
                message.frameType = 203;
                break;
            case "TDeleteMsgReq":
            case 204:
                message.frameType = 204;
                break;
            case "TGetMsgReq":
            case 205:
                message.frameType = 205;
                break;
            case "TGetForwardMsgReq":
            case 206:
                message.frameType = 206;
                break;
            case "TSendLikeReq":
            case 207:
                message.frameType = 207;
                break;
            case "TSetGroupKickReq":
            case 208:
                message.frameType = 208;
                break;
            case "TSetGroupBanReq":
            case 209:
                message.frameType = 209;
                break;
            case "TSetGroupAnonymousReq":
            case 210:
                message.frameType = 210;
                break;
            case "TSetGroupWholeBanReq":
            case 211:
                message.frameType = 211;
                break;
            case "TSetGroupAdminReq":
            case 212:
                message.frameType = 212;
                break;
            case "TSetGroupAnonymousBanReq":
            case 213:
                message.frameType = 213;
                break;
            case "TSetGroupCardReq":
            case 214:
                message.frameType = 214;
                break;
            case "TSetGroupNameReq":
            case 215:
                message.frameType = 215;
                break;
            case "TSetGroupLeaveReq":
            case 216:
                message.frameType = 216;
                break;
            case "TSetGroupSpecialTitleReq":
            case 217:
                message.frameType = 217;
                break;
            case "TSetFriendAddRequestReq":
            case 218:
                message.frameType = 218;
                break;
            case "TSetGroupAddRequestReq":
            case 219:
                message.frameType = 219;
                break;
            case "TGetLoginInfoReq":
            case 220:
                message.frameType = 220;
                break;
            case "TGetStrangerInfoReq":
            case 221:
                message.frameType = 221;
                break;
            case "TGetFriendListReq":
            case 222:
                message.frameType = 222;
                break;
            case "TGetGroupInfoReq":
            case 223:
                message.frameType = 223;
                break;
            case "TGetGroupListReq":
            case 224:
                message.frameType = 224;
                break;
            case "TGetGroupMemberInfoReq":
            case 225:
                message.frameType = 225;
                break;
            case "TGetGroupMemberListReq":
            case 226:
                message.frameType = 226;
                break;
            case "TGetGroupHonorInfoReq":
            case 227:
                message.frameType = 227;
                break;
            case "TGetCookiesReq":
            case 228:
                message.frameType = 228;
                break;
            case "TGetCsrfTokenReq":
            case 229:
                message.frameType = 229;
                break;
            case "TGetCredentialsReq":
            case 230:
                message.frameType = 230;
                break;
            case "TGetRecordReq":
            case 231:
                message.frameType = 231;
                break;
            case "TGetImageReq":
            case 232:
                message.frameType = 232;
                break;
            case "TCanSendImageReq":
            case 233:
                message.frameType = 233;
                break;
            case "TCanSendRecordReq":
            case 234:
                message.frameType = 234;
                break;
            case "TGetStatusReq":
            case 235:
                message.frameType = 235;
                break;
            case "TGetVersionInfoReq":
            case 236:
                message.frameType = 236;
                break;
            case "TSetRestartReq":
            case 237:
                message.frameType = 237;
                break;
            case "TCleanCacheReq":
            case 238:
                message.frameType = 238;
                break;
            case "TSendPrivateMsgResp":
            case 301:
                message.frameType = 301;
                break;
            case "TSendGroupMsgResp":
            case 302:
                message.frameType = 302;
                break;
            case "TSendMsgResp":
            case 303:
                message.frameType = 303;
                break;
            case "TDeleteMsgResp":
            case 304:
                message.frameType = 304;
                break;
            case "TGetMsgResp":
            case 305:
                message.frameType = 305;
                break;
            case "TGetForwardMsgResp":
            case 306:
                message.frameType = 306;
                break;
            case "TSendLikeResp":
            case 307:
                message.frameType = 307;
                break;
            case "TSetGroupKickResp":
            case 308:
                message.frameType = 308;
                break;
            case "TSetGroupBanResp":
            case 309:
                message.frameType = 309;
                break;
            case "TSetGroupAnonymousResp":
            case 310:
                message.frameType = 310;
                break;
            case "TSetGroupWholeBanResp":
            case 311:
                message.frameType = 311;
                break;
            case "TSetGroupAdminResp":
            case 312:
                message.frameType = 312;
                break;
            case "TSetGroupAnonymousBanResp":
            case 313:
                message.frameType = 313;
                break;
            case "TSetGroupCardResp":
            case 314:
                message.frameType = 314;
                break;
            case "TSetGroupNameResp":
            case 315:
                message.frameType = 315;
                break;
            case "TSetGroupLeaveResp":
            case 316:
                message.frameType = 316;
                break;
            case "TSetGroupSpecialTitleResp":
            case 317:
                message.frameType = 317;
                break;
            case "TSetFriendAddRequestResp":
            case 318:
                message.frameType = 318;
                break;
            case "TSetGroupAddRequestResp":
            case 319:
                message.frameType = 319;
                break;
            case "TGetLoginInfoResp":
            case 320:
                message.frameType = 320;
                break;
            case "TGetStrangerInfoResp":
            case 321:
                message.frameType = 321;
                break;
            case "TGetFriendListResp":
            case 322:
                message.frameType = 322;
                break;
            case "TGetGroupInfoResp":
            case 323:
                message.frameType = 323;
                break;
            case "TGetGroupListResp":
            case 324:
                message.frameType = 324;
                break;
            case "TGetGroupMemberInfoResp":
            case 325:
                message.frameType = 325;
                break;
            case "TGetGroupMemberListResp":
            case 326:
                message.frameType = 326;
                break;
            case "TGetGroupHonorInfoResp":
            case 327:
                message.frameType = 327;
                break;
            case "TGetCookiesResp":
            case 328:
                message.frameType = 328;
                break;
            case "TGetCsrfTokenResp":
            case 329:
                message.frameType = 329;
                break;
            case "TGetCredentialsResp":
            case 330:
                message.frameType = 330;
                break;
            case "TGetRecordResp":
            case 331:
                message.frameType = 331;
                break;
            case "TGetImageResp":
            case 332:
                message.frameType = 332;
                break;
            case "TCanSendImageResp":
            case 333:
                message.frameType = 333;
                break;
            case "TCanSendRecordResp":
            case 334:
                message.frameType = 334;
                break;
            case "TGetStatusResp":
            case 335:
                message.frameType = 335;
                break;
            case "TGetVersionInfoResp":
            case 336:
                message.frameType = 336;
                break;
            case "TSetRestartResp":
            case 337:
                message.frameType = 337;
                break;
            case "TCleanCacheResp":
            case 338:
                message.frameType = 338;
                break;
            }
            if (object.echo != null)
                message.echo = String(object.echo);
            if (object.ok != null)
                message.ok = Boolean(object.ok);
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.Frame.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            if (object.privateMessageEvent != null) {
                if (typeof object.privateMessageEvent !== "object")
                    throw TypeError(".onebot.Frame.privateMessageEvent: object expected");
                message.privateMessageEvent = $root.onebot.PrivateMessageEvent.fromObject(object.privateMessageEvent);
            }
            if (object.groupMessageEvent != null) {
                if (typeof object.groupMessageEvent !== "object")
                    throw TypeError(".onebot.Frame.groupMessageEvent: object expected");
                message.groupMessageEvent = $root.onebot.GroupMessageEvent.fromObject(object.groupMessageEvent);
            }
            if (object.groupUploadNoticeEvent != null) {
                if (typeof object.groupUploadNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupUploadNoticeEvent: object expected");
                message.groupUploadNoticeEvent = $root.onebot.GroupUploadNoticeEvent.fromObject(object.groupUploadNoticeEvent);
            }
            if (object.groupAdminNoticeEvent != null) {
                if (typeof object.groupAdminNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupAdminNoticeEvent: object expected");
                message.groupAdminNoticeEvent = $root.onebot.GroupAdminNoticeEvent.fromObject(object.groupAdminNoticeEvent);
            }
            if (object.groupDecreaseNoticeEvent != null) {
                if (typeof object.groupDecreaseNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupDecreaseNoticeEvent: object expected");
                message.groupDecreaseNoticeEvent = $root.onebot.GroupDecreaseNoticeEvent.fromObject(object.groupDecreaseNoticeEvent);
            }
            if (object.groupIncreaseNoticeEvent != null) {
                if (typeof object.groupIncreaseNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupIncreaseNoticeEvent: object expected");
                message.groupIncreaseNoticeEvent = $root.onebot.GroupIncreaseNoticeEvent.fromObject(object.groupIncreaseNoticeEvent);
            }
            if (object.groupBanNoticeEvent != null) {
                if (typeof object.groupBanNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupBanNoticeEvent: object expected");
                message.groupBanNoticeEvent = $root.onebot.GroupBanNoticeEvent.fromObject(object.groupBanNoticeEvent);
            }
            if (object.friendAddNoticeEvent != null) {
                if (typeof object.friendAddNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.friendAddNoticeEvent: object expected");
                message.friendAddNoticeEvent = $root.onebot.FriendAddNoticeEvent.fromObject(object.friendAddNoticeEvent);
            }
            if (object.groupRecallNoticeEvent != null) {
                if (typeof object.groupRecallNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.groupRecallNoticeEvent: object expected");
                message.groupRecallNoticeEvent = $root.onebot.GroupRecallNoticeEvent.fromObject(object.groupRecallNoticeEvent);
            }
            if (object.friendRecallNoticeEvent != null) {
                if (typeof object.friendRecallNoticeEvent !== "object")
                    throw TypeError(".onebot.Frame.friendRecallNoticeEvent: object expected");
                message.friendRecallNoticeEvent = $root.onebot.FriendRecallNoticeEvent.fromObject(object.friendRecallNoticeEvent);
            }
            if (object.friendRequestEvent != null) {
                if (typeof object.friendRequestEvent !== "object")
                    throw TypeError(".onebot.Frame.friendRequestEvent: object expected");
                message.friendRequestEvent = $root.onebot.FriendRequestEvent.fromObject(object.friendRequestEvent);
            }
            if (object.groupRequestEvent != null) {
                if (typeof object.groupRequestEvent !== "object")
                    throw TypeError(".onebot.Frame.groupRequestEvent: object expected");
                message.groupRequestEvent = $root.onebot.GroupRequestEvent.fromObject(object.groupRequestEvent);
            }
            if (object.sendPrivateMsgReq != null) {
                if (typeof object.sendPrivateMsgReq !== "object")
                    throw TypeError(".onebot.Frame.sendPrivateMsgReq: object expected");
                message.sendPrivateMsgReq = $root.onebot.SendPrivateMsgReq.fromObject(object.sendPrivateMsgReq);
            }
            if (object.sendGroupMsgReq != null) {
                if (typeof object.sendGroupMsgReq !== "object")
                    throw TypeError(".onebot.Frame.sendGroupMsgReq: object expected");
                message.sendGroupMsgReq = $root.onebot.SendGroupMsgReq.fromObject(object.sendGroupMsgReq);
            }
            if (object.sendMsgReq != null) {
                if (typeof object.sendMsgReq !== "object")
                    throw TypeError(".onebot.Frame.sendMsgReq: object expected");
                message.sendMsgReq = $root.onebot.SendMsgReq.fromObject(object.sendMsgReq);
            }
            if (object.deleteMsgReq != null) {
                if (typeof object.deleteMsgReq !== "object")
                    throw TypeError(".onebot.Frame.deleteMsgReq: object expected");
                message.deleteMsgReq = $root.onebot.DeleteMsgReq.fromObject(object.deleteMsgReq);
            }
            if (object.getMsgReq != null) {
                if (typeof object.getMsgReq !== "object")
                    throw TypeError(".onebot.Frame.getMsgReq: object expected");
                message.getMsgReq = $root.onebot.GetMsgReq.fromObject(object.getMsgReq);
            }
            if (object.getForwardMsgReq != null) {
                if (typeof object.getForwardMsgReq !== "object")
                    throw TypeError(".onebot.Frame.getForwardMsgReq: object expected");
                message.getForwardMsgReq = $root.onebot.GetForwardMsgReq.fromObject(object.getForwardMsgReq);
            }
            if (object.sendLikeReq != null) {
                if (typeof object.sendLikeReq !== "object")
                    throw TypeError(".onebot.Frame.sendLikeReq: object expected");
                message.sendLikeReq = $root.onebot.SendLikeReq.fromObject(object.sendLikeReq);
            }
            if (object.setGroupKickReq != null) {
                if (typeof object.setGroupKickReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupKickReq: object expected");
                message.setGroupKickReq = $root.onebot.SetGroupKickReq.fromObject(object.setGroupKickReq);
            }
            if (object.setGroupBanReq != null) {
                if (typeof object.setGroupBanReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupBanReq: object expected");
                message.setGroupBanReq = $root.onebot.SetGroupBanReq.fromObject(object.setGroupBanReq);
            }
            if (object.setGroupAnonymousBanReq != null) {
                if (typeof object.setGroupAnonymousBanReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupAnonymousBanReq: object expected");
                message.setGroupAnonymousBanReq = $root.onebot.SetGroupAnonymousBanReq.fromObject(object.setGroupAnonymousBanReq);
            }
            if (object.setGroupWholeBanReq != null) {
                if (typeof object.setGroupWholeBanReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupWholeBanReq: object expected");
                message.setGroupWholeBanReq = $root.onebot.SetGroupWholeBanReq.fromObject(object.setGroupWholeBanReq);
            }
            if (object.setGroupAdminReq != null) {
                if (typeof object.setGroupAdminReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupAdminReq: object expected");
                message.setGroupAdminReq = $root.onebot.SetGroupAdminReq.fromObject(object.setGroupAdminReq);
            }
            if (object.setGroupAnonymousReq != null) {
                if (typeof object.setGroupAnonymousReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupAnonymousReq: object expected");
                message.setGroupAnonymousReq = $root.onebot.SetGroupAnonymousReq.fromObject(object.setGroupAnonymousReq);
            }
            if (object.setGroupCardReq != null) {
                if (typeof object.setGroupCardReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupCardReq: object expected");
                message.setGroupCardReq = $root.onebot.SetGroupCardReq.fromObject(object.setGroupCardReq);
            }
            if (object.setGroupNameReq != null) {
                if (typeof object.setGroupNameReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupNameReq: object expected");
                message.setGroupNameReq = $root.onebot.SetGroupNameReq.fromObject(object.setGroupNameReq);
            }
            if (object.setGroupLeaveReq != null) {
                if (typeof object.setGroupLeaveReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupLeaveReq: object expected");
                message.setGroupLeaveReq = $root.onebot.SetGroupLeaveReq.fromObject(object.setGroupLeaveReq);
            }
            if (object.setGroupSpecialTitleReq != null) {
                if (typeof object.setGroupSpecialTitleReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupSpecialTitleReq: object expected");
                message.setGroupSpecialTitleReq = $root.onebot.SetGroupSpecialTitleReq.fromObject(object.setGroupSpecialTitleReq);
            }
            if (object.setFriendAddRequestReq != null) {
                if (typeof object.setFriendAddRequestReq !== "object")
                    throw TypeError(".onebot.Frame.setFriendAddRequestReq: object expected");
                message.setFriendAddRequestReq = $root.onebot.SetFriendAddRequestReq.fromObject(object.setFriendAddRequestReq);
            }
            if (object.setGroupAddRequestReq != null) {
                if (typeof object.setGroupAddRequestReq !== "object")
                    throw TypeError(".onebot.Frame.setGroupAddRequestReq: object expected");
                message.setGroupAddRequestReq = $root.onebot.SetGroupAddRequestReq.fromObject(object.setGroupAddRequestReq);
            }
            if (object.getLoginInfoReq != null) {
                if (typeof object.getLoginInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getLoginInfoReq: object expected");
                message.getLoginInfoReq = $root.onebot.GetLoginInfoReq.fromObject(object.getLoginInfoReq);
            }
            if (object.getStrangerInfoReq != null) {
                if (typeof object.getStrangerInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getStrangerInfoReq: object expected");
                message.getStrangerInfoReq = $root.onebot.GetStrangerInfoReq.fromObject(object.getStrangerInfoReq);
            }
            if (object.getFriendListReq != null) {
                if (typeof object.getFriendListReq !== "object")
                    throw TypeError(".onebot.Frame.getFriendListReq: object expected");
                message.getFriendListReq = $root.onebot.GetFriendListReq.fromObject(object.getFriendListReq);
            }
            if (object.getGroupInfoReq != null) {
                if (typeof object.getGroupInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getGroupInfoReq: object expected");
                message.getGroupInfoReq = $root.onebot.GetGroupInfoReq.fromObject(object.getGroupInfoReq);
            }
            if (object.getGroupListReq != null) {
                if (typeof object.getGroupListReq !== "object")
                    throw TypeError(".onebot.Frame.getGroupListReq: object expected");
                message.getGroupListReq = $root.onebot.GetGroupListReq.fromObject(object.getGroupListReq);
            }
            if (object.getGroupMemberInfoReq != null) {
                if (typeof object.getGroupMemberInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getGroupMemberInfoReq: object expected");
                message.getGroupMemberInfoReq = $root.onebot.GetGroupMemberInfoReq.fromObject(object.getGroupMemberInfoReq);
            }
            if (object.getGroupMemberListReq != null) {
                if (typeof object.getGroupMemberListReq !== "object")
                    throw TypeError(".onebot.Frame.getGroupMemberListReq: object expected");
                message.getGroupMemberListReq = $root.onebot.GetGroupMemberListReq.fromObject(object.getGroupMemberListReq);
            }
            if (object.getGroupHonorInfoReq != null) {
                if (typeof object.getGroupHonorInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getGroupHonorInfoReq: object expected");
                message.getGroupHonorInfoReq = $root.onebot.GetGroupHonorInfoReq.fromObject(object.getGroupHonorInfoReq);
            }
            if (object.getCookiesReq != null) {
                if (typeof object.getCookiesReq !== "object")
                    throw TypeError(".onebot.Frame.getCookiesReq: object expected");
                message.getCookiesReq = $root.onebot.GetCookiesReq.fromObject(object.getCookiesReq);
            }
            if (object.getCsrfTokenReq != null) {
                if (typeof object.getCsrfTokenReq !== "object")
                    throw TypeError(".onebot.Frame.getCsrfTokenReq: object expected");
                message.getCsrfTokenReq = $root.onebot.GetCsrfTokenReq.fromObject(object.getCsrfTokenReq);
            }
            if (object.getCredentialsReq != null) {
                if (typeof object.getCredentialsReq !== "object")
                    throw TypeError(".onebot.Frame.getCredentialsReq: object expected");
                message.getCredentialsReq = $root.onebot.GetCredentialsReq.fromObject(object.getCredentialsReq);
            }
            if (object.getRecordReq != null) {
                if (typeof object.getRecordReq !== "object")
                    throw TypeError(".onebot.Frame.getRecordReq: object expected");
                message.getRecordReq = $root.onebot.GetRecordReq.fromObject(object.getRecordReq);
            }
            if (object.getImageReq != null) {
                if (typeof object.getImageReq !== "object")
                    throw TypeError(".onebot.Frame.getImageReq: object expected");
                message.getImageReq = $root.onebot.GetImageReq.fromObject(object.getImageReq);
            }
            if (object.canSendImageReq != null) {
                if (typeof object.canSendImageReq !== "object")
                    throw TypeError(".onebot.Frame.canSendImageReq: object expected");
                message.canSendImageReq = $root.onebot.CanSendImageReq.fromObject(object.canSendImageReq);
            }
            if (object.canSendRecordReq != null) {
                if (typeof object.canSendRecordReq !== "object")
                    throw TypeError(".onebot.Frame.canSendRecordReq: object expected");
                message.canSendRecordReq = $root.onebot.CanSendRecordReq.fromObject(object.canSendRecordReq);
            }
            if (object.getStatusReq != null) {
                if (typeof object.getStatusReq !== "object")
                    throw TypeError(".onebot.Frame.getStatusReq: object expected");
                message.getStatusReq = $root.onebot.GetStatusReq.fromObject(object.getStatusReq);
            }
            if (object.getVersionInfoReq != null) {
                if (typeof object.getVersionInfoReq !== "object")
                    throw TypeError(".onebot.Frame.getVersionInfoReq: object expected");
                message.getVersionInfoReq = $root.onebot.GetVersionInfoReq.fromObject(object.getVersionInfoReq);
            }
            if (object.setRestartReq != null) {
                if (typeof object.setRestartReq !== "object")
                    throw TypeError(".onebot.Frame.setRestartReq: object expected");
                message.setRestartReq = $root.onebot.SetRestartReq.fromObject(object.setRestartReq);
            }
            if (object.cleanCacheReq != null) {
                if (typeof object.cleanCacheReq !== "object")
                    throw TypeError(".onebot.Frame.cleanCacheReq: object expected");
                message.cleanCacheReq = $root.onebot.CleanCacheReq.fromObject(object.cleanCacheReq);
            }
            if (object.sendPrivateMsgResp != null) {
                if (typeof object.sendPrivateMsgResp !== "object")
                    throw TypeError(".onebot.Frame.sendPrivateMsgResp: object expected");
                message.sendPrivateMsgResp = $root.onebot.SendPrivateMsgResp.fromObject(object.sendPrivateMsgResp);
            }
            if (object.sendGroupMsgResp != null) {
                if (typeof object.sendGroupMsgResp !== "object")
                    throw TypeError(".onebot.Frame.sendGroupMsgResp: object expected");
                message.sendGroupMsgResp = $root.onebot.SendGroupMsgResp.fromObject(object.sendGroupMsgResp);
            }
            if (object.sendMsgResp != null) {
                if (typeof object.sendMsgResp !== "object")
                    throw TypeError(".onebot.Frame.sendMsgResp: object expected");
                message.sendMsgResp = $root.onebot.SendMsgResp.fromObject(object.sendMsgResp);
            }
            if (object.deleteMsgResp != null) {
                if (typeof object.deleteMsgResp !== "object")
                    throw TypeError(".onebot.Frame.deleteMsgResp: object expected");
                message.deleteMsgResp = $root.onebot.DeleteMsgResp.fromObject(object.deleteMsgResp);
            }
            if (object.getMsgResp != null) {
                if (typeof object.getMsgResp !== "object")
                    throw TypeError(".onebot.Frame.getMsgResp: object expected");
                message.getMsgResp = $root.onebot.GetMsgResp.fromObject(object.getMsgResp);
            }
            if (object.getForwardMsgResp != null) {
                if (typeof object.getForwardMsgResp !== "object")
                    throw TypeError(".onebot.Frame.getForwardMsgResp: object expected");
                message.getForwardMsgResp = $root.onebot.GetForwardMsgResp.fromObject(object.getForwardMsgResp);
            }
            if (object.sendLikeResp != null) {
                if (typeof object.sendLikeResp !== "object")
                    throw TypeError(".onebot.Frame.sendLikeResp: object expected");
                message.sendLikeResp = $root.onebot.SendLikeResp.fromObject(object.sendLikeResp);
            }
            if (object.setGroupKickResp != null) {
                if (typeof object.setGroupKickResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupKickResp: object expected");
                message.setGroupKickResp = $root.onebot.SetGroupKickResp.fromObject(object.setGroupKickResp);
            }
            if (object.setGroupBanResp != null) {
                if (typeof object.setGroupBanResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupBanResp: object expected");
                message.setGroupBanResp = $root.onebot.SetGroupBanResp.fromObject(object.setGroupBanResp);
            }
            if (object.setGroupAnonymousBanResp != null) {
                if (typeof object.setGroupAnonymousBanResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupAnonymousBanResp: object expected");
                message.setGroupAnonymousBanResp = $root.onebot.SetGroupAnonymousBanResp.fromObject(object.setGroupAnonymousBanResp);
            }
            if (object.setGroupWholeBanResp != null) {
                if (typeof object.setGroupWholeBanResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupWholeBanResp: object expected");
                message.setGroupWholeBanResp = $root.onebot.SetGroupWholeBanResp.fromObject(object.setGroupWholeBanResp);
            }
            if (object.setGroupAdminResp != null) {
                if (typeof object.setGroupAdminResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupAdminResp: object expected");
                message.setGroupAdminResp = $root.onebot.SetGroupAdminResp.fromObject(object.setGroupAdminResp);
            }
            if (object.setGroupAnonymousResp != null) {
                if (typeof object.setGroupAnonymousResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupAnonymousResp: object expected");
                message.setGroupAnonymousResp = $root.onebot.SetGroupAnonymousResp.fromObject(object.setGroupAnonymousResp);
            }
            if (object.setGroupCardResp != null) {
                if (typeof object.setGroupCardResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupCardResp: object expected");
                message.setGroupCardResp = $root.onebot.SetGroupCardResp.fromObject(object.setGroupCardResp);
            }
            if (object.setGroupNameResp != null) {
                if (typeof object.setGroupNameResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupNameResp: object expected");
                message.setGroupNameResp = $root.onebot.SetGroupNameResp.fromObject(object.setGroupNameResp);
            }
            if (object.setGroupLeaveResp != null) {
                if (typeof object.setGroupLeaveResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupLeaveResp: object expected");
                message.setGroupLeaveResp = $root.onebot.SetGroupLeaveResp.fromObject(object.setGroupLeaveResp);
            }
            if (object.setGroupSpecialTitleResp != null) {
                if (typeof object.setGroupSpecialTitleResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupSpecialTitleResp: object expected");
                message.setGroupSpecialTitleResp = $root.onebot.SetGroupSpecialTitleResp.fromObject(object.setGroupSpecialTitleResp);
            }
            if (object.setFriendAddRequestResp != null) {
                if (typeof object.setFriendAddRequestResp !== "object")
                    throw TypeError(".onebot.Frame.setFriendAddRequestResp: object expected");
                message.setFriendAddRequestResp = $root.onebot.SetFriendAddRequestResp.fromObject(object.setFriendAddRequestResp);
            }
            if (object.setGroupAddRequestResp != null) {
                if (typeof object.setGroupAddRequestResp !== "object")
                    throw TypeError(".onebot.Frame.setGroupAddRequestResp: object expected");
                message.setGroupAddRequestResp = $root.onebot.SetGroupAddRequestResp.fromObject(object.setGroupAddRequestResp);
            }
            if (object.getLoginInfoResp != null) {
                if (typeof object.getLoginInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getLoginInfoResp: object expected");
                message.getLoginInfoResp = $root.onebot.GetLoginInfoResp.fromObject(object.getLoginInfoResp);
            }
            if (object.getStrangerInfoResp != null) {
                if (typeof object.getStrangerInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getStrangerInfoResp: object expected");
                message.getStrangerInfoResp = $root.onebot.GetStrangerInfoResp.fromObject(object.getStrangerInfoResp);
            }
            if (object.getFriendListResp != null) {
                if (typeof object.getFriendListResp !== "object")
                    throw TypeError(".onebot.Frame.getFriendListResp: object expected");
                message.getFriendListResp = $root.onebot.GetFriendListResp.fromObject(object.getFriendListResp);
            }
            if (object.getGroupInfoResp != null) {
                if (typeof object.getGroupInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getGroupInfoResp: object expected");
                message.getGroupInfoResp = $root.onebot.GetGroupInfoResp.fromObject(object.getGroupInfoResp);
            }
            if (object.getGroupListResp != null) {
                if (typeof object.getGroupListResp !== "object")
                    throw TypeError(".onebot.Frame.getGroupListResp: object expected");
                message.getGroupListResp = $root.onebot.GetGroupListResp.fromObject(object.getGroupListResp);
            }
            if (object.getGroupMemberInfoResp != null) {
                if (typeof object.getGroupMemberInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getGroupMemberInfoResp: object expected");
                message.getGroupMemberInfoResp = $root.onebot.GetGroupMemberInfoResp.fromObject(object.getGroupMemberInfoResp);
            }
            if (object.getGroupMemberListResp != null) {
                if (typeof object.getGroupMemberListResp !== "object")
                    throw TypeError(".onebot.Frame.getGroupMemberListResp: object expected");
                message.getGroupMemberListResp = $root.onebot.GetGroupMemberListResp.fromObject(object.getGroupMemberListResp);
            }
            if (object.getGroupHonorInfoResp != null) {
                if (typeof object.getGroupHonorInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getGroupHonorInfoResp: object expected");
                message.getGroupHonorInfoResp = $root.onebot.GetGroupHonorInfoResp.fromObject(object.getGroupHonorInfoResp);
            }
            if (object.getCookiesResp != null) {
                if (typeof object.getCookiesResp !== "object")
                    throw TypeError(".onebot.Frame.getCookiesResp: object expected");
                message.getCookiesResp = $root.onebot.GetCookiesResp.fromObject(object.getCookiesResp);
            }
            if (object.getCsrfTokenResp != null) {
                if (typeof object.getCsrfTokenResp !== "object")
                    throw TypeError(".onebot.Frame.getCsrfTokenResp: object expected");
                message.getCsrfTokenResp = $root.onebot.GetCsrfTokenResp.fromObject(object.getCsrfTokenResp);
            }
            if (object.getCredentialsResp != null) {
                if (typeof object.getCredentialsResp !== "object")
                    throw TypeError(".onebot.Frame.getCredentialsResp: object expected");
                message.getCredentialsResp = $root.onebot.GetCredentialsResp.fromObject(object.getCredentialsResp);
            }
            if (object.getRecordResp != null) {
                if (typeof object.getRecordResp !== "object")
                    throw TypeError(".onebot.Frame.getRecordResp: object expected");
                message.getRecordResp = $root.onebot.GetRecordResp.fromObject(object.getRecordResp);
            }
            if (object.getImageResp != null) {
                if (typeof object.getImageResp !== "object")
                    throw TypeError(".onebot.Frame.getImageResp: object expected");
                message.getImageResp = $root.onebot.GetImageResp.fromObject(object.getImageResp);
            }
            if (object.canSendImageResp != null) {
                if (typeof object.canSendImageResp !== "object")
                    throw TypeError(".onebot.Frame.canSendImageResp: object expected");
                message.canSendImageResp = $root.onebot.CanSendImageResp.fromObject(object.canSendImageResp);
            }
            if (object.canSendRecordResp != null) {
                if (typeof object.canSendRecordResp !== "object")
                    throw TypeError(".onebot.Frame.canSendRecordResp: object expected");
                message.canSendRecordResp = $root.onebot.CanSendRecordResp.fromObject(object.canSendRecordResp);
            }
            if (object.getStatusResp != null) {
                if (typeof object.getStatusResp !== "object")
                    throw TypeError(".onebot.Frame.getStatusResp: object expected");
                message.getStatusResp = $root.onebot.GetStatusResp.fromObject(object.getStatusResp);
            }
            if (object.getVersionInfoResp != null) {
                if (typeof object.getVersionInfoResp !== "object")
                    throw TypeError(".onebot.Frame.getVersionInfoResp: object expected");
                message.getVersionInfoResp = $root.onebot.GetVersionInfoResp.fromObject(object.getVersionInfoResp);
            }
            if (object.setRestartResp != null) {
                if (typeof object.setRestartResp !== "object")
                    throw TypeError(".onebot.Frame.setRestartResp: object expected");
                message.setRestartResp = $root.onebot.SetRestartResp.fromObject(object.setRestartResp);
            }
            if (object.cleanCacheResp != null) {
                if (typeof object.cleanCacheResp !== "object")
                    throw TypeError(".onebot.Frame.cleanCacheResp: object expected");
                message.cleanCacheResp = $root.onebot.CleanCacheResp.fromObject(object.cleanCacheResp);
            }
            return message;
        };

        /**
         * Creates a plain object from a Frame message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.Frame
         * @static
         * @param {onebot.Frame} message Frame
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Frame.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.botId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.botId = options.longs === String ? "0" : 0;
                object.frameType = options.enums === String ? "TUNKNOWN" : 0;
                object.echo = "";
                object.ok = false;
            }
            if (message.botId != null && message.hasOwnProperty("botId"))
                if (typeof message.botId === "number")
                    object.botId = options.longs === String ? String(message.botId) : message.botId;
                else
                    object.botId = options.longs === String ? $util.Long.prototype.toString.call(message.botId) : options.longs === Number ? new $util.LongBits(message.botId.low >>> 0, message.botId.high >>> 0).toNumber() : message.botId;
            if (message.frameType != null && message.hasOwnProperty("frameType"))
                object.frameType = options.enums === String ? $root.onebot.Frame.FrameType[message.frameType] : message.frameType;
            if (message.echo != null && message.hasOwnProperty("echo"))
                object.echo = message.echo;
            if (message.ok != null && message.hasOwnProperty("ok"))
                object.ok = message.ok;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            if (message.privateMessageEvent != null && message.hasOwnProperty("privateMessageEvent")) {
                object.privateMessageEvent = $root.onebot.PrivateMessageEvent.toObject(message.privateMessageEvent, options);
                if (options.oneofs)
                    object.data = "privateMessageEvent";
            }
            if (message.groupMessageEvent != null && message.hasOwnProperty("groupMessageEvent")) {
                object.groupMessageEvent = $root.onebot.GroupMessageEvent.toObject(message.groupMessageEvent, options);
                if (options.oneofs)
                    object.data = "groupMessageEvent";
            }
            if (message.groupUploadNoticeEvent != null && message.hasOwnProperty("groupUploadNoticeEvent")) {
                object.groupUploadNoticeEvent = $root.onebot.GroupUploadNoticeEvent.toObject(message.groupUploadNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupUploadNoticeEvent";
            }
            if (message.groupAdminNoticeEvent != null && message.hasOwnProperty("groupAdminNoticeEvent")) {
                object.groupAdminNoticeEvent = $root.onebot.GroupAdminNoticeEvent.toObject(message.groupAdminNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupAdminNoticeEvent";
            }
            if (message.groupDecreaseNoticeEvent != null && message.hasOwnProperty("groupDecreaseNoticeEvent")) {
                object.groupDecreaseNoticeEvent = $root.onebot.GroupDecreaseNoticeEvent.toObject(message.groupDecreaseNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupDecreaseNoticeEvent";
            }
            if (message.groupIncreaseNoticeEvent != null && message.hasOwnProperty("groupIncreaseNoticeEvent")) {
                object.groupIncreaseNoticeEvent = $root.onebot.GroupIncreaseNoticeEvent.toObject(message.groupIncreaseNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupIncreaseNoticeEvent";
            }
            if (message.groupBanNoticeEvent != null && message.hasOwnProperty("groupBanNoticeEvent")) {
                object.groupBanNoticeEvent = $root.onebot.GroupBanNoticeEvent.toObject(message.groupBanNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupBanNoticeEvent";
            }
            if (message.friendAddNoticeEvent != null && message.hasOwnProperty("friendAddNoticeEvent")) {
                object.friendAddNoticeEvent = $root.onebot.FriendAddNoticeEvent.toObject(message.friendAddNoticeEvent, options);
                if (options.oneofs)
                    object.data = "friendAddNoticeEvent";
            }
            if (message.groupRecallNoticeEvent != null && message.hasOwnProperty("groupRecallNoticeEvent")) {
                object.groupRecallNoticeEvent = $root.onebot.GroupRecallNoticeEvent.toObject(message.groupRecallNoticeEvent, options);
                if (options.oneofs)
                    object.data = "groupRecallNoticeEvent";
            }
            if (message.friendRecallNoticeEvent != null && message.hasOwnProperty("friendRecallNoticeEvent")) {
                object.friendRecallNoticeEvent = $root.onebot.FriendRecallNoticeEvent.toObject(message.friendRecallNoticeEvent, options);
                if (options.oneofs)
                    object.data = "friendRecallNoticeEvent";
            }
            if (message.friendRequestEvent != null && message.hasOwnProperty("friendRequestEvent")) {
                object.friendRequestEvent = $root.onebot.FriendRequestEvent.toObject(message.friendRequestEvent, options);
                if (options.oneofs)
                    object.data = "friendRequestEvent";
            }
            if (message.groupRequestEvent != null && message.hasOwnProperty("groupRequestEvent")) {
                object.groupRequestEvent = $root.onebot.GroupRequestEvent.toObject(message.groupRequestEvent, options);
                if (options.oneofs)
                    object.data = "groupRequestEvent";
            }
            if (message.sendPrivateMsgReq != null && message.hasOwnProperty("sendPrivateMsgReq")) {
                object.sendPrivateMsgReq = $root.onebot.SendPrivateMsgReq.toObject(message.sendPrivateMsgReq, options);
                if (options.oneofs)
                    object.data = "sendPrivateMsgReq";
            }
            if (message.sendGroupMsgReq != null && message.hasOwnProperty("sendGroupMsgReq")) {
                object.sendGroupMsgReq = $root.onebot.SendGroupMsgReq.toObject(message.sendGroupMsgReq, options);
                if (options.oneofs)
                    object.data = "sendGroupMsgReq";
            }
            if (message.sendMsgReq != null && message.hasOwnProperty("sendMsgReq")) {
                object.sendMsgReq = $root.onebot.SendMsgReq.toObject(message.sendMsgReq, options);
                if (options.oneofs)
                    object.data = "sendMsgReq";
            }
            if (message.deleteMsgReq != null && message.hasOwnProperty("deleteMsgReq")) {
                object.deleteMsgReq = $root.onebot.DeleteMsgReq.toObject(message.deleteMsgReq, options);
                if (options.oneofs)
                    object.data = "deleteMsgReq";
            }
            if (message.getMsgReq != null && message.hasOwnProperty("getMsgReq")) {
                object.getMsgReq = $root.onebot.GetMsgReq.toObject(message.getMsgReq, options);
                if (options.oneofs)
                    object.data = "getMsgReq";
            }
            if (message.getForwardMsgReq != null && message.hasOwnProperty("getForwardMsgReq")) {
                object.getForwardMsgReq = $root.onebot.GetForwardMsgReq.toObject(message.getForwardMsgReq, options);
                if (options.oneofs)
                    object.data = "getForwardMsgReq";
            }
            if (message.sendLikeReq != null && message.hasOwnProperty("sendLikeReq")) {
                object.sendLikeReq = $root.onebot.SendLikeReq.toObject(message.sendLikeReq, options);
                if (options.oneofs)
                    object.data = "sendLikeReq";
            }
            if (message.setGroupKickReq != null && message.hasOwnProperty("setGroupKickReq")) {
                object.setGroupKickReq = $root.onebot.SetGroupKickReq.toObject(message.setGroupKickReq, options);
                if (options.oneofs)
                    object.data = "setGroupKickReq";
            }
            if (message.setGroupBanReq != null && message.hasOwnProperty("setGroupBanReq")) {
                object.setGroupBanReq = $root.onebot.SetGroupBanReq.toObject(message.setGroupBanReq, options);
                if (options.oneofs)
                    object.data = "setGroupBanReq";
            }
            if (message.setGroupAnonymousBanReq != null && message.hasOwnProperty("setGroupAnonymousBanReq")) {
                object.setGroupAnonymousBanReq = $root.onebot.SetGroupAnonymousBanReq.toObject(message.setGroupAnonymousBanReq, options);
                if (options.oneofs)
                    object.data = "setGroupAnonymousBanReq";
            }
            if (message.setGroupWholeBanReq != null && message.hasOwnProperty("setGroupWholeBanReq")) {
                object.setGroupWholeBanReq = $root.onebot.SetGroupWholeBanReq.toObject(message.setGroupWholeBanReq, options);
                if (options.oneofs)
                    object.data = "setGroupWholeBanReq";
            }
            if (message.setGroupAdminReq != null && message.hasOwnProperty("setGroupAdminReq")) {
                object.setGroupAdminReq = $root.onebot.SetGroupAdminReq.toObject(message.setGroupAdminReq, options);
                if (options.oneofs)
                    object.data = "setGroupAdminReq";
            }
            if (message.setGroupAnonymousReq != null && message.hasOwnProperty("setGroupAnonymousReq")) {
                object.setGroupAnonymousReq = $root.onebot.SetGroupAnonymousReq.toObject(message.setGroupAnonymousReq, options);
                if (options.oneofs)
                    object.data = "setGroupAnonymousReq";
            }
            if (message.setGroupCardReq != null && message.hasOwnProperty("setGroupCardReq")) {
                object.setGroupCardReq = $root.onebot.SetGroupCardReq.toObject(message.setGroupCardReq, options);
                if (options.oneofs)
                    object.data = "setGroupCardReq";
            }
            if (message.setGroupNameReq != null && message.hasOwnProperty("setGroupNameReq")) {
                object.setGroupNameReq = $root.onebot.SetGroupNameReq.toObject(message.setGroupNameReq, options);
                if (options.oneofs)
                    object.data = "setGroupNameReq";
            }
            if (message.setGroupLeaveReq != null && message.hasOwnProperty("setGroupLeaveReq")) {
                object.setGroupLeaveReq = $root.onebot.SetGroupLeaveReq.toObject(message.setGroupLeaveReq, options);
                if (options.oneofs)
                    object.data = "setGroupLeaveReq";
            }
            if (message.setGroupSpecialTitleReq != null && message.hasOwnProperty("setGroupSpecialTitleReq")) {
                object.setGroupSpecialTitleReq = $root.onebot.SetGroupSpecialTitleReq.toObject(message.setGroupSpecialTitleReq, options);
                if (options.oneofs)
                    object.data = "setGroupSpecialTitleReq";
            }
            if (message.setFriendAddRequestReq != null && message.hasOwnProperty("setFriendAddRequestReq")) {
                object.setFriendAddRequestReq = $root.onebot.SetFriendAddRequestReq.toObject(message.setFriendAddRequestReq, options);
                if (options.oneofs)
                    object.data = "setFriendAddRequestReq";
            }
            if (message.setGroupAddRequestReq != null && message.hasOwnProperty("setGroupAddRequestReq")) {
                object.setGroupAddRequestReq = $root.onebot.SetGroupAddRequestReq.toObject(message.setGroupAddRequestReq, options);
                if (options.oneofs)
                    object.data = "setGroupAddRequestReq";
            }
            if (message.getLoginInfoReq != null && message.hasOwnProperty("getLoginInfoReq")) {
                object.getLoginInfoReq = $root.onebot.GetLoginInfoReq.toObject(message.getLoginInfoReq, options);
                if (options.oneofs)
                    object.data = "getLoginInfoReq";
            }
            if (message.getStrangerInfoReq != null && message.hasOwnProperty("getStrangerInfoReq")) {
                object.getStrangerInfoReq = $root.onebot.GetStrangerInfoReq.toObject(message.getStrangerInfoReq, options);
                if (options.oneofs)
                    object.data = "getStrangerInfoReq";
            }
            if (message.getFriendListReq != null && message.hasOwnProperty("getFriendListReq")) {
                object.getFriendListReq = $root.onebot.GetFriendListReq.toObject(message.getFriendListReq, options);
                if (options.oneofs)
                    object.data = "getFriendListReq";
            }
            if (message.getGroupInfoReq != null && message.hasOwnProperty("getGroupInfoReq")) {
                object.getGroupInfoReq = $root.onebot.GetGroupInfoReq.toObject(message.getGroupInfoReq, options);
                if (options.oneofs)
                    object.data = "getGroupInfoReq";
            }
            if (message.getGroupListReq != null && message.hasOwnProperty("getGroupListReq")) {
                object.getGroupListReq = $root.onebot.GetGroupListReq.toObject(message.getGroupListReq, options);
                if (options.oneofs)
                    object.data = "getGroupListReq";
            }
            if (message.getGroupMemberInfoReq != null && message.hasOwnProperty("getGroupMemberInfoReq")) {
                object.getGroupMemberInfoReq = $root.onebot.GetGroupMemberInfoReq.toObject(message.getGroupMemberInfoReq, options);
                if (options.oneofs)
                    object.data = "getGroupMemberInfoReq";
            }
            if (message.getGroupMemberListReq != null && message.hasOwnProperty("getGroupMemberListReq")) {
                object.getGroupMemberListReq = $root.onebot.GetGroupMemberListReq.toObject(message.getGroupMemberListReq, options);
                if (options.oneofs)
                    object.data = "getGroupMemberListReq";
            }
            if (message.getGroupHonorInfoReq != null && message.hasOwnProperty("getGroupHonorInfoReq")) {
                object.getGroupHonorInfoReq = $root.onebot.GetGroupHonorInfoReq.toObject(message.getGroupHonorInfoReq, options);
                if (options.oneofs)
                    object.data = "getGroupHonorInfoReq";
            }
            if (message.getCookiesReq != null && message.hasOwnProperty("getCookiesReq")) {
                object.getCookiesReq = $root.onebot.GetCookiesReq.toObject(message.getCookiesReq, options);
                if (options.oneofs)
                    object.data = "getCookiesReq";
            }
            if (message.getCsrfTokenReq != null && message.hasOwnProperty("getCsrfTokenReq")) {
                object.getCsrfTokenReq = $root.onebot.GetCsrfTokenReq.toObject(message.getCsrfTokenReq, options);
                if (options.oneofs)
                    object.data = "getCsrfTokenReq";
            }
            if (message.getCredentialsReq != null && message.hasOwnProperty("getCredentialsReq")) {
                object.getCredentialsReq = $root.onebot.GetCredentialsReq.toObject(message.getCredentialsReq, options);
                if (options.oneofs)
                    object.data = "getCredentialsReq";
            }
            if (message.getRecordReq != null && message.hasOwnProperty("getRecordReq")) {
                object.getRecordReq = $root.onebot.GetRecordReq.toObject(message.getRecordReq, options);
                if (options.oneofs)
                    object.data = "getRecordReq";
            }
            if (message.getImageReq != null && message.hasOwnProperty("getImageReq")) {
                object.getImageReq = $root.onebot.GetImageReq.toObject(message.getImageReq, options);
                if (options.oneofs)
                    object.data = "getImageReq";
            }
            if (message.canSendImageReq != null && message.hasOwnProperty("canSendImageReq")) {
                object.canSendImageReq = $root.onebot.CanSendImageReq.toObject(message.canSendImageReq, options);
                if (options.oneofs)
                    object.data = "canSendImageReq";
            }
            if (message.canSendRecordReq != null && message.hasOwnProperty("canSendRecordReq")) {
                object.canSendRecordReq = $root.onebot.CanSendRecordReq.toObject(message.canSendRecordReq, options);
                if (options.oneofs)
                    object.data = "canSendRecordReq";
            }
            if (message.getStatusReq != null && message.hasOwnProperty("getStatusReq")) {
                object.getStatusReq = $root.onebot.GetStatusReq.toObject(message.getStatusReq, options);
                if (options.oneofs)
                    object.data = "getStatusReq";
            }
            if (message.getVersionInfoReq != null && message.hasOwnProperty("getVersionInfoReq")) {
                object.getVersionInfoReq = $root.onebot.GetVersionInfoReq.toObject(message.getVersionInfoReq, options);
                if (options.oneofs)
                    object.data = "getVersionInfoReq";
            }
            if (message.setRestartReq != null && message.hasOwnProperty("setRestartReq")) {
                object.setRestartReq = $root.onebot.SetRestartReq.toObject(message.setRestartReq, options);
                if (options.oneofs)
                    object.data = "setRestartReq";
            }
            if (message.cleanCacheReq != null && message.hasOwnProperty("cleanCacheReq")) {
                object.cleanCacheReq = $root.onebot.CleanCacheReq.toObject(message.cleanCacheReq, options);
                if (options.oneofs)
                    object.data = "cleanCacheReq";
            }
            if (message.sendPrivateMsgResp != null && message.hasOwnProperty("sendPrivateMsgResp")) {
                object.sendPrivateMsgResp = $root.onebot.SendPrivateMsgResp.toObject(message.sendPrivateMsgResp, options);
                if (options.oneofs)
                    object.data = "sendPrivateMsgResp";
            }
            if (message.sendGroupMsgResp != null && message.hasOwnProperty("sendGroupMsgResp")) {
                object.sendGroupMsgResp = $root.onebot.SendGroupMsgResp.toObject(message.sendGroupMsgResp, options);
                if (options.oneofs)
                    object.data = "sendGroupMsgResp";
            }
            if (message.sendMsgResp != null && message.hasOwnProperty("sendMsgResp")) {
                object.sendMsgResp = $root.onebot.SendMsgResp.toObject(message.sendMsgResp, options);
                if (options.oneofs)
                    object.data = "sendMsgResp";
            }
            if (message.deleteMsgResp != null && message.hasOwnProperty("deleteMsgResp")) {
                object.deleteMsgResp = $root.onebot.DeleteMsgResp.toObject(message.deleteMsgResp, options);
                if (options.oneofs)
                    object.data = "deleteMsgResp";
            }
            if (message.getMsgResp != null && message.hasOwnProperty("getMsgResp")) {
                object.getMsgResp = $root.onebot.GetMsgResp.toObject(message.getMsgResp, options);
                if (options.oneofs)
                    object.data = "getMsgResp";
            }
            if (message.getForwardMsgResp != null && message.hasOwnProperty("getForwardMsgResp")) {
                object.getForwardMsgResp = $root.onebot.GetForwardMsgResp.toObject(message.getForwardMsgResp, options);
                if (options.oneofs)
                    object.data = "getForwardMsgResp";
            }
            if (message.sendLikeResp != null && message.hasOwnProperty("sendLikeResp")) {
                object.sendLikeResp = $root.onebot.SendLikeResp.toObject(message.sendLikeResp, options);
                if (options.oneofs)
                    object.data = "sendLikeResp";
            }
            if (message.setGroupKickResp != null && message.hasOwnProperty("setGroupKickResp")) {
                object.setGroupKickResp = $root.onebot.SetGroupKickResp.toObject(message.setGroupKickResp, options);
                if (options.oneofs)
                    object.data = "setGroupKickResp";
            }
            if (message.setGroupBanResp != null && message.hasOwnProperty("setGroupBanResp")) {
                object.setGroupBanResp = $root.onebot.SetGroupBanResp.toObject(message.setGroupBanResp, options);
                if (options.oneofs)
                    object.data = "setGroupBanResp";
            }
            if (message.setGroupAnonymousBanResp != null && message.hasOwnProperty("setGroupAnonymousBanResp")) {
                object.setGroupAnonymousBanResp = $root.onebot.SetGroupAnonymousBanResp.toObject(message.setGroupAnonymousBanResp, options);
                if (options.oneofs)
                    object.data = "setGroupAnonymousBanResp";
            }
            if (message.setGroupWholeBanResp != null && message.hasOwnProperty("setGroupWholeBanResp")) {
                object.setGroupWholeBanResp = $root.onebot.SetGroupWholeBanResp.toObject(message.setGroupWholeBanResp, options);
                if (options.oneofs)
                    object.data = "setGroupWholeBanResp";
            }
            if (message.setGroupAdminResp != null && message.hasOwnProperty("setGroupAdminResp")) {
                object.setGroupAdminResp = $root.onebot.SetGroupAdminResp.toObject(message.setGroupAdminResp, options);
                if (options.oneofs)
                    object.data = "setGroupAdminResp";
            }
            if (message.setGroupAnonymousResp != null && message.hasOwnProperty("setGroupAnonymousResp")) {
                object.setGroupAnonymousResp = $root.onebot.SetGroupAnonymousResp.toObject(message.setGroupAnonymousResp, options);
                if (options.oneofs)
                    object.data = "setGroupAnonymousResp";
            }
            if (message.setGroupCardResp != null && message.hasOwnProperty("setGroupCardResp")) {
                object.setGroupCardResp = $root.onebot.SetGroupCardResp.toObject(message.setGroupCardResp, options);
                if (options.oneofs)
                    object.data = "setGroupCardResp";
            }
            if (message.setGroupNameResp != null && message.hasOwnProperty("setGroupNameResp")) {
                object.setGroupNameResp = $root.onebot.SetGroupNameResp.toObject(message.setGroupNameResp, options);
                if (options.oneofs)
                    object.data = "setGroupNameResp";
            }
            if (message.setGroupLeaveResp != null && message.hasOwnProperty("setGroupLeaveResp")) {
                object.setGroupLeaveResp = $root.onebot.SetGroupLeaveResp.toObject(message.setGroupLeaveResp, options);
                if (options.oneofs)
                    object.data = "setGroupLeaveResp";
            }
            if (message.setGroupSpecialTitleResp != null && message.hasOwnProperty("setGroupSpecialTitleResp")) {
                object.setGroupSpecialTitleResp = $root.onebot.SetGroupSpecialTitleResp.toObject(message.setGroupSpecialTitleResp, options);
                if (options.oneofs)
                    object.data = "setGroupSpecialTitleResp";
            }
            if (message.setFriendAddRequestResp != null && message.hasOwnProperty("setFriendAddRequestResp")) {
                object.setFriendAddRequestResp = $root.onebot.SetFriendAddRequestResp.toObject(message.setFriendAddRequestResp, options);
                if (options.oneofs)
                    object.data = "setFriendAddRequestResp";
            }
            if (message.setGroupAddRequestResp != null && message.hasOwnProperty("setGroupAddRequestResp")) {
                object.setGroupAddRequestResp = $root.onebot.SetGroupAddRequestResp.toObject(message.setGroupAddRequestResp, options);
                if (options.oneofs)
                    object.data = "setGroupAddRequestResp";
            }
            if (message.getLoginInfoResp != null && message.hasOwnProperty("getLoginInfoResp")) {
                object.getLoginInfoResp = $root.onebot.GetLoginInfoResp.toObject(message.getLoginInfoResp, options);
                if (options.oneofs)
                    object.data = "getLoginInfoResp";
            }
            if (message.getStrangerInfoResp != null && message.hasOwnProperty("getStrangerInfoResp")) {
                object.getStrangerInfoResp = $root.onebot.GetStrangerInfoResp.toObject(message.getStrangerInfoResp, options);
                if (options.oneofs)
                    object.data = "getStrangerInfoResp";
            }
            if (message.getFriendListResp != null && message.hasOwnProperty("getFriendListResp")) {
                object.getFriendListResp = $root.onebot.GetFriendListResp.toObject(message.getFriendListResp, options);
                if (options.oneofs)
                    object.data = "getFriendListResp";
            }
            if (message.getGroupInfoResp != null && message.hasOwnProperty("getGroupInfoResp")) {
                object.getGroupInfoResp = $root.onebot.GetGroupInfoResp.toObject(message.getGroupInfoResp, options);
                if (options.oneofs)
                    object.data = "getGroupInfoResp";
            }
            if (message.getGroupListResp != null && message.hasOwnProperty("getGroupListResp")) {
                object.getGroupListResp = $root.onebot.GetGroupListResp.toObject(message.getGroupListResp, options);
                if (options.oneofs)
                    object.data = "getGroupListResp";
            }
            if (message.getGroupMemberInfoResp != null && message.hasOwnProperty("getGroupMemberInfoResp")) {
                object.getGroupMemberInfoResp = $root.onebot.GetGroupMemberInfoResp.toObject(message.getGroupMemberInfoResp, options);
                if (options.oneofs)
                    object.data = "getGroupMemberInfoResp";
            }
            if (message.getGroupMemberListResp != null && message.hasOwnProperty("getGroupMemberListResp")) {
                object.getGroupMemberListResp = $root.onebot.GetGroupMemberListResp.toObject(message.getGroupMemberListResp, options);
                if (options.oneofs)
                    object.data = "getGroupMemberListResp";
            }
            if (message.getGroupHonorInfoResp != null && message.hasOwnProperty("getGroupHonorInfoResp")) {
                object.getGroupHonorInfoResp = $root.onebot.GetGroupHonorInfoResp.toObject(message.getGroupHonorInfoResp, options);
                if (options.oneofs)
                    object.data = "getGroupHonorInfoResp";
            }
            if (message.getCookiesResp != null && message.hasOwnProperty("getCookiesResp")) {
                object.getCookiesResp = $root.onebot.GetCookiesResp.toObject(message.getCookiesResp, options);
                if (options.oneofs)
                    object.data = "getCookiesResp";
            }
            if (message.getCsrfTokenResp != null && message.hasOwnProperty("getCsrfTokenResp")) {
                object.getCsrfTokenResp = $root.onebot.GetCsrfTokenResp.toObject(message.getCsrfTokenResp, options);
                if (options.oneofs)
                    object.data = "getCsrfTokenResp";
            }
            if (message.getCredentialsResp != null && message.hasOwnProperty("getCredentialsResp")) {
                object.getCredentialsResp = $root.onebot.GetCredentialsResp.toObject(message.getCredentialsResp, options);
                if (options.oneofs)
                    object.data = "getCredentialsResp";
            }
            if (message.getRecordResp != null && message.hasOwnProperty("getRecordResp")) {
                object.getRecordResp = $root.onebot.GetRecordResp.toObject(message.getRecordResp, options);
                if (options.oneofs)
                    object.data = "getRecordResp";
            }
            if (message.getImageResp != null && message.hasOwnProperty("getImageResp")) {
                object.getImageResp = $root.onebot.GetImageResp.toObject(message.getImageResp, options);
                if (options.oneofs)
                    object.data = "getImageResp";
            }
            if (message.canSendImageResp != null && message.hasOwnProperty("canSendImageResp")) {
                object.canSendImageResp = $root.onebot.CanSendImageResp.toObject(message.canSendImageResp, options);
                if (options.oneofs)
                    object.data = "canSendImageResp";
            }
            if (message.canSendRecordResp != null && message.hasOwnProperty("canSendRecordResp")) {
                object.canSendRecordResp = $root.onebot.CanSendRecordResp.toObject(message.canSendRecordResp, options);
                if (options.oneofs)
                    object.data = "canSendRecordResp";
            }
            if (message.getStatusResp != null && message.hasOwnProperty("getStatusResp")) {
                object.getStatusResp = $root.onebot.GetStatusResp.toObject(message.getStatusResp, options);
                if (options.oneofs)
                    object.data = "getStatusResp";
            }
            if (message.getVersionInfoResp != null && message.hasOwnProperty("getVersionInfoResp")) {
                object.getVersionInfoResp = $root.onebot.GetVersionInfoResp.toObject(message.getVersionInfoResp, options);
                if (options.oneofs)
                    object.data = "getVersionInfoResp";
            }
            if (message.setRestartResp != null && message.hasOwnProperty("setRestartResp")) {
                object.setRestartResp = $root.onebot.SetRestartResp.toObject(message.setRestartResp, options);
                if (options.oneofs)
                    object.data = "setRestartResp";
            }
            if (message.cleanCacheResp != null && message.hasOwnProperty("cleanCacheResp")) {
                object.cleanCacheResp = $root.onebot.CleanCacheResp.toObject(message.cleanCacheResp, options);
                if (options.oneofs)
                    object.data = "cleanCacheResp";
            }
            return object;
        };

        /**
         * Converts this Frame to JSON.
         * @function toJSON
         * @memberof onebot.Frame
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Frame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * FrameType enum.
         * @name onebot.Frame.FrameType
         * @enum {number}
         * @property {number} TUNKNOWN=0 TUNKNOWN value
         * @property {number} TPrivateMessageEvent=101 TPrivateMessageEvent value
         * @property {number} TGroupMessageEvent=102 TGroupMessageEvent value
         * @property {number} TGroupUploadNoticeEvent=103 TGroupUploadNoticeEvent value
         * @property {number} TGroupAdminNoticeEvent=104 TGroupAdminNoticeEvent value
         * @property {number} TGroupDecreaseNoticeEvent=105 TGroupDecreaseNoticeEvent value
         * @property {number} TGroupIncreaseNoticeEvent=106 TGroupIncreaseNoticeEvent value
         * @property {number} TGroupBanNoticeEvent=107 TGroupBanNoticeEvent value
         * @property {number} TFriendAddNoticeEvent=108 TFriendAddNoticeEvent value
         * @property {number} TGroupRecallNoticeEvent=109 TGroupRecallNoticeEvent value
         * @property {number} TFriendRecallNoticeEvent=110 TFriendRecallNoticeEvent value
         * @property {number} TFriendRequestEvent=111 TFriendRequestEvent value
         * @property {number} TGroupRequestEvent=112 TGroupRequestEvent value
         * @property {number} TSendPrivateMsgReq=201 TSendPrivateMsgReq value
         * @property {number} TSendGroupMsgReq=202 TSendGroupMsgReq value
         * @property {number} TSendMsgReq=203 TSendMsgReq value
         * @property {number} TDeleteMsgReq=204 TDeleteMsgReq value
         * @property {number} TGetMsgReq=205 TGetMsgReq value
         * @property {number} TGetForwardMsgReq=206 TGetForwardMsgReq value
         * @property {number} TSendLikeReq=207 TSendLikeReq value
         * @property {number} TSetGroupKickReq=208 TSetGroupKickReq value
         * @property {number} TSetGroupBanReq=209 TSetGroupBanReq value
         * @property {number} TSetGroupAnonymousReq=210 TSetGroupAnonymousReq value
         * @property {number} TSetGroupWholeBanReq=211 TSetGroupWholeBanReq value
         * @property {number} TSetGroupAdminReq=212 TSetGroupAdminReq value
         * @property {number} TSetGroupAnonymousBanReq=213 TSetGroupAnonymousBanReq value
         * @property {number} TSetGroupCardReq=214 TSetGroupCardReq value
         * @property {number} TSetGroupNameReq=215 TSetGroupNameReq value
         * @property {number} TSetGroupLeaveReq=216 TSetGroupLeaveReq value
         * @property {number} TSetGroupSpecialTitleReq=217 TSetGroupSpecialTitleReq value
         * @property {number} TSetFriendAddRequestReq=218 TSetFriendAddRequestReq value
         * @property {number} TSetGroupAddRequestReq=219 TSetGroupAddRequestReq value
         * @property {number} TGetLoginInfoReq=220 TGetLoginInfoReq value
         * @property {number} TGetStrangerInfoReq=221 TGetStrangerInfoReq value
         * @property {number} TGetFriendListReq=222 TGetFriendListReq value
         * @property {number} TGetGroupInfoReq=223 TGetGroupInfoReq value
         * @property {number} TGetGroupListReq=224 TGetGroupListReq value
         * @property {number} TGetGroupMemberInfoReq=225 TGetGroupMemberInfoReq value
         * @property {number} TGetGroupMemberListReq=226 TGetGroupMemberListReq value
         * @property {number} TGetGroupHonorInfoReq=227 TGetGroupHonorInfoReq value
         * @property {number} TGetCookiesReq=228 TGetCookiesReq value
         * @property {number} TGetCsrfTokenReq=229 TGetCsrfTokenReq value
         * @property {number} TGetCredentialsReq=230 TGetCredentialsReq value
         * @property {number} TGetRecordReq=231 TGetRecordReq value
         * @property {number} TGetImageReq=232 TGetImageReq value
         * @property {number} TCanSendImageReq=233 TCanSendImageReq value
         * @property {number} TCanSendRecordReq=234 TCanSendRecordReq value
         * @property {number} TGetStatusReq=235 TGetStatusReq value
         * @property {number} TGetVersionInfoReq=236 TGetVersionInfoReq value
         * @property {number} TSetRestartReq=237 TSetRestartReq value
         * @property {number} TCleanCacheReq=238 TCleanCacheReq value
         * @property {number} TSendPrivateMsgResp=301 TSendPrivateMsgResp value
         * @property {number} TSendGroupMsgResp=302 TSendGroupMsgResp value
         * @property {number} TSendMsgResp=303 TSendMsgResp value
         * @property {number} TDeleteMsgResp=304 TDeleteMsgResp value
         * @property {number} TGetMsgResp=305 TGetMsgResp value
         * @property {number} TGetForwardMsgResp=306 TGetForwardMsgResp value
         * @property {number} TSendLikeResp=307 TSendLikeResp value
         * @property {number} TSetGroupKickResp=308 TSetGroupKickResp value
         * @property {number} TSetGroupBanResp=309 TSetGroupBanResp value
         * @property {number} TSetGroupAnonymousResp=310 TSetGroupAnonymousResp value
         * @property {number} TSetGroupWholeBanResp=311 TSetGroupWholeBanResp value
         * @property {number} TSetGroupAdminResp=312 TSetGroupAdminResp value
         * @property {number} TSetGroupAnonymousBanResp=313 TSetGroupAnonymousBanResp value
         * @property {number} TSetGroupCardResp=314 TSetGroupCardResp value
         * @property {number} TSetGroupNameResp=315 TSetGroupNameResp value
         * @property {number} TSetGroupLeaveResp=316 TSetGroupLeaveResp value
         * @property {number} TSetGroupSpecialTitleResp=317 TSetGroupSpecialTitleResp value
         * @property {number} TSetFriendAddRequestResp=318 TSetFriendAddRequestResp value
         * @property {number} TSetGroupAddRequestResp=319 TSetGroupAddRequestResp value
         * @property {number} TGetLoginInfoResp=320 TGetLoginInfoResp value
         * @property {number} TGetStrangerInfoResp=321 TGetStrangerInfoResp value
         * @property {number} TGetFriendListResp=322 TGetFriendListResp value
         * @property {number} TGetGroupInfoResp=323 TGetGroupInfoResp value
         * @property {number} TGetGroupListResp=324 TGetGroupListResp value
         * @property {number} TGetGroupMemberInfoResp=325 TGetGroupMemberInfoResp value
         * @property {number} TGetGroupMemberListResp=326 TGetGroupMemberListResp value
         * @property {number} TGetGroupHonorInfoResp=327 TGetGroupHonorInfoResp value
         * @property {number} TGetCookiesResp=328 TGetCookiesResp value
         * @property {number} TGetCsrfTokenResp=329 TGetCsrfTokenResp value
         * @property {number} TGetCredentialsResp=330 TGetCredentialsResp value
         * @property {number} TGetRecordResp=331 TGetRecordResp value
         * @property {number} TGetImageResp=332 TGetImageResp value
         * @property {number} TCanSendImageResp=333 TCanSendImageResp value
         * @property {number} TCanSendRecordResp=334 TCanSendRecordResp value
         * @property {number} TGetStatusResp=335 TGetStatusResp value
         * @property {number} TGetVersionInfoResp=336 TGetVersionInfoResp value
         * @property {number} TSetRestartResp=337 TSetRestartResp value
         * @property {number} TCleanCacheResp=338 TCleanCacheResp value
         */
        Frame.FrameType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "TUNKNOWN"] = 0;
            values[valuesById[101] = "TPrivateMessageEvent"] = 101;
            values[valuesById[102] = "TGroupMessageEvent"] = 102;
            values[valuesById[103] = "TGroupUploadNoticeEvent"] = 103;
            values[valuesById[104] = "TGroupAdminNoticeEvent"] = 104;
            values[valuesById[105] = "TGroupDecreaseNoticeEvent"] = 105;
            values[valuesById[106] = "TGroupIncreaseNoticeEvent"] = 106;
            values[valuesById[107] = "TGroupBanNoticeEvent"] = 107;
            values[valuesById[108] = "TFriendAddNoticeEvent"] = 108;
            values[valuesById[109] = "TGroupRecallNoticeEvent"] = 109;
            values[valuesById[110] = "TFriendRecallNoticeEvent"] = 110;
            values[valuesById[111] = "TFriendRequestEvent"] = 111;
            values[valuesById[112] = "TGroupRequestEvent"] = 112;
            values[valuesById[201] = "TSendPrivateMsgReq"] = 201;
            values[valuesById[202] = "TSendGroupMsgReq"] = 202;
            values[valuesById[203] = "TSendMsgReq"] = 203;
            values[valuesById[204] = "TDeleteMsgReq"] = 204;
            values[valuesById[205] = "TGetMsgReq"] = 205;
            values[valuesById[206] = "TGetForwardMsgReq"] = 206;
            values[valuesById[207] = "TSendLikeReq"] = 207;
            values[valuesById[208] = "TSetGroupKickReq"] = 208;
            values[valuesById[209] = "TSetGroupBanReq"] = 209;
            values[valuesById[210] = "TSetGroupAnonymousReq"] = 210;
            values[valuesById[211] = "TSetGroupWholeBanReq"] = 211;
            values[valuesById[212] = "TSetGroupAdminReq"] = 212;
            values[valuesById[213] = "TSetGroupAnonymousBanReq"] = 213;
            values[valuesById[214] = "TSetGroupCardReq"] = 214;
            values[valuesById[215] = "TSetGroupNameReq"] = 215;
            values[valuesById[216] = "TSetGroupLeaveReq"] = 216;
            values[valuesById[217] = "TSetGroupSpecialTitleReq"] = 217;
            values[valuesById[218] = "TSetFriendAddRequestReq"] = 218;
            values[valuesById[219] = "TSetGroupAddRequestReq"] = 219;
            values[valuesById[220] = "TGetLoginInfoReq"] = 220;
            values[valuesById[221] = "TGetStrangerInfoReq"] = 221;
            values[valuesById[222] = "TGetFriendListReq"] = 222;
            values[valuesById[223] = "TGetGroupInfoReq"] = 223;
            values[valuesById[224] = "TGetGroupListReq"] = 224;
            values[valuesById[225] = "TGetGroupMemberInfoReq"] = 225;
            values[valuesById[226] = "TGetGroupMemberListReq"] = 226;
            values[valuesById[227] = "TGetGroupHonorInfoReq"] = 227;
            values[valuesById[228] = "TGetCookiesReq"] = 228;
            values[valuesById[229] = "TGetCsrfTokenReq"] = 229;
            values[valuesById[230] = "TGetCredentialsReq"] = 230;
            values[valuesById[231] = "TGetRecordReq"] = 231;
            values[valuesById[232] = "TGetImageReq"] = 232;
            values[valuesById[233] = "TCanSendImageReq"] = 233;
            values[valuesById[234] = "TCanSendRecordReq"] = 234;
            values[valuesById[235] = "TGetStatusReq"] = 235;
            values[valuesById[236] = "TGetVersionInfoReq"] = 236;
            values[valuesById[237] = "TSetRestartReq"] = 237;
            values[valuesById[238] = "TCleanCacheReq"] = 238;
            values[valuesById[301] = "TSendPrivateMsgResp"] = 301;
            values[valuesById[302] = "TSendGroupMsgResp"] = 302;
            values[valuesById[303] = "TSendMsgResp"] = 303;
            values[valuesById[304] = "TDeleteMsgResp"] = 304;
            values[valuesById[305] = "TGetMsgResp"] = 305;
            values[valuesById[306] = "TGetForwardMsgResp"] = 306;
            values[valuesById[307] = "TSendLikeResp"] = 307;
            values[valuesById[308] = "TSetGroupKickResp"] = 308;
            values[valuesById[309] = "TSetGroupBanResp"] = 309;
            values[valuesById[310] = "TSetGroupAnonymousResp"] = 310;
            values[valuesById[311] = "TSetGroupWholeBanResp"] = 311;
            values[valuesById[312] = "TSetGroupAdminResp"] = 312;
            values[valuesById[313] = "TSetGroupAnonymousBanResp"] = 313;
            values[valuesById[314] = "TSetGroupCardResp"] = 314;
            values[valuesById[315] = "TSetGroupNameResp"] = 315;
            values[valuesById[316] = "TSetGroupLeaveResp"] = 316;
            values[valuesById[317] = "TSetGroupSpecialTitleResp"] = 317;
            values[valuesById[318] = "TSetFriendAddRequestResp"] = 318;
            values[valuesById[319] = "TSetGroupAddRequestResp"] = 319;
            values[valuesById[320] = "TGetLoginInfoResp"] = 320;
            values[valuesById[321] = "TGetStrangerInfoResp"] = 321;
            values[valuesById[322] = "TGetFriendListResp"] = 322;
            values[valuesById[323] = "TGetGroupInfoResp"] = 323;
            values[valuesById[324] = "TGetGroupListResp"] = 324;
            values[valuesById[325] = "TGetGroupMemberInfoResp"] = 325;
            values[valuesById[326] = "TGetGroupMemberListResp"] = 326;
            values[valuesById[327] = "TGetGroupHonorInfoResp"] = 327;
            values[valuesById[328] = "TGetCookiesResp"] = 328;
            values[valuesById[329] = "TGetCsrfTokenResp"] = 329;
            values[valuesById[330] = "TGetCredentialsResp"] = 330;
            values[valuesById[331] = "TGetRecordResp"] = 331;
            values[valuesById[332] = "TGetImageResp"] = 332;
            values[valuesById[333] = "TCanSendImageResp"] = 333;
            values[valuesById[334] = "TCanSendRecordResp"] = 334;
            values[valuesById[335] = "TGetStatusResp"] = 335;
            values[valuesById[336] = "TGetVersionInfoResp"] = 336;
            values[valuesById[337] = "TSetRestartResp"] = 337;
            values[valuesById[338] = "TCleanCacheResp"] = 338;
            return values;
        })();

        return Frame;
    })();

    onebot.SendPrivateMsgReq = (function() {

        /**
         * Properties of a SendPrivateMsgReq.
         * @memberof onebot
         * @interface ISendPrivateMsgReq
         * @property {Long|null} [userId] SendPrivateMsgReq userId
         * @property {Array.<onebot.IMessage>|null} [message] SendPrivateMsgReq message
         * @property {boolean|null} [autoEscape] SendPrivateMsgReq autoEscape
         */

        /**
         * Constructs a new SendPrivateMsgReq.
         * @memberof onebot
         * @classdesc Represents a SendPrivateMsgReq.
         * @implements ISendPrivateMsgReq
         * @constructor
         * @param {onebot.ISendPrivateMsgReq=} [properties] Properties to set
         */
        function SendPrivateMsgReq(properties) {
            this.message = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendPrivateMsgReq userId.
         * @member {Long} userId
         * @memberof onebot.SendPrivateMsgReq
         * @instance
         */
        SendPrivateMsgReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SendPrivateMsgReq message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.SendPrivateMsgReq
         * @instance
         */
        SendPrivateMsgReq.prototype.message = $util.emptyArray;

        /**
         * SendPrivateMsgReq autoEscape.
         * @member {boolean} autoEscape
         * @memberof onebot.SendPrivateMsgReq
         * @instance
         */
        SendPrivateMsgReq.prototype.autoEscape = false;

        /**
         * Creates a new SendPrivateMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {onebot.ISendPrivateMsgReq=} [properties] Properties to set
         * @returns {onebot.SendPrivateMsgReq} SendPrivateMsgReq instance
         */
        SendPrivateMsgReq.create = function create(properties) {
            return new SendPrivateMsgReq(properties);
        };

        /**
         * Encodes the specified SendPrivateMsgReq message. Does not implicitly {@link onebot.SendPrivateMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {onebot.ISendPrivateMsgReq} message SendPrivateMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendPrivateMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.autoEscape != null && Object.hasOwnProperty.call(message, "autoEscape"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.autoEscape);
            return writer;
        };

        /**
         * Encodes the specified SendPrivateMsgReq message, length delimited. Does not implicitly {@link onebot.SendPrivateMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {onebot.ISendPrivateMsgReq} message SendPrivateMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendPrivateMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendPrivateMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendPrivateMsgReq} SendPrivateMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendPrivateMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendPrivateMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int64();
                    break;
                case 2:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.autoEscape = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendPrivateMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendPrivateMsgReq} SendPrivateMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendPrivateMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendPrivateMsgReq message.
         * @function verify
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendPrivateMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                if (typeof message.autoEscape !== "boolean")
                    return "autoEscape: boolean expected";
            return null;
        };

        /**
         * Creates a SendPrivateMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendPrivateMsgReq} SendPrivateMsgReq
         */
        SendPrivateMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendPrivateMsgReq)
                return object;
            var message = new $root.onebot.SendPrivateMsgReq();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.SendPrivateMsgReq.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.SendPrivateMsgReq.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.autoEscape != null)
                message.autoEscape = Boolean(object.autoEscape);
            return message;
        };

        /**
         * Creates a plain object from a SendPrivateMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendPrivateMsgReq
         * @static
         * @param {onebot.SendPrivateMsgReq} message SendPrivateMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendPrivateMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.autoEscape = false;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                object.autoEscape = message.autoEscape;
            return object;
        };

        /**
         * Converts this SendPrivateMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.SendPrivateMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendPrivateMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendPrivateMsgReq;
    })();

    onebot.SendPrivateMsgResp = (function() {

        /**
         * Properties of a SendPrivateMsgResp.
         * @memberof onebot
         * @interface ISendPrivateMsgResp
         * @property {number|null} [messageId] SendPrivateMsgResp messageId
         */

        /**
         * Constructs a new SendPrivateMsgResp.
         * @memberof onebot
         * @classdesc Represents a SendPrivateMsgResp.
         * @implements ISendPrivateMsgResp
         * @constructor
         * @param {onebot.ISendPrivateMsgResp=} [properties] Properties to set
         */
        function SendPrivateMsgResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendPrivateMsgResp messageId.
         * @member {number} messageId
         * @memberof onebot.SendPrivateMsgResp
         * @instance
         */
        SendPrivateMsgResp.prototype.messageId = 0;

        /**
         * Creates a new SendPrivateMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {onebot.ISendPrivateMsgResp=} [properties] Properties to set
         * @returns {onebot.SendPrivateMsgResp} SendPrivateMsgResp instance
         */
        SendPrivateMsgResp.create = function create(properties) {
            return new SendPrivateMsgResp(properties);
        };

        /**
         * Encodes the specified SendPrivateMsgResp message. Does not implicitly {@link onebot.SendPrivateMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {onebot.ISendPrivateMsgResp} message SendPrivateMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendPrivateMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageId);
            return writer;
        };

        /**
         * Encodes the specified SendPrivateMsgResp message, length delimited. Does not implicitly {@link onebot.SendPrivateMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {onebot.ISendPrivateMsgResp} message SendPrivateMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendPrivateMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendPrivateMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendPrivateMsgResp} SendPrivateMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendPrivateMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendPrivateMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendPrivateMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendPrivateMsgResp} SendPrivateMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendPrivateMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendPrivateMsgResp message.
         * @function verify
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendPrivateMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            return null;
        };

        /**
         * Creates a SendPrivateMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendPrivateMsgResp} SendPrivateMsgResp
         */
        SendPrivateMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendPrivateMsgResp)
                return object;
            var message = new $root.onebot.SendPrivateMsgResp();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendPrivateMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendPrivateMsgResp
         * @static
         * @param {onebot.SendPrivateMsgResp} message SendPrivateMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendPrivateMsgResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageId = 0;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            return object;
        };

        /**
         * Converts this SendPrivateMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.SendPrivateMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendPrivateMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendPrivateMsgResp;
    })();

    onebot.SendGroupMsgReq = (function() {

        /**
         * Properties of a SendGroupMsgReq.
         * @memberof onebot
         * @interface ISendGroupMsgReq
         * @property {Long|null} [groupId] SendGroupMsgReq groupId
         * @property {Array.<onebot.IMessage>|null} [message] SendGroupMsgReq message
         * @property {boolean|null} [autoEscape] SendGroupMsgReq autoEscape
         */

        /**
         * Constructs a new SendGroupMsgReq.
         * @memberof onebot
         * @classdesc Represents a SendGroupMsgReq.
         * @implements ISendGroupMsgReq
         * @constructor
         * @param {onebot.ISendGroupMsgReq=} [properties] Properties to set
         */
        function SendGroupMsgReq(properties) {
            this.message = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendGroupMsgReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SendGroupMsgReq
         * @instance
         */
        SendGroupMsgReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SendGroupMsgReq message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.SendGroupMsgReq
         * @instance
         */
        SendGroupMsgReq.prototype.message = $util.emptyArray;

        /**
         * SendGroupMsgReq autoEscape.
         * @member {boolean} autoEscape
         * @memberof onebot.SendGroupMsgReq
         * @instance
         */
        SendGroupMsgReq.prototype.autoEscape = false;

        /**
         * Creates a new SendGroupMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {onebot.ISendGroupMsgReq=} [properties] Properties to set
         * @returns {onebot.SendGroupMsgReq} SendGroupMsgReq instance
         */
        SendGroupMsgReq.create = function create(properties) {
            return new SendGroupMsgReq(properties);
        };

        /**
         * Encodes the specified SendGroupMsgReq message. Does not implicitly {@link onebot.SendGroupMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {onebot.ISendGroupMsgReq} message SendGroupMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendGroupMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.autoEscape != null && Object.hasOwnProperty.call(message, "autoEscape"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.autoEscape);
            return writer;
        };

        /**
         * Encodes the specified SendGroupMsgReq message, length delimited. Does not implicitly {@link onebot.SendGroupMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {onebot.ISendGroupMsgReq} message SendGroupMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendGroupMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendGroupMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendGroupMsgReq} SendGroupMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendGroupMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendGroupMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.autoEscape = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendGroupMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendGroupMsgReq} SendGroupMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendGroupMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendGroupMsgReq message.
         * @function verify
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendGroupMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                if (typeof message.autoEscape !== "boolean")
                    return "autoEscape: boolean expected";
            return null;
        };

        /**
         * Creates a SendGroupMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendGroupMsgReq} SendGroupMsgReq
         */
        SendGroupMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendGroupMsgReq)
                return object;
            var message = new $root.onebot.SendGroupMsgReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.SendGroupMsgReq.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.SendGroupMsgReq.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.autoEscape != null)
                message.autoEscape = Boolean(object.autoEscape);
            return message;
        };

        /**
         * Creates a plain object from a SendGroupMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendGroupMsgReq
         * @static
         * @param {onebot.SendGroupMsgReq} message SendGroupMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendGroupMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.autoEscape = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                object.autoEscape = message.autoEscape;
            return object;
        };

        /**
         * Converts this SendGroupMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.SendGroupMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendGroupMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendGroupMsgReq;
    })();

    onebot.SendGroupMsgResp = (function() {

        /**
         * Properties of a SendGroupMsgResp.
         * @memberof onebot
         * @interface ISendGroupMsgResp
         * @property {number|null} [messageId] SendGroupMsgResp messageId
         */

        /**
         * Constructs a new SendGroupMsgResp.
         * @memberof onebot
         * @classdesc Represents a SendGroupMsgResp.
         * @implements ISendGroupMsgResp
         * @constructor
         * @param {onebot.ISendGroupMsgResp=} [properties] Properties to set
         */
        function SendGroupMsgResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendGroupMsgResp messageId.
         * @member {number} messageId
         * @memberof onebot.SendGroupMsgResp
         * @instance
         */
        SendGroupMsgResp.prototype.messageId = 0;

        /**
         * Creates a new SendGroupMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {onebot.ISendGroupMsgResp=} [properties] Properties to set
         * @returns {onebot.SendGroupMsgResp} SendGroupMsgResp instance
         */
        SendGroupMsgResp.create = function create(properties) {
            return new SendGroupMsgResp(properties);
        };

        /**
         * Encodes the specified SendGroupMsgResp message. Does not implicitly {@link onebot.SendGroupMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {onebot.ISendGroupMsgResp} message SendGroupMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendGroupMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageId);
            return writer;
        };

        /**
         * Encodes the specified SendGroupMsgResp message, length delimited. Does not implicitly {@link onebot.SendGroupMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {onebot.ISendGroupMsgResp} message SendGroupMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendGroupMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendGroupMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendGroupMsgResp} SendGroupMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendGroupMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendGroupMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendGroupMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendGroupMsgResp} SendGroupMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendGroupMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendGroupMsgResp message.
         * @function verify
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendGroupMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            return null;
        };

        /**
         * Creates a SendGroupMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendGroupMsgResp} SendGroupMsgResp
         */
        SendGroupMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendGroupMsgResp)
                return object;
            var message = new $root.onebot.SendGroupMsgResp();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendGroupMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendGroupMsgResp
         * @static
         * @param {onebot.SendGroupMsgResp} message SendGroupMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendGroupMsgResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageId = 0;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            return object;
        };

        /**
         * Converts this SendGroupMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.SendGroupMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendGroupMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendGroupMsgResp;
    })();

    onebot.SendMsgReq = (function() {

        /**
         * Properties of a SendMsgReq.
         * @memberof onebot
         * @interface ISendMsgReq
         * @property {string|null} [messageType] SendMsgReq messageType
         * @property {Long|null} [userId] SendMsgReq userId
         * @property {Long|null} [groupId] SendMsgReq groupId
         * @property {Array.<onebot.IMessage>|null} [message] SendMsgReq message
         * @property {boolean|null} [autoEscape] SendMsgReq autoEscape
         */

        /**
         * Constructs a new SendMsgReq.
         * @memberof onebot
         * @classdesc Represents a SendMsgReq.
         * @implements ISendMsgReq
         * @constructor
         * @param {onebot.ISendMsgReq=} [properties] Properties to set
         */
        function SendMsgReq(properties) {
            this.message = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendMsgReq messageType.
         * @member {string} messageType
         * @memberof onebot.SendMsgReq
         * @instance
         */
        SendMsgReq.prototype.messageType = "";

        /**
         * SendMsgReq userId.
         * @member {Long} userId
         * @memberof onebot.SendMsgReq
         * @instance
         */
        SendMsgReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SendMsgReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SendMsgReq
         * @instance
         */
        SendMsgReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SendMsgReq message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.SendMsgReq
         * @instance
         */
        SendMsgReq.prototype.message = $util.emptyArray;

        /**
         * SendMsgReq autoEscape.
         * @member {boolean} autoEscape
         * @memberof onebot.SendMsgReq
         * @instance
         */
        SendMsgReq.prototype.autoEscape = false;

        /**
         * Creates a new SendMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.SendMsgReq
         * @static
         * @param {onebot.ISendMsgReq=} [properties] Properties to set
         * @returns {onebot.SendMsgReq} SendMsgReq instance
         */
        SendMsgReq.create = function create(properties) {
            return new SendMsgReq(properties);
        };

        /**
         * Encodes the specified SendMsgReq message. Does not implicitly {@link onebot.SendMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendMsgReq
         * @static
         * @param {onebot.ISendMsgReq} message SendMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageType != null && Object.hasOwnProperty.call(message, "messageType"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.messageType);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.groupId);
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.autoEscape != null && Object.hasOwnProperty.call(message, "autoEscape"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.autoEscape);
            return writer;
        };

        /**
         * Encodes the specified SendMsgReq message, length delimited. Does not implicitly {@link onebot.SendMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendMsgReq
         * @static
         * @param {onebot.ISendMsgReq} message SendMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendMsgReq} SendMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageType = reader.string();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.groupId = reader.int64();
                    break;
                case 4:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.autoEscape = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendMsgReq} SendMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendMsgReq message.
         * @function verify
         * @memberof onebot.SendMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                if (!$util.isString(message.messageType))
                    return "messageType: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                if (typeof message.autoEscape !== "boolean")
                    return "autoEscape: boolean expected";
            return null;
        };

        /**
         * Creates a SendMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendMsgReq} SendMsgReq
         */
        SendMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendMsgReq)
                return object;
            var message = new $root.onebot.SendMsgReq();
            if (object.messageType != null)
                message.messageType = String(object.messageType);
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.SendMsgReq.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.SendMsgReq.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.autoEscape != null)
                message.autoEscape = Boolean(object.autoEscape);
            return message;
        };

        /**
         * Creates a plain object from a SendMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendMsgReq
         * @static
         * @param {onebot.SendMsgReq} message SendMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.defaults) {
                object.messageType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.autoEscape = false;
            }
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                object.messageType = message.messageType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.autoEscape != null && message.hasOwnProperty("autoEscape"))
                object.autoEscape = message.autoEscape;
            return object;
        };

        /**
         * Converts this SendMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.SendMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendMsgReq;
    })();

    onebot.SendMsgResp = (function() {

        /**
         * Properties of a SendMsgResp.
         * @memberof onebot
         * @interface ISendMsgResp
         * @property {number|null} [messageId] SendMsgResp messageId
         */

        /**
         * Constructs a new SendMsgResp.
         * @memberof onebot
         * @classdesc Represents a SendMsgResp.
         * @implements ISendMsgResp
         * @constructor
         * @param {onebot.ISendMsgResp=} [properties] Properties to set
         */
        function SendMsgResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendMsgResp messageId.
         * @member {number} messageId
         * @memberof onebot.SendMsgResp
         * @instance
         */
        SendMsgResp.prototype.messageId = 0;

        /**
         * Creates a new SendMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.SendMsgResp
         * @static
         * @param {onebot.ISendMsgResp=} [properties] Properties to set
         * @returns {onebot.SendMsgResp} SendMsgResp instance
         */
        SendMsgResp.create = function create(properties) {
            return new SendMsgResp(properties);
        };

        /**
         * Encodes the specified SendMsgResp message. Does not implicitly {@link onebot.SendMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendMsgResp
         * @static
         * @param {onebot.ISendMsgResp} message SendMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageId);
            return writer;
        };

        /**
         * Encodes the specified SendMsgResp message, length delimited. Does not implicitly {@link onebot.SendMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendMsgResp
         * @static
         * @param {onebot.ISendMsgResp} message SendMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendMsgResp} SendMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendMsgResp} SendMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendMsgResp message.
         * @function verify
         * @memberof onebot.SendMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            return null;
        };

        /**
         * Creates a SendMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendMsgResp} SendMsgResp
         */
        SendMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendMsgResp)
                return object;
            var message = new $root.onebot.SendMsgResp();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendMsgResp
         * @static
         * @param {onebot.SendMsgResp} message SendMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendMsgResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageId = 0;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            return object;
        };

        /**
         * Converts this SendMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.SendMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendMsgResp;
    })();

    onebot.DeleteMsgReq = (function() {

        /**
         * Properties of a DeleteMsgReq.
         * @memberof onebot
         * @interface IDeleteMsgReq
         * @property {number|null} [messageId] DeleteMsgReq messageId
         */

        /**
         * Constructs a new DeleteMsgReq.
         * @memberof onebot
         * @classdesc Represents a DeleteMsgReq.
         * @implements IDeleteMsgReq
         * @constructor
         * @param {onebot.IDeleteMsgReq=} [properties] Properties to set
         */
        function DeleteMsgReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeleteMsgReq messageId.
         * @member {number} messageId
         * @memberof onebot.DeleteMsgReq
         * @instance
         */
        DeleteMsgReq.prototype.messageId = 0;

        /**
         * Creates a new DeleteMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {onebot.IDeleteMsgReq=} [properties] Properties to set
         * @returns {onebot.DeleteMsgReq} DeleteMsgReq instance
         */
        DeleteMsgReq.create = function create(properties) {
            return new DeleteMsgReq(properties);
        };

        /**
         * Encodes the specified DeleteMsgReq message. Does not implicitly {@link onebot.DeleteMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {onebot.IDeleteMsgReq} message DeleteMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeleteMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageId);
            return writer;
        };

        /**
         * Encodes the specified DeleteMsgReq message, length delimited. Does not implicitly {@link onebot.DeleteMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {onebot.IDeleteMsgReq} message DeleteMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeleteMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeleteMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.DeleteMsgReq} DeleteMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeleteMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.DeleteMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeleteMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.DeleteMsgReq} DeleteMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeleteMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeleteMsgReq message.
         * @function verify
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeleteMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            return null;
        };

        /**
         * Creates a DeleteMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.DeleteMsgReq} DeleteMsgReq
         */
        DeleteMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.DeleteMsgReq)
                return object;
            var message = new $root.onebot.DeleteMsgReq();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            return message;
        };

        /**
         * Creates a plain object from a DeleteMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.DeleteMsgReq
         * @static
         * @param {onebot.DeleteMsgReq} message DeleteMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeleteMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageId = 0;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            return object;
        };

        /**
         * Converts this DeleteMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.DeleteMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeleteMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeleteMsgReq;
    })();

    onebot.DeleteMsgResp = (function() {

        /**
         * Properties of a DeleteMsgResp.
         * @memberof onebot
         * @interface IDeleteMsgResp
         */

        /**
         * Constructs a new DeleteMsgResp.
         * @memberof onebot
         * @classdesc Represents a DeleteMsgResp.
         * @implements IDeleteMsgResp
         * @constructor
         * @param {onebot.IDeleteMsgResp=} [properties] Properties to set
         */
        function DeleteMsgResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new DeleteMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {onebot.IDeleteMsgResp=} [properties] Properties to set
         * @returns {onebot.DeleteMsgResp} DeleteMsgResp instance
         */
        DeleteMsgResp.create = function create(properties) {
            return new DeleteMsgResp(properties);
        };

        /**
         * Encodes the specified DeleteMsgResp message. Does not implicitly {@link onebot.DeleteMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {onebot.IDeleteMsgResp} message DeleteMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeleteMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified DeleteMsgResp message, length delimited. Does not implicitly {@link onebot.DeleteMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {onebot.IDeleteMsgResp} message DeleteMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeleteMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeleteMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.DeleteMsgResp} DeleteMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeleteMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.DeleteMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeleteMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.DeleteMsgResp} DeleteMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeleteMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeleteMsgResp message.
         * @function verify
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeleteMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a DeleteMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.DeleteMsgResp} DeleteMsgResp
         */
        DeleteMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.DeleteMsgResp)
                return object;
            return new $root.onebot.DeleteMsgResp();
        };

        /**
         * Creates a plain object from a DeleteMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.DeleteMsgResp
         * @static
         * @param {onebot.DeleteMsgResp} message DeleteMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeleteMsgResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this DeleteMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.DeleteMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeleteMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeleteMsgResp;
    })();

    onebot.GetMsgReq = (function() {

        /**
         * Properties of a GetMsgReq.
         * @memberof onebot
         * @interface IGetMsgReq
         * @property {number|null} [messageId] GetMsgReq messageId
         */

        /**
         * Constructs a new GetMsgReq.
         * @memberof onebot
         * @classdesc Represents a GetMsgReq.
         * @implements IGetMsgReq
         * @constructor
         * @param {onebot.IGetMsgReq=} [properties] Properties to set
         */
        function GetMsgReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetMsgReq messageId.
         * @member {number} messageId
         * @memberof onebot.GetMsgReq
         * @instance
         */
        GetMsgReq.prototype.messageId = 0;

        /**
         * Creates a new GetMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetMsgReq
         * @static
         * @param {onebot.IGetMsgReq=} [properties] Properties to set
         * @returns {onebot.GetMsgReq} GetMsgReq instance
         */
        GetMsgReq.create = function create(properties) {
            return new GetMsgReq(properties);
        };

        /**
         * Encodes the specified GetMsgReq message. Does not implicitly {@link onebot.GetMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetMsgReq
         * @static
         * @param {onebot.IGetMsgReq} message GetMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageId);
            return writer;
        };

        /**
         * Encodes the specified GetMsgReq message, length delimited. Does not implicitly {@link onebot.GetMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetMsgReq
         * @static
         * @param {onebot.IGetMsgReq} message GetMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetMsgReq} GetMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetMsgReq} GetMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetMsgReq message.
         * @function verify
         * @memberof onebot.GetMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            return null;
        };

        /**
         * Creates a GetMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetMsgReq} GetMsgReq
         */
        GetMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetMsgReq)
                return object;
            var message = new $root.onebot.GetMsgReq();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetMsgReq
         * @static
         * @param {onebot.GetMsgReq} message GetMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageId = 0;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            return object;
        };

        /**
         * Converts this GetMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.GetMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetMsgReq;
    })();

    onebot.GetMsgResp = (function() {

        /**
         * Properties of a GetMsgResp.
         * @memberof onebot
         * @interface IGetMsgResp
         * @property {number|null} [time] GetMsgResp time
         * @property {string|null} [messageType] GetMsgResp messageType
         * @property {number|null} [messageId] GetMsgResp messageId
         * @property {number|null} [realId] GetMsgResp realId
         * @property {onebot.GetMsgResp.ISender|null} [sender] GetMsgResp sender
         * @property {Array.<onebot.IMessage>|null} [message] GetMsgResp message
         * @property {string|null} [rawMessage] GetMsgResp rawMessage
         */

        /**
         * Constructs a new GetMsgResp.
         * @memberof onebot
         * @classdesc Represents a GetMsgResp.
         * @implements IGetMsgResp
         * @constructor
         * @param {onebot.IGetMsgResp=} [properties] Properties to set
         */
        function GetMsgResp(properties) {
            this.message = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetMsgResp time.
         * @member {number} time
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.time = 0;

        /**
         * GetMsgResp messageType.
         * @member {string} messageType
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.messageType = "";

        /**
         * GetMsgResp messageId.
         * @member {number} messageId
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.messageId = 0;

        /**
         * GetMsgResp realId.
         * @member {number} realId
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.realId = 0;

        /**
         * GetMsgResp sender.
         * @member {onebot.GetMsgResp.ISender|null|undefined} sender
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.sender = null;

        /**
         * GetMsgResp message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.message = $util.emptyArray;

        /**
         * GetMsgResp rawMessage.
         * @member {string} rawMessage
         * @memberof onebot.GetMsgResp
         * @instance
         */
        GetMsgResp.prototype.rawMessage = "";

        /**
         * Creates a new GetMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetMsgResp
         * @static
         * @param {onebot.IGetMsgResp=} [properties] Properties to set
         * @returns {onebot.GetMsgResp} GetMsgResp instance
         */
        GetMsgResp.create = function create(properties) {
            return new GetMsgResp(properties);
        };

        /**
         * Encodes the specified GetMsgResp message. Does not implicitly {@link onebot.GetMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetMsgResp
         * @static
         * @param {onebot.IGetMsgResp} message GetMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.time);
            if (message.messageType != null && Object.hasOwnProperty.call(message, "messageType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.messageType);
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.messageId);
            if (message.realId != null && Object.hasOwnProperty.call(message, "realId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.realId);
            if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                $root.onebot.GetMsgResp.Sender.encode(message.sender, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.rawMessage != null && Object.hasOwnProperty.call(message, "rawMessage"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.rawMessage);
            return writer;
        };

        /**
         * Encodes the specified GetMsgResp message, length delimited. Does not implicitly {@link onebot.GetMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetMsgResp
         * @static
         * @param {onebot.IGetMsgResp} message GetMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetMsgResp} GetMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int32();
                    break;
                case 2:
                    message.messageType = reader.string();
                    break;
                case 3:
                    message.messageId = reader.int32();
                    break;
                case 4:
                    message.realId = reader.int32();
                    break;
                case 5:
                    message.sender = $root.onebot.GetMsgResp.Sender.decode(reader, reader.uint32());
                    break;
                case 6:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.rawMessage = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetMsgResp} GetMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetMsgResp message.
         * @function verify
         * @memberof onebot.GetMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                if (!$util.isString(message.messageType))
                    return "messageType: string expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.realId != null && message.hasOwnProperty("realId"))
                if (!$util.isInteger(message.realId))
                    return "realId: integer expected";
            if (message.sender != null && message.hasOwnProperty("sender")) {
                var error = $root.onebot.GetMsgResp.Sender.verify(message.sender);
                if (error)
                    return "sender." + error;
            }
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                if (!$util.isString(message.rawMessage))
                    return "rawMessage: string expected";
            return null;
        };

        /**
         * Creates a GetMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetMsgResp} GetMsgResp
         */
        GetMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetMsgResp)
                return object;
            var message = new $root.onebot.GetMsgResp();
            if (object.time != null)
                message.time = object.time | 0;
            if (object.messageType != null)
                message.messageType = String(object.messageType);
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.realId != null)
                message.realId = object.realId | 0;
            if (object.sender != null) {
                if (typeof object.sender !== "object")
                    throw TypeError(".onebot.GetMsgResp.sender: object expected");
                message.sender = $root.onebot.GetMsgResp.Sender.fromObject(object.sender);
            }
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.GetMsgResp.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.GetMsgResp.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.rawMessage != null)
                message.rawMessage = String(object.rawMessage);
            return message;
        };

        /**
         * Creates a plain object from a GetMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetMsgResp
         * @static
         * @param {onebot.GetMsgResp} message GetMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetMsgResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.defaults) {
                object.time = 0;
                object.messageType = "";
                object.messageId = 0;
                object.realId = 0;
                object.sender = null;
                object.rawMessage = "";
            }
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                object.messageType = message.messageType;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            if (message.realId != null && message.hasOwnProperty("realId"))
                object.realId = message.realId;
            if (message.sender != null && message.hasOwnProperty("sender"))
                object.sender = $root.onebot.GetMsgResp.Sender.toObject(message.sender, options);
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                object.rawMessage = message.rawMessage;
            return object;
        };

        /**
         * Converts this GetMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.GetMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetMsgResp.Sender = (function() {

            /**
             * Properties of a Sender.
             * @memberof onebot.GetMsgResp
             * @interface ISender
             * @property {Long|null} [userId] Sender userId
             * @property {string|null} [nickname] Sender nickname
             * @property {string|null} [card] Sender card
             * @property {string|null} [sex] Sender sex
             * @property {number|null} [age] Sender age
             * @property {string|null} [area] Sender area
             * @property {string|null} [level] Sender level
             * @property {string|null} [role] Sender role
             * @property {string|null} [title] Sender title
             */

            /**
             * Constructs a new Sender.
             * @memberof onebot.GetMsgResp
             * @classdesc Represents a Sender.
             * @implements ISender
             * @constructor
             * @param {onebot.GetMsgResp.ISender=} [properties] Properties to set
             */
            function Sender(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Sender userId.
             * @member {Long} userId
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Sender nickname.
             * @member {string} nickname
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.nickname = "";

            /**
             * Sender card.
             * @member {string} card
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.card = "";

            /**
             * Sender sex.
             * @member {string} sex
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.sex = "";

            /**
             * Sender age.
             * @member {number} age
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.age = 0;

            /**
             * Sender area.
             * @member {string} area
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.area = "";

            /**
             * Sender level.
             * @member {string} level
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.level = "";

            /**
             * Sender role.
             * @member {string} role
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.role = "";

            /**
             * Sender title.
             * @member {string} title
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             */
            Sender.prototype.title = "";

            /**
             * Creates a new Sender instance using the specified properties.
             * @function create
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {onebot.GetMsgResp.ISender=} [properties] Properties to set
             * @returns {onebot.GetMsgResp.Sender} Sender instance
             */
            Sender.create = function create(properties) {
                return new Sender(properties);
            };

            /**
             * Encodes the specified Sender message. Does not implicitly {@link onebot.GetMsgResp.Sender.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {onebot.GetMsgResp.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.card);
                if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.sex);
                if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.age);
                if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.area);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.level);
                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.role);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.title);
                return writer;
            };

            /**
             * Encodes the specified Sender message, length delimited. Does not implicitly {@link onebot.GetMsgResp.Sender.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {onebot.GetMsgResp.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Sender message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetMsgResp.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetMsgResp.Sender();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.card = reader.string();
                        break;
                    case 4:
                        message.sex = reader.string();
                        break;
                    case 5:
                        message.age = reader.int32();
                        break;
                    case 6:
                        message.area = reader.string();
                        break;
                    case 7:
                        message.level = reader.string();
                        break;
                    case 8:
                        message.role = reader.string();
                        break;
                    case 9:
                        message.title = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Sender message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetMsgResp.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Sender message.
             * @function verify
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Sender.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isString(message.card))
                        return "card: string expected";
                if (message.sex != null && message.hasOwnProperty("sex"))
                    if (!$util.isString(message.sex))
                        return "sex: string expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                if (message.area != null && message.hasOwnProperty("area"))
                    if (!$util.isString(message.area))
                        return "area: string expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isString(message.level))
                        return "level: string expected";
                if (message.role != null && message.hasOwnProperty("role"))
                    if (!$util.isString(message.role))
                        return "role: string expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                return null;
            };

            /**
             * Creates a Sender message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetMsgResp.Sender} Sender
             */
            Sender.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetMsgResp.Sender)
                    return object;
                var message = new $root.onebot.GetMsgResp.Sender();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.card != null)
                    message.card = String(object.card);
                if (object.sex != null)
                    message.sex = String(object.sex);
                if (object.age != null)
                    message.age = object.age | 0;
                if (object.area != null)
                    message.area = String(object.area);
                if (object.level != null)
                    message.level = String(object.level);
                if (object.role != null)
                    message.role = String(object.role);
                if (object.title != null)
                    message.title = String(object.title);
                return message;
            };

            /**
             * Creates a plain object from a Sender message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetMsgResp.Sender
             * @static
             * @param {onebot.GetMsgResp.Sender} message Sender
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Sender.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.card = "";
                    object.sex = "";
                    object.age = 0;
                    object.area = "";
                    object.level = "";
                    object.role = "";
                    object.title = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.sex != null && message.hasOwnProperty("sex"))
                    object.sex = message.sex;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = message.role;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                return object;
            };

            /**
             * Converts this Sender to JSON.
             * @function toJSON
             * @memberof onebot.GetMsgResp.Sender
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Sender.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Sender;
        })();

        return GetMsgResp;
    })();

    onebot.GetForwardMsgReq = (function() {

        /**
         * Properties of a GetForwardMsgReq.
         * @memberof onebot
         * @interface IGetForwardMsgReq
         * @property {string|null} [id] GetForwardMsgReq id
         */

        /**
         * Constructs a new GetForwardMsgReq.
         * @memberof onebot
         * @classdesc Represents a GetForwardMsgReq.
         * @implements IGetForwardMsgReq
         * @constructor
         * @param {onebot.IGetForwardMsgReq=} [properties] Properties to set
         */
        function GetForwardMsgReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetForwardMsgReq id.
         * @member {string} id
         * @memberof onebot.GetForwardMsgReq
         * @instance
         */
        GetForwardMsgReq.prototype.id = "";

        /**
         * Creates a new GetForwardMsgReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {onebot.IGetForwardMsgReq=} [properties] Properties to set
         * @returns {onebot.GetForwardMsgReq} GetForwardMsgReq instance
         */
        GetForwardMsgReq.create = function create(properties) {
            return new GetForwardMsgReq(properties);
        };

        /**
         * Encodes the specified GetForwardMsgReq message. Does not implicitly {@link onebot.GetForwardMsgReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {onebot.IGetForwardMsgReq} message GetForwardMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetForwardMsgReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            return writer;
        };

        /**
         * Encodes the specified GetForwardMsgReq message, length delimited. Does not implicitly {@link onebot.GetForwardMsgReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {onebot.IGetForwardMsgReq} message GetForwardMsgReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetForwardMsgReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetForwardMsgReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetForwardMsgReq} GetForwardMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetForwardMsgReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetForwardMsgReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetForwardMsgReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetForwardMsgReq} GetForwardMsgReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetForwardMsgReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetForwardMsgReq message.
         * @function verify
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetForwardMsgReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isString(message.id))
                    return "id: string expected";
            return null;
        };

        /**
         * Creates a GetForwardMsgReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetForwardMsgReq} GetForwardMsgReq
         */
        GetForwardMsgReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetForwardMsgReq)
                return object;
            var message = new $root.onebot.GetForwardMsgReq();
            if (object.id != null)
                message.id = String(object.id);
            return message;
        };

        /**
         * Creates a plain object from a GetForwardMsgReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetForwardMsgReq
         * @static
         * @param {onebot.GetForwardMsgReq} message GetForwardMsgReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetForwardMsgReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = "";
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this GetForwardMsgReq to JSON.
         * @function toJSON
         * @memberof onebot.GetForwardMsgReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetForwardMsgReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetForwardMsgReq;
    })();

    onebot.GetForwardMsgResp = (function() {

        /**
         * Properties of a GetForwardMsgResp.
         * @memberof onebot
         * @interface IGetForwardMsgResp
         */

        /**
         * Constructs a new GetForwardMsgResp.
         * @memberof onebot
         * @classdesc Represents a GetForwardMsgResp.
         * @implements IGetForwardMsgResp
         * @constructor
         * @param {onebot.IGetForwardMsgResp=} [properties] Properties to set
         */
        function GetForwardMsgResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetForwardMsgResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {onebot.IGetForwardMsgResp=} [properties] Properties to set
         * @returns {onebot.GetForwardMsgResp} GetForwardMsgResp instance
         */
        GetForwardMsgResp.create = function create(properties) {
            return new GetForwardMsgResp(properties);
        };

        /**
         * Encodes the specified GetForwardMsgResp message. Does not implicitly {@link onebot.GetForwardMsgResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {onebot.IGetForwardMsgResp} message GetForwardMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetForwardMsgResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetForwardMsgResp message, length delimited. Does not implicitly {@link onebot.GetForwardMsgResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {onebot.IGetForwardMsgResp} message GetForwardMsgResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetForwardMsgResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetForwardMsgResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetForwardMsgResp} GetForwardMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetForwardMsgResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetForwardMsgResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetForwardMsgResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetForwardMsgResp} GetForwardMsgResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetForwardMsgResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetForwardMsgResp message.
         * @function verify
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetForwardMsgResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetForwardMsgResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetForwardMsgResp} GetForwardMsgResp
         */
        GetForwardMsgResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetForwardMsgResp)
                return object;
            return new $root.onebot.GetForwardMsgResp();
        };

        /**
         * Creates a plain object from a GetForwardMsgResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetForwardMsgResp
         * @static
         * @param {onebot.GetForwardMsgResp} message GetForwardMsgResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetForwardMsgResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetForwardMsgResp to JSON.
         * @function toJSON
         * @memberof onebot.GetForwardMsgResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetForwardMsgResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetForwardMsgResp;
    })();

    onebot.SendLikeReq = (function() {

        /**
         * Properties of a SendLikeReq.
         * @memberof onebot
         * @interface ISendLikeReq
         * @property {Long|null} [userId] SendLikeReq userId
         * @property {number|null} [times] SendLikeReq times
         */

        /**
         * Constructs a new SendLikeReq.
         * @memberof onebot
         * @classdesc Represents a SendLikeReq.
         * @implements ISendLikeReq
         * @constructor
         * @param {onebot.ISendLikeReq=} [properties] Properties to set
         */
        function SendLikeReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendLikeReq userId.
         * @member {Long} userId
         * @memberof onebot.SendLikeReq
         * @instance
         */
        SendLikeReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SendLikeReq times.
         * @member {number} times
         * @memberof onebot.SendLikeReq
         * @instance
         */
        SendLikeReq.prototype.times = 0;

        /**
         * Creates a new SendLikeReq instance using the specified properties.
         * @function create
         * @memberof onebot.SendLikeReq
         * @static
         * @param {onebot.ISendLikeReq=} [properties] Properties to set
         * @returns {onebot.SendLikeReq} SendLikeReq instance
         */
        SendLikeReq.create = function create(properties) {
            return new SendLikeReq(properties);
        };

        /**
         * Encodes the specified SendLikeReq message. Does not implicitly {@link onebot.SendLikeReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendLikeReq
         * @static
         * @param {onebot.ISendLikeReq} message SendLikeReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendLikeReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
            if (message.times != null && Object.hasOwnProperty.call(message, "times"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.times);
            return writer;
        };

        /**
         * Encodes the specified SendLikeReq message, length delimited. Does not implicitly {@link onebot.SendLikeReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendLikeReq
         * @static
         * @param {onebot.ISendLikeReq} message SendLikeReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendLikeReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendLikeReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendLikeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendLikeReq} SendLikeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendLikeReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendLikeReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int64();
                    break;
                case 2:
                    message.times = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendLikeReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendLikeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendLikeReq} SendLikeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendLikeReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendLikeReq message.
         * @function verify
         * @memberof onebot.SendLikeReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendLikeReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.times != null && message.hasOwnProperty("times"))
                if (!$util.isInteger(message.times))
                    return "times: integer expected";
            return null;
        };

        /**
         * Creates a SendLikeReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendLikeReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendLikeReq} SendLikeReq
         */
        SendLikeReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendLikeReq)
                return object;
            var message = new $root.onebot.SendLikeReq();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.times != null)
                message.times = object.times | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendLikeReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendLikeReq
         * @static
         * @param {onebot.SendLikeReq} message SendLikeReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendLikeReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.times = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.times != null && message.hasOwnProperty("times"))
                object.times = message.times;
            return object;
        };

        /**
         * Converts this SendLikeReq to JSON.
         * @function toJSON
         * @memberof onebot.SendLikeReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendLikeReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendLikeReq;
    })();

    onebot.SendLikeResp = (function() {

        /**
         * Properties of a SendLikeResp.
         * @memberof onebot
         * @interface ISendLikeResp
         */

        /**
         * Constructs a new SendLikeResp.
         * @memberof onebot
         * @classdesc Represents a SendLikeResp.
         * @implements ISendLikeResp
         * @constructor
         * @param {onebot.ISendLikeResp=} [properties] Properties to set
         */
        function SendLikeResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SendLikeResp instance using the specified properties.
         * @function create
         * @memberof onebot.SendLikeResp
         * @static
         * @param {onebot.ISendLikeResp=} [properties] Properties to set
         * @returns {onebot.SendLikeResp} SendLikeResp instance
         */
        SendLikeResp.create = function create(properties) {
            return new SendLikeResp(properties);
        };

        /**
         * Encodes the specified SendLikeResp message. Does not implicitly {@link onebot.SendLikeResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SendLikeResp
         * @static
         * @param {onebot.ISendLikeResp} message SendLikeResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendLikeResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SendLikeResp message, length delimited. Does not implicitly {@link onebot.SendLikeResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SendLikeResp
         * @static
         * @param {onebot.ISendLikeResp} message SendLikeResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendLikeResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendLikeResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SendLikeResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SendLikeResp} SendLikeResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendLikeResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SendLikeResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendLikeResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SendLikeResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SendLikeResp} SendLikeResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendLikeResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendLikeResp message.
         * @function verify
         * @memberof onebot.SendLikeResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendLikeResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SendLikeResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SendLikeResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SendLikeResp} SendLikeResp
         */
        SendLikeResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SendLikeResp)
                return object;
            return new $root.onebot.SendLikeResp();
        };

        /**
         * Creates a plain object from a SendLikeResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SendLikeResp
         * @static
         * @param {onebot.SendLikeResp} message SendLikeResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendLikeResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SendLikeResp to JSON.
         * @function toJSON
         * @memberof onebot.SendLikeResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendLikeResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendLikeResp;
    })();

    onebot.SetGroupKickReq = (function() {

        /**
         * Properties of a SetGroupKickReq.
         * @memberof onebot
         * @interface ISetGroupKickReq
         * @property {Long|null} [groupId] SetGroupKickReq groupId
         * @property {Long|null} [userId] SetGroupKickReq userId
         * @property {boolean|null} [rejectAddRequest] SetGroupKickReq rejectAddRequest
         */

        /**
         * Constructs a new SetGroupKickReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupKickReq.
         * @implements ISetGroupKickReq
         * @constructor
         * @param {onebot.ISetGroupKickReq=} [properties] Properties to set
         */
        function SetGroupKickReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupKickReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupKickReq
         * @instance
         */
        SetGroupKickReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupKickReq userId.
         * @member {Long} userId
         * @memberof onebot.SetGroupKickReq
         * @instance
         */
        SetGroupKickReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupKickReq rejectAddRequest.
         * @member {boolean} rejectAddRequest
         * @memberof onebot.SetGroupKickReq
         * @instance
         */
        SetGroupKickReq.prototype.rejectAddRequest = false;

        /**
         * Creates a new SetGroupKickReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {onebot.ISetGroupKickReq=} [properties] Properties to set
         * @returns {onebot.SetGroupKickReq} SetGroupKickReq instance
         */
        SetGroupKickReq.create = function create(properties) {
            return new SetGroupKickReq(properties);
        };

        /**
         * Encodes the specified SetGroupKickReq message. Does not implicitly {@link onebot.SetGroupKickReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {onebot.ISetGroupKickReq} message SetGroupKickReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupKickReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.rejectAddRequest != null && Object.hasOwnProperty.call(message, "rejectAddRequest"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.rejectAddRequest);
            return writer;
        };

        /**
         * Encodes the specified SetGroupKickReq message, length delimited. Does not implicitly {@link onebot.SetGroupKickReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {onebot.ISetGroupKickReq} message SetGroupKickReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupKickReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupKickReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupKickReq} SetGroupKickReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupKickReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupKickReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.rejectAddRequest = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupKickReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupKickReq} SetGroupKickReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupKickReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupKickReq message.
         * @function verify
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupKickReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.rejectAddRequest != null && message.hasOwnProperty("rejectAddRequest"))
                if (typeof message.rejectAddRequest !== "boolean")
                    return "rejectAddRequest: boolean expected";
            return null;
        };

        /**
         * Creates a SetGroupKickReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupKickReq} SetGroupKickReq
         */
        SetGroupKickReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupKickReq)
                return object;
            var message = new $root.onebot.SetGroupKickReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.rejectAddRequest != null)
                message.rejectAddRequest = Boolean(object.rejectAddRequest);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupKickReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupKickReq
         * @static
         * @param {onebot.SetGroupKickReq} message SetGroupKickReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupKickReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.rejectAddRequest = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.rejectAddRequest != null && message.hasOwnProperty("rejectAddRequest"))
                object.rejectAddRequest = message.rejectAddRequest;
            return object;
        };

        /**
         * Converts this SetGroupKickReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupKickReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupKickReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupKickReq;
    })();

    onebot.SetGroupKickResp = (function() {

        /**
         * Properties of a SetGroupKickResp.
         * @memberof onebot
         * @interface ISetGroupKickResp
         */

        /**
         * Constructs a new SetGroupKickResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupKickResp.
         * @implements ISetGroupKickResp
         * @constructor
         * @param {onebot.ISetGroupKickResp=} [properties] Properties to set
         */
        function SetGroupKickResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupKickResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {onebot.ISetGroupKickResp=} [properties] Properties to set
         * @returns {onebot.SetGroupKickResp} SetGroupKickResp instance
         */
        SetGroupKickResp.create = function create(properties) {
            return new SetGroupKickResp(properties);
        };

        /**
         * Encodes the specified SetGroupKickResp message. Does not implicitly {@link onebot.SetGroupKickResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {onebot.ISetGroupKickResp} message SetGroupKickResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupKickResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupKickResp message, length delimited. Does not implicitly {@link onebot.SetGroupKickResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {onebot.ISetGroupKickResp} message SetGroupKickResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupKickResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupKickResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupKickResp} SetGroupKickResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupKickResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupKickResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupKickResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupKickResp} SetGroupKickResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupKickResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupKickResp message.
         * @function verify
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupKickResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupKickResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupKickResp} SetGroupKickResp
         */
        SetGroupKickResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupKickResp)
                return object;
            return new $root.onebot.SetGroupKickResp();
        };

        /**
         * Creates a plain object from a SetGroupKickResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupKickResp
         * @static
         * @param {onebot.SetGroupKickResp} message SetGroupKickResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupKickResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupKickResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupKickResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupKickResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupKickResp;
    })();

    onebot.SetGroupBanReq = (function() {

        /**
         * Properties of a SetGroupBanReq.
         * @memberof onebot
         * @interface ISetGroupBanReq
         * @property {Long|null} [groupId] SetGroupBanReq groupId
         * @property {Long|null} [userId] SetGroupBanReq userId
         * @property {number|null} [duration] SetGroupBanReq duration
         */

        /**
         * Constructs a new SetGroupBanReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupBanReq.
         * @implements ISetGroupBanReq
         * @constructor
         * @param {onebot.ISetGroupBanReq=} [properties] Properties to set
         */
        function SetGroupBanReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupBanReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupBanReq
         * @instance
         */
        SetGroupBanReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupBanReq userId.
         * @member {Long} userId
         * @memberof onebot.SetGroupBanReq
         * @instance
         */
        SetGroupBanReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupBanReq duration.
         * @member {number} duration
         * @memberof onebot.SetGroupBanReq
         * @instance
         */
        SetGroupBanReq.prototype.duration = 0;

        /**
         * Creates a new SetGroupBanReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {onebot.ISetGroupBanReq=} [properties] Properties to set
         * @returns {onebot.SetGroupBanReq} SetGroupBanReq instance
         */
        SetGroupBanReq.create = function create(properties) {
            return new SetGroupBanReq(properties);
        };

        /**
         * Encodes the specified SetGroupBanReq message. Does not implicitly {@link onebot.SetGroupBanReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {onebot.ISetGroupBanReq} message SetGroupBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupBanReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.duration);
            return writer;
        };

        /**
         * Encodes the specified SetGroupBanReq message, length delimited. Does not implicitly {@link onebot.SetGroupBanReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {onebot.ISetGroupBanReq} message SetGroupBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupBanReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupBanReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupBanReq} SetGroupBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupBanReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupBanReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.duration = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupBanReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupBanReq} SetGroupBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupBanReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupBanReq message.
         * @function verify
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupBanReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration))
                    return "duration: integer expected";
            return null;
        };

        /**
         * Creates a SetGroupBanReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupBanReq} SetGroupBanReq
         */
        SetGroupBanReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupBanReq)
                return object;
            var message = new $root.onebot.SetGroupBanReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.duration != null)
                message.duration = object.duration | 0;
            return message;
        };

        /**
         * Creates a plain object from a SetGroupBanReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupBanReq
         * @static
         * @param {onebot.SetGroupBanReq} message SetGroupBanReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupBanReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.duration = 0;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.duration != null && message.hasOwnProperty("duration"))
                object.duration = message.duration;
            return object;
        };

        /**
         * Converts this SetGroupBanReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupBanReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupBanReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupBanReq;
    })();

    onebot.SetGroupBanResp = (function() {

        /**
         * Properties of a SetGroupBanResp.
         * @memberof onebot
         * @interface ISetGroupBanResp
         */

        /**
         * Constructs a new SetGroupBanResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupBanResp.
         * @implements ISetGroupBanResp
         * @constructor
         * @param {onebot.ISetGroupBanResp=} [properties] Properties to set
         */
        function SetGroupBanResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupBanResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {onebot.ISetGroupBanResp=} [properties] Properties to set
         * @returns {onebot.SetGroupBanResp} SetGroupBanResp instance
         */
        SetGroupBanResp.create = function create(properties) {
            return new SetGroupBanResp(properties);
        };

        /**
         * Encodes the specified SetGroupBanResp message. Does not implicitly {@link onebot.SetGroupBanResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {onebot.ISetGroupBanResp} message SetGroupBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupBanResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupBanResp message, length delimited. Does not implicitly {@link onebot.SetGroupBanResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {onebot.ISetGroupBanResp} message SetGroupBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupBanResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupBanResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupBanResp} SetGroupBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupBanResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupBanResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupBanResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupBanResp} SetGroupBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupBanResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupBanResp message.
         * @function verify
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupBanResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupBanResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupBanResp} SetGroupBanResp
         */
        SetGroupBanResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupBanResp)
                return object;
            return new $root.onebot.SetGroupBanResp();
        };

        /**
         * Creates a plain object from a SetGroupBanResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupBanResp
         * @static
         * @param {onebot.SetGroupBanResp} message SetGroupBanResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupBanResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupBanResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupBanResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupBanResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupBanResp;
    })();

    onebot.SetGroupAnonymousBanReq = (function() {

        /**
         * Properties of a SetGroupAnonymousBanReq.
         * @memberof onebot
         * @interface ISetGroupAnonymousBanReq
         * @property {Long|null} [groupId] SetGroupAnonymousBanReq groupId
         * @property {onebot.SetGroupAnonymousBanReq.IAnonymous|null} [anonymous] SetGroupAnonymousBanReq anonymous
         * @property {string|null} [anonymousFlag] SetGroupAnonymousBanReq anonymousFlag
         * @property {string|null} [flag] SetGroupAnonymousBanReq flag
         * @property {Long|null} [duration] SetGroupAnonymousBanReq duration
         */

        /**
         * Constructs a new SetGroupAnonymousBanReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupAnonymousBanReq.
         * @implements ISetGroupAnonymousBanReq
         * @constructor
         * @param {onebot.ISetGroupAnonymousBanReq=} [properties] Properties to set
         */
        function SetGroupAnonymousBanReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupAnonymousBanReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         */
        SetGroupAnonymousBanReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupAnonymousBanReq anonymous.
         * @member {onebot.SetGroupAnonymousBanReq.IAnonymous|null|undefined} anonymous
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         */
        SetGroupAnonymousBanReq.prototype.anonymous = null;

        /**
         * SetGroupAnonymousBanReq anonymousFlag.
         * @member {string} anonymousFlag
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         */
        SetGroupAnonymousBanReq.prototype.anonymousFlag = "";

        /**
         * SetGroupAnonymousBanReq flag.
         * @member {string} flag
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         */
        SetGroupAnonymousBanReq.prototype.flag = "";

        /**
         * SetGroupAnonymousBanReq duration.
         * @member {Long} duration
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         */
        SetGroupAnonymousBanReq.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SetGroupAnonymousBanReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {onebot.ISetGroupAnonymousBanReq=} [properties] Properties to set
         * @returns {onebot.SetGroupAnonymousBanReq} SetGroupAnonymousBanReq instance
         */
        SetGroupAnonymousBanReq.create = function create(properties) {
            return new SetGroupAnonymousBanReq(properties);
        };

        /**
         * Encodes the specified SetGroupAnonymousBanReq message. Does not implicitly {@link onebot.SetGroupAnonymousBanReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {onebot.ISetGroupAnonymousBanReq} message SetGroupAnonymousBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousBanReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.anonymous != null && Object.hasOwnProperty.call(message, "anonymous"))
                $root.onebot.SetGroupAnonymousBanReq.Anonymous.encode(message.anonymous, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.anonymousFlag != null && Object.hasOwnProperty.call(message, "anonymousFlag"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.anonymousFlag);
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.flag);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.duration);
            return writer;
        };

        /**
         * Encodes the specified SetGroupAnonymousBanReq message, length delimited. Does not implicitly {@link onebot.SetGroupAnonymousBanReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {onebot.ISetGroupAnonymousBanReq} message SetGroupAnonymousBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousBanReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAnonymousBanReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAnonymousBanReq} SetGroupAnonymousBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousBanReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAnonymousBanReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.anonymous = $root.onebot.SetGroupAnonymousBanReq.Anonymous.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.anonymousFlag = reader.string();
                    break;
                case 4:
                    message.flag = reader.string();
                    break;
                case 5:
                    message.duration = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAnonymousBanReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAnonymousBanReq} SetGroupAnonymousBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousBanReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAnonymousBanReq message.
         * @function verify
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAnonymousBanReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.anonymous != null && message.hasOwnProperty("anonymous")) {
                var error = $root.onebot.SetGroupAnonymousBanReq.Anonymous.verify(message.anonymous);
                if (error)
                    return "anonymous." + error;
            }
            if (message.anonymousFlag != null && message.hasOwnProperty("anonymousFlag"))
                if (!$util.isString(message.anonymousFlag))
                    return "anonymousFlag: string expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (!$util.isString(message.flag))
                    return "flag: string expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))
                    return "duration: integer|Long expected";
            return null;
        };

        /**
         * Creates a SetGroupAnonymousBanReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAnonymousBanReq} SetGroupAnonymousBanReq
         */
        SetGroupAnonymousBanReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAnonymousBanReq)
                return object;
            var message = new $root.onebot.SetGroupAnonymousBanReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.anonymous != null) {
                if (typeof object.anonymous !== "object")
                    throw TypeError(".onebot.SetGroupAnonymousBanReq.anonymous: object expected");
                message.anonymous = $root.onebot.SetGroupAnonymousBanReq.Anonymous.fromObject(object.anonymous);
            }
            if (object.anonymousFlag != null)
                message.anonymousFlag = String(object.anonymousFlag);
            if (object.flag != null)
                message.flag = String(object.flag);
            if (object.duration != null)
                if ($util.Long)
                    (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;
                else if (typeof object.duration === "string")
                    message.duration = parseInt(object.duration, 10);
                else if (typeof object.duration === "number")
                    message.duration = object.duration;
                else if (typeof object.duration === "object")
                    message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SetGroupAnonymousBanReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAnonymousBanReq
         * @static
         * @param {onebot.SetGroupAnonymousBanReq} message SetGroupAnonymousBanReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAnonymousBanReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.anonymous = null;
                object.anonymousFlag = "";
                object.flag = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.duration = options.longs === String ? "0" : 0;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.anonymous != null && message.hasOwnProperty("anonymous"))
                object.anonymous = $root.onebot.SetGroupAnonymousBanReq.Anonymous.toObject(message.anonymous, options);
            if (message.anonymousFlag != null && message.hasOwnProperty("anonymousFlag"))
                object.anonymousFlag = message.anonymousFlag;
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (typeof message.duration === "number")
                    object.duration = options.longs === String ? String(message.duration) : message.duration;
                else
                    object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;
            return object;
        };

        /**
         * Converts this SetGroupAnonymousBanReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAnonymousBanReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAnonymousBanReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        SetGroupAnonymousBanReq.Anonymous = (function() {

            /**
             * Properties of an Anonymous.
             * @memberof onebot.SetGroupAnonymousBanReq
             * @interface IAnonymous
             * @property {Long|null} [id] Anonymous id
             * @property {string|null} [name] Anonymous name
             * @property {string|null} [flag] Anonymous flag
             */

            /**
             * Constructs a new Anonymous.
             * @memberof onebot.SetGroupAnonymousBanReq
             * @classdesc Represents an Anonymous.
             * @implements IAnonymous
             * @constructor
             * @param {onebot.SetGroupAnonymousBanReq.IAnonymous=} [properties] Properties to set
             */
            function Anonymous(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Anonymous id.
             * @member {Long} id
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @instance
             */
            Anonymous.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Anonymous name.
             * @member {string} name
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @instance
             */
            Anonymous.prototype.name = "";

            /**
             * Anonymous flag.
             * @member {string} flag
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @instance
             */
            Anonymous.prototype.flag = "";

            /**
             * Creates a new Anonymous instance using the specified properties.
             * @function create
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {onebot.SetGroupAnonymousBanReq.IAnonymous=} [properties] Properties to set
             * @returns {onebot.SetGroupAnonymousBanReq.Anonymous} Anonymous instance
             */
            Anonymous.create = function create(properties) {
                return new Anonymous(properties);
            };

            /**
             * Encodes the specified Anonymous message. Does not implicitly {@link onebot.SetGroupAnonymousBanReq.Anonymous.verify|verify} messages.
             * @function encode
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {onebot.SetGroupAnonymousBanReq.IAnonymous} message Anonymous message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Anonymous.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.flag);
                return writer;
            };

            /**
             * Encodes the specified Anonymous message, length delimited. Does not implicitly {@link onebot.SetGroupAnonymousBanReq.Anonymous.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {onebot.SetGroupAnonymousBanReq.IAnonymous} message Anonymous message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Anonymous.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Anonymous message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.SetGroupAnonymousBanReq.Anonymous} Anonymous
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Anonymous.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAnonymousBanReq.Anonymous();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.flag = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Anonymous message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.SetGroupAnonymousBanReq.Anonymous} Anonymous
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Anonymous.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Anonymous message.
             * @function verify
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Anonymous.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isString(message.flag))
                        return "flag: string expected";
                return null;
            };

            /**
             * Creates an Anonymous message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.SetGroupAnonymousBanReq.Anonymous} Anonymous
             */
            Anonymous.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.SetGroupAnonymousBanReq.Anonymous)
                    return object;
                var message = new $root.onebot.SetGroupAnonymousBanReq.Anonymous();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.flag != null)
                    message.flag = String(object.flag);
                return message;
            };

            /**
             * Creates a plain object from an Anonymous message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @static
             * @param {onebot.SetGroupAnonymousBanReq.Anonymous} message Anonymous
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Anonymous.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.name = "";
                    object.flag = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                return object;
            };

            /**
             * Converts this Anonymous to JSON.
             * @function toJSON
             * @memberof onebot.SetGroupAnonymousBanReq.Anonymous
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Anonymous.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Anonymous;
        })();

        return SetGroupAnonymousBanReq;
    })();

    onebot.SetGroupAnonymousBanResp = (function() {

        /**
         * Properties of a SetGroupAnonymousBanResp.
         * @memberof onebot
         * @interface ISetGroupAnonymousBanResp
         */

        /**
         * Constructs a new SetGroupAnonymousBanResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupAnonymousBanResp.
         * @implements ISetGroupAnonymousBanResp
         * @constructor
         * @param {onebot.ISetGroupAnonymousBanResp=} [properties] Properties to set
         */
        function SetGroupAnonymousBanResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupAnonymousBanResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {onebot.ISetGroupAnonymousBanResp=} [properties] Properties to set
         * @returns {onebot.SetGroupAnonymousBanResp} SetGroupAnonymousBanResp instance
         */
        SetGroupAnonymousBanResp.create = function create(properties) {
            return new SetGroupAnonymousBanResp(properties);
        };

        /**
         * Encodes the specified SetGroupAnonymousBanResp message. Does not implicitly {@link onebot.SetGroupAnonymousBanResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {onebot.ISetGroupAnonymousBanResp} message SetGroupAnonymousBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousBanResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupAnonymousBanResp message, length delimited. Does not implicitly {@link onebot.SetGroupAnonymousBanResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {onebot.ISetGroupAnonymousBanResp} message SetGroupAnonymousBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousBanResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAnonymousBanResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAnonymousBanResp} SetGroupAnonymousBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousBanResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAnonymousBanResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAnonymousBanResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAnonymousBanResp} SetGroupAnonymousBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousBanResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAnonymousBanResp message.
         * @function verify
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAnonymousBanResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupAnonymousBanResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAnonymousBanResp} SetGroupAnonymousBanResp
         */
        SetGroupAnonymousBanResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAnonymousBanResp)
                return object;
            return new $root.onebot.SetGroupAnonymousBanResp();
        };

        /**
         * Creates a plain object from a SetGroupAnonymousBanResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAnonymousBanResp
         * @static
         * @param {onebot.SetGroupAnonymousBanResp} message SetGroupAnonymousBanResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAnonymousBanResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupAnonymousBanResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAnonymousBanResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAnonymousBanResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAnonymousBanResp;
    })();

    onebot.SetGroupWholeBanReq = (function() {

        /**
         * Properties of a SetGroupWholeBanReq.
         * @memberof onebot
         * @interface ISetGroupWholeBanReq
         * @property {Long|null} [groupId] SetGroupWholeBanReq groupId
         * @property {boolean|null} [enable] SetGroupWholeBanReq enable
         */

        /**
         * Constructs a new SetGroupWholeBanReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupWholeBanReq.
         * @implements ISetGroupWholeBanReq
         * @constructor
         * @param {onebot.ISetGroupWholeBanReq=} [properties] Properties to set
         */
        function SetGroupWholeBanReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupWholeBanReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupWholeBanReq
         * @instance
         */
        SetGroupWholeBanReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupWholeBanReq enable.
         * @member {boolean} enable
         * @memberof onebot.SetGroupWholeBanReq
         * @instance
         */
        SetGroupWholeBanReq.prototype.enable = false;

        /**
         * Creates a new SetGroupWholeBanReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {onebot.ISetGroupWholeBanReq=} [properties] Properties to set
         * @returns {onebot.SetGroupWholeBanReq} SetGroupWholeBanReq instance
         */
        SetGroupWholeBanReq.create = function create(properties) {
            return new SetGroupWholeBanReq(properties);
        };

        /**
         * Encodes the specified SetGroupWholeBanReq message. Does not implicitly {@link onebot.SetGroupWholeBanReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {onebot.ISetGroupWholeBanReq} message SetGroupWholeBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupWholeBanReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable);
            return writer;
        };

        /**
         * Encodes the specified SetGroupWholeBanReq message, length delimited. Does not implicitly {@link onebot.SetGroupWholeBanReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {onebot.ISetGroupWholeBanReq} message SetGroupWholeBanReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupWholeBanReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupWholeBanReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupWholeBanReq} SetGroupWholeBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupWholeBanReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupWholeBanReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.enable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupWholeBanReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupWholeBanReq} SetGroupWholeBanReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupWholeBanReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupWholeBanReq message.
         * @function verify
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupWholeBanReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.enable != null && message.hasOwnProperty("enable"))
                if (typeof message.enable !== "boolean")
                    return "enable: boolean expected";
            return null;
        };

        /**
         * Creates a SetGroupWholeBanReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupWholeBanReq} SetGroupWholeBanReq
         */
        SetGroupWholeBanReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupWholeBanReq)
                return object;
            var message = new $root.onebot.SetGroupWholeBanReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.enable != null)
                message.enable = Boolean(object.enable);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupWholeBanReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupWholeBanReq
         * @static
         * @param {onebot.SetGroupWholeBanReq} message SetGroupWholeBanReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupWholeBanReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.enable = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.enable != null && message.hasOwnProperty("enable"))
                object.enable = message.enable;
            return object;
        };

        /**
         * Converts this SetGroupWholeBanReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupWholeBanReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupWholeBanReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupWholeBanReq;
    })();

    onebot.SetGroupWholeBanResp = (function() {

        /**
         * Properties of a SetGroupWholeBanResp.
         * @memberof onebot
         * @interface ISetGroupWholeBanResp
         */

        /**
         * Constructs a new SetGroupWholeBanResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupWholeBanResp.
         * @implements ISetGroupWholeBanResp
         * @constructor
         * @param {onebot.ISetGroupWholeBanResp=} [properties] Properties to set
         */
        function SetGroupWholeBanResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupWholeBanResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {onebot.ISetGroupWholeBanResp=} [properties] Properties to set
         * @returns {onebot.SetGroupWholeBanResp} SetGroupWholeBanResp instance
         */
        SetGroupWholeBanResp.create = function create(properties) {
            return new SetGroupWholeBanResp(properties);
        };

        /**
         * Encodes the specified SetGroupWholeBanResp message. Does not implicitly {@link onebot.SetGroupWholeBanResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {onebot.ISetGroupWholeBanResp} message SetGroupWholeBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupWholeBanResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupWholeBanResp message, length delimited. Does not implicitly {@link onebot.SetGroupWholeBanResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {onebot.ISetGroupWholeBanResp} message SetGroupWholeBanResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupWholeBanResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupWholeBanResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupWholeBanResp} SetGroupWholeBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupWholeBanResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupWholeBanResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupWholeBanResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupWholeBanResp} SetGroupWholeBanResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupWholeBanResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupWholeBanResp message.
         * @function verify
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupWholeBanResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupWholeBanResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupWholeBanResp} SetGroupWholeBanResp
         */
        SetGroupWholeBanResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupWholeBanResp)
                return object;
            return new $root.onebot.SetGroupWholeBanResp();
        };

        /**
         * Creates a plain object from a SetGroupWholeBanResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupWholeBanResp
         * @static
         * @param {onebot.SetGroupWholeBanResp} message SetGroupWholeBanResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupWholeBanResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupWholeBanResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupWholeBanResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupWholeBanResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupWholeBanResp;
    })();

    onebot.SetGroupAdminReq = (function() {

        /**
         * Properties of a SetGroupAdminReq.
         * @memberof onebot
         * @interface ISetGroupAdminReq
         * @property {Long|null} [groupId] SetGroupAdminReq groupId
         * @property {Long|null} [userId] SetGroupAdminReq userId
         * @property {boolean|null} [enable] SetGroupAdminReq enable
         */

        /**
         * Constructs a new SetGroupAdminReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupAdminReq.
         * @implements ISetGroupAdminReq
         * @constructor
         * @param {onebot.ISetGroupAdminReq=} [properties] Properties to set
         */
        function SetGroupAdminReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupAdminReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupAdminReq
         * @instance
         */
        SetGroupAdminReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupAdminReq userId.
         * @member {Long} userId
         * @memberof onebot.SetGroupAdminReq
         * @instance
         */
        SetGroupAdminReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupAdminReq enable.
         * @member {boolean} enable
         * @memberof onebot.SetGroupAdminReq
         * @instance
         */
        SetGroupAdminReq.prototype.enable = false;

        /**
         * Creates a new SetGroupAdminReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {onebot.ISetGroupAdminReq=} [properties] Properties to set
         * @returns {onebot.SetGroupAdminReq} SetGroupAdminReq instance
         */
        SetGroupAdminReq.create = function create(properties) {
            return new SetGroupAdminReq(properties);
        };

        /**
         * Encodes the specified SetGroupAdminReq message. Does not implicitly {@link onebot.SetGroupAdminReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {onebot.ISetGroupAdminReq} message SetGroupAdminReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAdminReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
            return writer;
        };

        /**
         * Encodes the specified SetGroupAdminReq message, length delimited. Does not implicitly {@link onebot.SetGroupAdminReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {onebot.ISetGroupAdminReq} message SetGroupAdminReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAdminReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAdminReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAdminReq} SetGroupAdminReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAdminReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAdminReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.enable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAdminReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAdminReq} SetGroupAdminReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAdminReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAdminReq message.
         * @function verify
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAdminReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.enable != null && message.hasOwnProperty("enable"))
                if (typeof message.enable !== "boolean")
                    return "enable: boolean expected";
            return null;
        };

        /**
         * Creates a SetGroupAdminReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAdminReq} SetGroupAdminReq
         */
        SetGroupAdminReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAdminReq)
                return object;
            var message = new $root.onebot.SetGroupAdminReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.enable != null)
                message.enable = Boolean(object.enable);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupAdminReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAdminReq
         * @static
         * @param {onebot.SetGroupAdminReq} message SetGroupAdminReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAdminReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.enable = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.enable != null && message.hasOwnProperty("enable"))
                object.enable = message.enable;
            return object;
        };

        /**
         * Converts this SetGroupAdminReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAdminReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAdminReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAdminReq;
    })();

    onebot.SetGroupAdminResp = (function() {

        /**
         * Properties of a SetGroupAdminResp.
         * @memberof onebot
         * @interface ISetGroupAdminResp
         */

        /**
         * Constructs a new SetGroupAdminResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupAdminResp.
         * @implements ISetGroupAdminResp
         * @constructor
         * @param {onebot.ISetGroupAdminResp=} [properties] Properties to set
         */
        function SetGroupAdminResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupAdminResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {onebot.ISetGroupAdminResp=} [properties] Properties to set
         * @returns {onebot.SetGroupAdminResp} SetGroupAdminResp instance
         */
        SetGroupAdminResp.create = function create(properties) {
            return new SetGroupAdminResp(properties);
        };

        /**
         * Encodes the specified SetGroupAdminResp message. Does not implicitly {@link onebot.SetGroupAdminResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {onebot.ISetGroupAdminResp} message SetGroupAdminResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAdminResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupAdminResp message, length delimited. Does not implicitly {@link onebot.SetGroupAdminResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {onebot.ISetGroupAdminResp} message SetGroupAdminResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAdminResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAdminResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAdminResp} SetGroupAdminResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAdminResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAdminResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAdminResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAdminResp} SetGroupAdminResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAdminResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAdminResp message.
         * @function verify
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAdminResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupAdminResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAdminResp} SetGroupAdminResp
         */
        SetGroupAdminResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAdminResp)
                return object;
            return new $root.onebot.SetGroupAdminResp();
        };

        /**
         * Creates a plain object from a SetGroupAdminResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAdminResp
         * @static
         * @param {onebot.SetGroupAdminResp} message SetGroupAdminResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAdminResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupAdminResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAdminResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAdminResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAdminResp;
    })();

    onebot.SetGroupAnonymousReq = (function() {

        /**
         * Properties of a SetGroupAnonymousReq.
         * @memberof onebot
         * @interface ISetGroupAnonymousReq
         * @property {Long|null} [groupId] SetGroupAnonymousReq groupId
         * @property {boolean|null} [enable] SetGroupAnonymousReq enable
         */

        /**
         * Constructs a new SetGroupAnonymousReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupAnonymousReq.
         * @implements ISetGroupAnonymousReq
         * @constructor
         * @param {onebot.ISetGroupAnonymousReq=} [properties] Properties to set
         */
        function SetGroupAnonymousReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupAnonymousReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupAnonymousReq
         * @instance
         */
        SetGroupAnonymousReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupAnonymousReq enable.
         * @member {boolean} enable
         * @memberof onebot.SetGroupAnonymousReq
         * @instance
         */
        SetGroupAnonymousReq.prototype.enable = false;

        /**
         * Creates a new SetGroupAnonymousReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {onebot.ISetGroupAnonymousReq=} [properties] Properties to set
         * @returns {onebot.SetGroupAnonymousReq} SetGroupAnonymousReq instance
         */
        SetGroupAnonymousReq.create = function create(properties) {
            return new SetGroupAnonymousReq(properties);
        };

        /**
         * Encodes the specified SetGroupAnonymousReq message. Does not implicitly {@link onebot.SetGroupAnonymousReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {onebot.ISetGroupAnonymousReq} message SetGroupAnonymousReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable);
            return writer;
        };

        /**
         * Encodes the specified SetGroupAnonymousReq message, length delimited. Does not implicitly {@link onebot.SetGroupAnonymousReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {onebot.ISetGroupAnonymousReq} message SetGroupAnonymousReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAnonymousReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAnonymousReq} SetGroupAnonymousReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAnonymousReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.enable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAnonymousReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAnonymousReq} SetGroupAnonymousReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAnonymousReq message.
         * @function verify
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAnonymousReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.enable != null && message.hasOwnProperty("enable"))
                if (typeof message.enable !== "boolean")
                    return "enable: boolean expected";
            return null;
        };

        /**
         * Creates a SetGroupAnonymousReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAnonymousReq} SetGroupAnonymousReq
         */
        SetGroupAnonymousReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAnonymousReq)
                return object;
            var message = new $root.onebot.SetGroupAnonymousReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.enable != null)
                message.enable = Boolean(object.enable);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupAnonymousReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAnonymousReq
         * @static
         * @param {onebot.SetGroupAnonymousReq} message SetGroupAnonymousReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAnonymousReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.enable = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.enable != null && message.hasOwnProperty("enable"))
                object.enable = message.enable;
            return object;
        };

        /**
         * Converts this SetGroupAnonymousReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAnonymousReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAnonymousReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAnonymousReq;
    })();

    onebot.SetGroupAnonymousResp = (function() {

        /**
         * Properties of a SetGroupAnonymousResp.
         * @memberof onebot
         * @interface ISetGroupAnonymousResp
         */

        /**
         * Constructs a new SetGroupAnonymousResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupAnonymousResp.
         * @implements ISetGroupAnonymousResp
         * @constructor
         * @param {onebot.ISetGroupAnonymousResp=} [properties] Properties to set
         */
        function SetGroupAnonymousResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupAnonymousResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {onebot.ISetGroupAnonymousResp=} [properties] Properties to set
         * @returns {onebot.SetGroupAnonymousResp} SetGroupAnonymousResp instance
         */
        SetGroupAnonymousResp.create = function create(properties) {
            return new SetGroupAnonymousResp(properties);
        };

        /**
         * Encodes the specified SetGroupAnonymousResp message. Does not implicitly {@link onebot.SetGroupAnonymousResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {onebot.ISetGroupAnonymousResp} message SetGroupAnonymousResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupAnonymousResp message, length delimited. Does not implicitly {@link onebot.SetGroupAnonymousResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {onebot.ISetGroupAnonymousResp} message SetGroupAnonymousResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAnonymousResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAnonymousResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAnonymousResp} SetGroupAnonymousResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAnonymousResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAnonymousResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAnonymousResp} SetGroupAnonymousResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAnonymousResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAnonymousResp message.
         * @function verify
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAnonymousResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupAnonymousResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAnonymousResp} SetGroupAnonymousResp
         */
        SetGroupAnonymousResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAnonymousResp)
                return object;
            return new $root.onebot.SetGroupAnonymousResp();
        };

        /**
         * Creates a plain object from a SetGroupAnonymousResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAnonymousResp
         * @static
         * @param {onebot.SetGroupAnonymousResp} message SetGroupAnonymousResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAnonymousResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupAnonymousResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAnonymousResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAnonymousResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAnonymousResp;
    })();

    onebot.SetGroupCardReq = (function() {

        /**
         * Properties of a SetGroupCardReq.
         * @memberof onebot
         * @interface ISetGroupCardReq
         * @property {Long|null} [groupId] SetGroupCardReq groupId
         * @property {Long|null} [userId] SetGroupCardReq userId
         * @property {string|null} [card] SetGroupCardReq card
         */

        /**
         * Constructs a new SetGroupCardReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupCardReq.
         * @implements ISetGroupCardReq
         * @constructor
         * @param {onebot.ISetGroupCardReq=} [properties] Properties to set
         */
        function SetGroupCardReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupCardReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupCardReq
         * @instance
         */
        SetGroupCardReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupCardReq userId.
         * @member {Long} userId
         * @memberof onebot.SetGroupCardReq
         * @instance
         */
        SetGroupCardReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupCardReq card.
         * @member {string} card
         * @memberof onebot.SetGroupCardReq
         * @instance
         */
        SetGroupCardReq.prototype.card = "";

        /**
         * Creates a new SetGroupCardReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {onebot.ISetGroupCardReq=} [properties] Properties to set
         * @returns {onebot.SetGroupCardReq} SetGroupCardReq instance
         */
        SetGroupCardReq.create = function create(properties) {
            return new SetGroupCardReq(properties);
        };

        /**
         * Encodes the specified SetGroupCardReq message. Does not implicitly {@link onebot.SetGroupCardReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {onebot.ISetGroupCardReq} message SetGroupCardReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupCardReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.card);
            return writer;
        };

        /**
         * Encodes the specified SetGroupCardReq message, length delimited. Does not implicitly {@link onebot.SetGroupCardReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {onebot.ISetGroupCardReq} message SetGroupCardReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupCardReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupCardReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupCardReq} SetGroupCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupCardReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupCardReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.card = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupCardReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupCardReq} SetGroupCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupCardReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupCardReq message.
         * @function verify
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupCardReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.card != null && message.hasOwnProperty("card"))
                if (!$util.isString(message.card))
                    return "card: string expected";
            return null;
        };

        /**
         * Creates a SetGroupCardReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupCardReq} SetGroupCardReq
         */
        SetGroupCardReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupCardReq)
                return object;
            var message = new $root.onebot.SetGroupCardReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.card != null)
                message.card = String(object.card);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupCardReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupCardReq
         * @static
         * @param {onebot.SetGroupCardReq} message SetGroupCardReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupCardReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.card = "";
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.card != null && message.hasOwnProperty("card"))
                object.card = message.card;
            return object;
        };

        /**
         * Converts this SetGroupCardReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupCardReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupCardReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupCardReq;
    })();

    onebot.SetGroupCardResp = (function() {

        /**
         * Properties of a SetGroupCardResp.
         * @memberof onebot
         * @interface ISetGroupCardResp
         */

        /**
         * Constructs a new SetGroupCardResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupCardResp.
         * @implements ISetGroupCardResp
         * @constructor
         * @param {onebot.ISetGroupCardResp=} [properties] Properties to set
         */
        function SetGroupCardResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupCardResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {onebot.ISetGroupCardResp=} [properties] Properties to set
         * @returns {onebot.SetGroupCardResp} SetGroupCardResp instance
         */
        SetGroupCardResp.create = function create(properties) {
            return new SetGroupCardResp(properties);
        };

        /**
         * Encodes the specified SetGroupCardResp message. Does not implicitly {@link onebot.SetGroupCardResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {onebot.ISetGroupCardResp} message SetGroupCardResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupCardResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupCardResp message, length delimited. Does not implicitly {@link onebot.SetGroupCardResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {onebot.ISetGroupCardResp} message SetGroupCardResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupCardResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupCardResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupCardResp} SetGroupCardResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupCardResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupCardResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupCardResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupCardResp} SetGroupCardResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupCardResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupCardResp message.
         * @function verify
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupCardResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupCardResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupCardResp} SetGroupCardResp
         */
        SetGroupCardResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupCardResp)
                return object;
            return new $root.onebot.SetGroupCardResp();
        };

        /**
         * Creates a plain object from a SetGroupCardResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupCardResp
         * @static
         * @param {onebot.SetGroupCardResp} message SetGroupCardResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupCardResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupCardResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupCardResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupCardResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupCardResp;
    })();

    onebot.SetGroupNameReq = (function() {

        /**
         * Properties of a SetGroupNameReq.
         * @memberof onebot
         * @interface ISetGroupNameReq
         * @property {Long|null} [groupId] SetGroupNameReq groupId
         * @property {string|null} [groupName] SetGroupNameReq groupName
         */

        /**
         * Constructs a new SetGroupNameReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupNameReq.
         * @implements ISetGroupNameReq
         * @constructor
         * @param {onebot.ISetGroupNameReq=} [properties] Properties to set
         */
        function SetGroupNameReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupNameReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupNameReq
         * @instance
         */
        SetGroupNameReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupNameReq groupName.
         * @member {string} groupName
         * @memberof onebot.SetGroupNameReq
         * @instance
         */
        SetGroupNameReq.prototype.groupName = "";

        /**
         * Creates a new SetGroupNameReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {onebot.ISetGroupNameReq=} [properties] Properties to set
         * @returns {onebot.SetGroupNameReq} SetGroupNameReq instance
         */
        SetGroupNameReq.create = function create(properties) {
            return new SetGroupNameReq(properties);
        };

        /**
         * Encodes the specified SetGroupNameReq message. Does not implicitly {@link onebot.SetGroupNameReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {onebot.ISetGroupNameReq} message SetGroupNameReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupNameReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.groupName != null && Object.hasOwnProperty.call(message, "groupName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupName);
            return writer;
        };

        /**
         * Encodes the specified SetGroupNameReq message, length delimited. Does not implicitly {@link onebot.SetGroupNameReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {onebot.ISetGroupNameReq} message SetGroupNameReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupNameReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupNameReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupNameReq} SetGroupNameReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupNameReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupNameReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupNameReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupNameReq} SetGroupNameReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupNameReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupNameReq message.
         * @function verify
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupNameReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                if (!$util.isString(message.groupName))
                    return "groupName: string expected";
            return null;
        };

        /**
         * Creates a SetGroupNameReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupNameReq} SetGroupNameReq
         */
        SetGroupNameReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupNameReq)
                return object;
            var message = new $root.onebot.SetGroupNameReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.groupName != null)
                message.groupName = String(object.groupName);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupNameReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupNameReq
         * @static
         * @param {onebot.SetGroupNameReq} message SetGroupNameReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupNameReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.groupName = "";
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                object.groupName = message.groupName;
            return object;
        };

        /**
         * Converts this SetGroupNameReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupNameReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupNameReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupNameReq;
    })();

    onebot.SetGroupNameResp = (function() {

        /**
         * Properties of a SetGroupNameResp.
         * @memberof onebot
         * @interface ISetGroupNameResp
         */

        /**
         * Constructs a new SetGroupNameResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupNameResp.
         * @implements ISetGroupNameResp
         * @constructor
         * @param {onebot.ISetGroupNameResp=} [properties] Properties to set
         */
        function SetGroupNameResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupNameResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {onebot.ISetGroupNameResp=} [properties] Properties to set
         * @returns {onebot.SetGroupNameResp} SetGroupNameResp instance
         */
        SetGroupNameResp.create = function create(properties) {
            return new SetGroupNameResp(properties);
        };

        /**
         * Encodes the specified SetGroupNameResp message. Does not implicitly {@link onebot.SetGroupNameResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {onebot.ISetGroupNameResp} message SetGroupNameResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupNameResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupNameResp message, length delimited. Does not implicitly {@link onebot.SetGroupNameResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {onebot.ISetGroupNameResp} message SetGroupNameResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupNameResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupNameResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupNameResp} SetGroupNameResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupNameResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupNameResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupNameResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupNameResp} SetGroupNameResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupNameResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupNameResp message.
         * @function verify
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupNameResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupNameResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupNameResp} SetGroupNameResp
         */
        SetGroupNameResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupNameResp)
                return object;
            return new $root.onebot.SetGroupNameResp();
        };

        /**
         * Creates a plain object from a SetGroupNameResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupNameResp
         * @static
         * @param {onebot.SetGroupNameResp} message SetGroupNameResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupNameResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupNameResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupNameResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupNameResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupNameResp;
    })();

    onebot.SetGroupLeaveReq = (function() {

        /**
         * Properties of a SetGroupLeaveReq.
         * @memberof onebot
         * @interface ISetGroupLeaveReq
         * @property {Long|null} [groupId] SetGroupLeaveReq groupId
         * @property {boolean|null} [isDismiss] SetGroupLeaveReq isDismiss
         */

        /**
         * Constructs a new SetGroupLeaveReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupLeaveReq.
         * @implements ISetGroupLeaveReq
         * @constructor
         * @param {onebot.ISetGroupLeaveReq=} [properties] Properties to set
         */
        function SetGroupLeaveReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupLeaveReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupLeaveReq
         * @instance
         */
        SetGroupLeaveReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupLeaveReq isDismiss.
         * @member {boolean} isDismiss
         * @memberof onebot.SetGroupLeaveReq
         * @instance
         */
        SetGroupLeaveReq.prototype.isDismiss = false;

        /**
         * Creates a new SetGroupLeaveReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {onebot.ISetGroupLeaveReq=} [properties] Properties to set
         * @returns {onebot.SetGroupLeaveReq} SetGroupLeaveReq instance
         */
        SetGroupLeaveReq.create = function create(properties) {
            return new SetGroupLeaveReq(properties);
        };

        /**
         * Encodes the specified SetGroupLeaveReq message. Does not implicitly {@link onebot.SetGroupLeaveReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {onebot.ISetGroupLeaveReq} message SetGroupLeaveReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupLeaveReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.isDismiss != null && Object.hasOwnProperty.call(message, "isDismiss"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isDismiss);
            return writer;
        };

        /**
         * Encodes the specified SetGroupLeaveReq message, length delimited. Does not implicitly {@link onebot.SetGroupLeaveReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {onebot.ISetGroupLeaveReq} message SetGroupLeaveReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupLeaveReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupLeaveReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupLeaveReq} SetGroupLeaveReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupLeaveReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupLeaveReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.isDismiss = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupLeaveReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupLeaveReq} SetGroupLeaveReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupLeaveReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupLeaveReq message.
         * @function verify
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupLeaveReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.isDismiss != null && message.hasOwnProperty("isDismiss"))
                if (typeof message.isDismiss !== "boolean")
                    return "isDismiss: boolean expected";
            return null;
        };

        /**
         * Creates a SetGroupLeaveReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupLeaveReq} SetGroupLeaveReq
         */
        SetGroupLeaveReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupLeaveReq)
                return object;
            var message = new $root.onebot.SetGroupLeaveReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.isDismiss != null)
                message.isDismiss = Boolean(object.isDismiss);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupLeaveReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupLeaveReq
         * @static
         * @param {onebot.SetGroupLeaveReq} message SetGroupLeaveReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupLeaveReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.isDismiss = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.isDismiss != null && message.hasOwnProperty("isDismiss"))
                object.isDismiss = message.isDismiss;
            return object;
        };

        /**
         * Converts this SetGroupLeaveReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupLeaveReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupLeaveReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupLeaveReq;
    })();

    onebot.SetGroupLeaveResp = (function() {

        /**
         * Properties of a SetGroupLeaveResp.
         * @memberof onebot
         * @interface ISetGroupLeaveResp
         */

        /**
         * Constructs a new SetGroupLeaveResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupLeaveResp.
         * @implements ISetGroupLeaveResp
         * @constructor
         * @param {onebot.ISetGroupLeaveResp=} [properties] Properties to set
         */
        function SetGroupLeaveResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupLeaveResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {onebot.ISetGroupLeaveResp=} [properties] Properties to set
         * @returns {onebot.SetGroupLeaveResp} SetGroupLeaveResp instance
         */
        SetGroupLeaveResp.create = function create(properties) {
            return new SetGroupLeaveResp(properties);
        };

        /**
         * Encodes the specified SetGroupLeaveResp message. Does not implicitly {@link onebot.SetGroupLeaveResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {onebot.ISetGroupLeaveResp} message SetGroupLeaveResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupLeaveResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupLeaveResp message, length delimited. Does not implicitly {@link onebot.SetGroupLeaveResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {onebot.ISetGroupLeaveResp} message SetGroupLeaveResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupLeaveResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupLeaveResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupLeaveResp} SetGroupLeaveResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupLeaveResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupLeaveResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupLeaveResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupLeaveResp} SetGroupLeaveResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupLeaveResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupLeaveResp message.
         * @function verify
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupLeaveResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupLeaveResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupLeaveResp} SetGroupLeaveResp
         */
        SetGroupLeaveResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupLeaveResp)
                return object;
            return new $root.onebot.SetGroupLeaveResp();
        };

        /**
         * Creates a plain object from a SetGroupLeaveResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupLeaveResp
         * @static
         * @param {onebot.SetGroupLeaveResp} message SetGroupLeaveResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupLeaveResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupLeaveResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupLeaveResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupLeaveResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupLeaveResp;
    })();

    onebot.SetGroupSpecialTitleReq = (function() {

        /**
         * Properties of a SetGroupSpecialTitleReq.
         * @memberof onebot
         * @interface ISetGroupSpecialTitleReq
         * @property {Long|null} [groupId] SetGroupSpecialTitleReq groupId
         * @property {Long|null} [userId] SetGroupSpecialTitleReq userId
         * @property {string|null} [specialTitle] SetGroupSpecialTitleReq specialTitle
         * @property {Long|null} [duration] SetGroupSpecialTitleReq duration
         */

        /**
         * Constructs a new SetGroupSpecialTitleReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupSpecialTitleReq.
         * @implements ISetGroupSpecialTitleReq
         * @constructor
         * @param {onebot.ISetGroupSpecialTitleReq=} [properties] Properties to set
         */
        function SetGroupSpecialTitleReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupSpecialTitleReq groupId.
         * @member {Long} groupId
         * @memberof onebot.SetGroupSpecialTitleReq
         * @instance
         */
        SetGroupSpecialTitleReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupSpecialTitleReq userId.
         * @member {Long} userId
         * @memberof onebot.SetGroupSpecialTitleReq
         * @instance
         */
        SetGroupSpecialTitleReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SetGroupSpecialTitleReq specialTitle.
         * @member {string} specialTitle
         * @memberof onebot.SetGroupSpecialTitleReq
         * @instance
         */
        SetGroupSpecialTitleReq.prototype.specialTitle = "";

        /**
         * SetGroupSpecialTitleReq duration.
         * @member {Long} duration
         * @memberof onebot.SetGroupSpecialTitleReq
         * @instance
         */
        SetGroupSpecialTitleReq.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SetGroupSpecialTitleReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {onebot.ISetGroupSpecialTitleReq=} [properties] Properties to set
         * @returns {onebot.SetGroupSpecialTitleReq} SetGroupSpecialTitleReq instance
         */
        SetGroupSpecialTitleReq.create = function create(properties) {
            return new SetGroupSpecialTitleReq(properties);
        };

        /**
         * Encodes the specified SetGroupSpecialTitleReq message. Does not implicitly {@link onebot.SetGroupSpecialTitleReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {onebot.ISetGroupSpecialTitleReq} message SetGroupSpecialTitleReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupSpecialTitleReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.specialTitle != null && Object.hasOwnProperty.call(message, "specialTitle"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.specialTitle);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.duration);
            return writer;
        };

        /**
         * Encodes the specified SetGroupSpecialTitleReq message, length delimited. Does not implicitly {@link onebot.SetGroupSpecialTitleReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {onebot.ISetGroupSpecialTitleReq} message SetGroupSpecialTitleReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupSpecialTitleReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupSpecialTitleReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupSpecialTitleReq} SetGroupSpecialTitleReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupSpecialTitleReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupSpecialTitleReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.specialTitle = reader.string();
                    break;
                case 4:
                    message.duration = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupSpecialTitleReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupSpecialTitleReq} SetGroupSpecialTitleReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupSpecialTitleReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupSpecialTitleReq message.
         * @function verify
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupSpecialTitleReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.specialTitle != null && message.hasOwnProperty("specialTitle"))
                if (!$util.isString(message.specialTitle))
                    return "specialTitle: string expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))
                    return "duration: integer|Long expected";
            return null;
        };

        /**
         * Creates a SetGroupSpecialTitleReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupSpecialTitleReq} SetGroupSpecialTitleReq
         */
        SetGroupSpecialTitleReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupSpecialTitleReq)
                return object;
            var message = new $root.onebot.SetGroupSpecialTitleReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.specialTitle != null)
                message.specialTitle = String(object.specialTitle);
            if (object.duration != null)
                if ($util.Long)
                    (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;
                else if (typeof object.duration === "string")
                    message.duration = parseInt(object.duration, 10);
                else if (typeof object.duration === "number")
                    message.duration = object.duration;
                else if (typeof object.duration === "object")
                    message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SetGroupSpecialTitleReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupSpecialTitleReq
         * @static
         * @param {onebot.SetGroupSpecialTitleReq} message SetGroupSpecialTitleReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupSpecialTitleReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.specialTitle = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.duration = options.longs === String ? "0" : 0;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.specialTitle != null && message.hasOwnProperty("specialTitle"))
                object.specialTitle = message.specialTitle;
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (typeof message.duration === "number")
                    object.duration = options.longs === String ? String(message.duration) : message.duration;
                else
                    object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;
            return object;
        };

        /**
         * Converts this SetGroupSpecialTitleReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupSpecialTitleReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupSpecialTitleReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupSpecialTitleReq;
    })();

    onebot.SetGroupSpecialTitleResp = (function() {

        /**
         * Properties of a SetGroupSpecialTitleResp.
         * @memberof onebot
         * @interface ISetGroupSpecialTitleResp
         */

        /**
         * Constructs a new SetGroupSpecialTitleResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupSpecialTitleResp.
         * @implements ISetGroupSpecialTitleResp
         * @constructor
         * @param {onebot.ISetGroupSpecialTitleResp=} [properties] Properties to set
         */
        function SetGroupSpecialTitleResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupSpecialTitleResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {onebot.ISetGroupSpecialTitleResp=} [properties] Properties to set
         * @returns {onebot.SetGroupSpecialTitleResp} SetGroupSpecialTitleResp instance
         */
        SetGroupSpecialTitleResp.create = function create(properties) {
            return new SetGroupSpecialTitleResp(properties);
        };

        /**
         * Encodes the specified SetGroupSpecialTitleResp message. Does not implicitly {@link onebot.SetGroupSpecialTitleResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {onebot.ISetGroupSpecialTitleResp} message SetGroupSpecialTitleResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupSpecialTitleResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupSpecialTitleResp message, length delimited. Does not implicitly {@link onebot.SetGroupSpecialTitleResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {onebot.ISetGroupSpecialTitleResp} message SetGroupSpecialTitleResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupSpecialTitleResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupSpecialTitleResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupSpecialTitleResp} SetGroupSpecialTitleResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupSpecialTitleResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupSpecialTitleResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupSpecialTitleResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupSpecialTitleResp} SetGroupSpecialTitleResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupSpecialTitleResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupSpecialTitleResp message.
         * @function verify
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupSpecialTitleResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupSpecialTitleResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupSpecialTitleResp} SetGroupSpecialTitleResp
         */
        SetGroupSpecialTitleResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupSpecialTitleResp)
                return object;
            return new $root.onebot.SetGroupSpecialTitleResp();
        };

        /**
         * Creates a plain object from a SetGroupSpecialTitleResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupSpecialTitleResp
         * @static
         * @param {onebot.SetGroupSpecialTitleResp} message SetGroupSpecialTitleResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupSpecialTitleResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupSpecialTitleResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupSpecialTitleResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupSpecialTitleResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupSpecialTitleResp;
    })();

    onebot.SetFriendAddRequestReq = (function() {

        /**
         * Properties of a SetFriendAddRequestReq.
         * @memberof onebot
         * @interface ISetFriendAddRequestReq
         * @property {string|null} [flag] SetFriendAddRequestReq flag
         * @property {boolean|null} [approve] SetFriendAddRequestReq approve
         * @property {string|null} [remark] SetFriendAddRequestReq remark
         */

        /**
         * Constructs a new SetFriendAddRequestReq.
         * @memberof onebot
         * @classdesc Represents a SetFriendAddRequestReq.
         * @implements ISetFriendAddRequestReq
         * @constructor
         * @param {onebot.ISetFriendAddRequestReq=} [properties] Properties to set
         */
        function SetFriendAddRequestReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetFriendAddRequestReq flag.
         * @member {string} flag
         * @memberof onebot.SetFriendAddRequestReq
         * @instance
         */
        SetFriendAddRequestReq.prototype.flag = "";

        /**
         * SetFriendAddRequestReq approve.
         * @member {boolean} approve
         * @memberof onebot.SetFriendAddRequestReq
         * @instance
         */
        SetFriendAddRequestReq.prototype.approve = false;

        /**
         * SetFriendAddRequestReq remark.
         * @member {string} remark
         * @memberof onebot.SetFriendAddRequestReq
         * @instance
         */
        SetFriendAddRequestReq.prototype.remark = "";

        /**
         * Creates a new SetFriendAddRequestReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {onebot.ISetFriendAddRequestReq=} [properties] Properties to set
         * @returns {onebot.SetFriendAddRequestReq} SetFriendAddRequestReq instance
         */
        SetFriendAddRequestReq.create = function create(properties) {
            return new SetFriendAddRequestReq(properties);
        };

        /**
         * Encodes the specified SetFriendAddRequestReq message. Does not implicitly {@link onebot.SetFriendAddRequestReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {onebot.ISetFriendAddRequestReq} message SetFriendAddRequestReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetFriendAddRequestReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.flag);
            if (message.approve != null && Object.hasOwnProperty.call(message, "approve"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.approve);
            if (message.remark != null && Object.hasOwnProperty.call(message, "remark"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.remark);
            return writer;
        };

        /**
         * Encodes the specified SetFriendAddRequestReq message, length delimited. Does not implicitly {@link onebot.SetFriendAddRequestReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {onebot.ISetFriendAddRequestReq} message SetFriendAddRequestReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetFriendAddRequestReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetFriendAddRequestReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetFriendAddRequestReq} SetFriendAddRequestReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetFriendAddRequestReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetFriendAddRequestReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.flag = reader.string();
                    break;
                case 2:
                    message.approve = reader.bool();
                    break;
                case 3:
                    message.remark = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetFriendAddRequestReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetFriendAddRequestReq} SetFriendAddRequestReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetFriendAddRequestReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetFriendAddRequestReq message.
         * @function verify
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetFriendAddRequestReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (!$util.isString(message.flag))
                    return "flag: string expected";
            if (message.approve != null && message.hasOwnProperty("approve"))
                if (typeof message.approve !== "boolean")
                    return "approve: boolean expected";
            if (message.remark != null && message.hasOwnProperty("remark"))
                if (!$util.isString(message.remark))
                    return "remark: string expected";
            return null;
        };

        /**
         * Creates a SetFriendAddRequestReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetFriendAddRequestReq} SetFriendAddRequestReq
         */
        SetFriendAddRequestReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetFriendAddRequestReq)
                return object;
            var message = new $root.onebot.SetFriendAddRequestReq();
            if (object.flag != null)
                message.flag = String(object.flag);
            if (object.approve != null)
                message.approve = Boolean(object.approve);
            if (object.remark != null)
                message.remark = String(object.remark);
            return message;
        };

        /**
         * Creates a plain object from a SetFriendAddRequestReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetFriendAddRequestReq
         * @static
         * @param {onebot.SetFriendAddRequestReq} message SetFriendAddRequestReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetFriendAddRequestReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.flag = "";
                object.approve = false;
                object.remark = "";
            }
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            if (message.approve != null && message.hasOwnProperty("approve"))
                object.approve = message.approve;
            if (message.remark != null && message.hasOwnProperty("remark"))
                object.remark = message.remark;
            return object;
        };

        /**
         * Converts this SetFriendAddRequestReq to JSON.
         * @function toJSON
         * @memberof onebot.SetFriendAddRequestReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetFriendAddRequestReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetFriendAddRequestReq;
    })();

    onebot.SetFriendAddRequestResp = (function() {

        /**
         * Properties of a SetFriendAddRequestResp.
         * @memberof onebot
         * @interface ISetFriendAddRequestResp
         */

        /**
         * Constructs a new SetFriendAddRequestResp.
         * @memberof onebot
         * @classdesc Represents a SetFriendAddRequestResp.
         * @implements ISetFriendAddRequestResp
         * @constructor
         * @param {onebot.ISetFriendAddRequestResp=} [properties] Properties to set
         */
        function SetFriendAddRequestResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetFriendAddRequestResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {onebot.ISetFriendAddRequestResp=} [properties] Properties to set
         * @returns {onebot.SetFriendAddRequestResp} SetFriendAddRequestResp instance
         */
        SetFriendAddRequestResp.create = function create(properties) {
            return new SetFriendAddRequestResp(properties);
        };

        /**
         * Encodes the specified SetFriendAddRequestResp message. Does not implicitly {@link onebot.SetFriendAddRequestResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {onebot.ISetFriendAddRequestResp} message SetFriendAddRequestResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetFriendAddRequestResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetFriendAddRequestResp message, length delimited. Does not implicitly {@link onebot.SetFriendAddRequestResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {onebot.ISetFriendAddRequestResp} message SetFriendAddRequestResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetFriendAddRequestResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetFriendAddRequestResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetFriendAddRequestResp} SetFriendAddRequestResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetFriendAddRequestResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetFriendAddRequestResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetFriendAddRequestResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetFriendAddRequestResp} SetFriendAddRequestResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetFriendAddRequestResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetFriendAddRequestResp message.
         * @function verify
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetFriendAddRequestResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetFriendAddRequestResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetFriendAddRequestResp} SetFriendAddRequestResp
         */
        SetFriendAddRequestResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetFriendAddRequestResp)
                return object;
            return new $root.onebot.SetFriendAddRequestResp();
        };

        /**
         * Creates a plain object from a SetFriendAddRequestResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetFriendAddRequestResp
         * @static
         * @param {onebot.SetFriendAddRequestResp} message SetFriendAddRequestResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetFriendAddRequestResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetFriendAddRequestResp to JSON.
         * @function toJSON
         * @memberof onebot.SetFriendAddRequestResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetFriendAddRequestResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetFriendAddRequestResp;
    })();

    onebot.SetGroupAddRequestReq = (function() {

        /**
         * Properties of a SetGroupAddRequestReq.
         * @memberof onebot
         * @interface ISetGroupAddRequestReq
         * @property {string|null} [flag] SetGroupAddRequestReq flag
         * @property {string|null} [subType] SetGroupAddRequestReq subType
         * @property {string|null} [type] SetGroupAddRequestReq type
         * @property {boolean|null} [approve] SetGroupAddRequestReq approve
         * @property {string|null} [reason] SetGroupAddRequestReq reason
         */

        /**
         * Constructs a new SetGroupAddRequestReq.
         * @memberof onebot
         * @classdesc Represents a SetGroupAddRequestReq.
         * @implements ISetGroupAddRequestReq
         * @constructor
         * @param {onebot.ISetGroupAddRequestReq=} [properties] Properties to set
         */
        function SetGroupAddRequestReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetGroupAddRequestReq flag.
         * @member {string} flag
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         */
        SetGroupAddRequestReq.prototype.flag = "";

        /**
         * SetGroupAddRequestReq subType.
         * @member {string} subType
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         */
        SetGroupAddRequestReq.prototype.subType = "";

        /**
         * SetGroupAddRequestReq type.
         * @member {string} type
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         */
        SetGroupAddRequestReq.prototype.type = "";

        /**
         * SetGroupAddRequestReq approve.
         * @member {boolean} approve
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         */
        SetGroupAddRequestReq.prototype.approve = false;

        /**
         * SetGroupAddRequestReq reason.
         * @member {string} reason
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         */
        SetGroupAddRequestReq.prototype.reason = "";

        /**
         * Creates a new SetGroupAddRequestReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {onebot.ISetGroupAddRequestReq=} [properties] Properties to set
         * @returns {onebot.SetGroupAddRequestReq} SetGroupAddRequestReq instance
         */
        SetGroupAddRequestReq.create = function create(properties) {
            return new SetGroupAddRequestReq(properties);
        };

        /**
         * Encodes the specified SetGroupAddRequestReq message. Does not implicitly {@link onebot.SetGroupAddRequestReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {onebot.ISetGroupAddRequestReq} message SetGroupAddRequestReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAddRequestReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.flag);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.subType);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
            if (message.approve != null && Object.hasOwnProperty.call(message, "approve"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.approve);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified SetGroupAddRequestReq message, length delimited. Does not implicitly {@link onebot.SetGroupAddRequestReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {onebot.ISetGroupAddRequestReq} message SetGroupAddRequestReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAddRequestReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAddRequestReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAddRequestReq} SetGroupAddRequestReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAddRequestReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAddRequestReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.flag = reader.string();
                    break;
                case 2:
                    message.subType = reader.string();
                    break;
                case 3:
                    message.type = reader.string();
                    break;
                case 4:
                    message.approve = reader.bool();
                    break;
                case 5:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAddRequestReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAddRequestReq} SetGroupAddRequestReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAddRequestReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAddRequestReq message.
         * @function verify
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAddRequestReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (!$util.isString(message.flag))
                    return "flag: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            if (message.approve != null && message.hasOwnProperty("approve"))
                if (typeof message.approve !== "boolean")
                    return "approve: boolean expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a SetGroupAddRequestReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAddRequestReq} SetGroupAddRequestReq
         */
        SetGroupAddRequestReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAddRequestReq)
                return object;
            var message = new $root.onebot.SetGroupAddRequestReq();
            if (object.flag != null)
                message.flag = String(object.flag);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.type != null)
                message.type = String(object.type);
            if (object.approve != null)
                message.approve = Boolean(object.approve);
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a SetGroupAddRequestReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAddRequestReq
         * @static
         * @param {onebot.SetGroupAddRequestReq} message SetGroupAddRequestReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAddRequestReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.flag = "";
                object.subType = "";
                object.type = "";
                object.approve = false;
                object.reason = "";
            }
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.approve != null && message.hasOwnProperty("approve"))
                object.approve = message.approve;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this SetGroupAddRequestReq to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAddRequestReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAddRequestReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAddRequestReq;
    })();

    onebot.SetGroupAddRequestResp = (function() {

        /**
         * Properties of a SetGroupAddRequestResp.
         * @memberof onebot
         * @interface ISetGroupAddRequestResp
         */

        /**
         * Constructs a new SetGroupAddRequestResp.
         * @memberof onebot
         * @classdesc Represents a SetGroupAddRequestResp.
         * @implements ISetGroupAddRequestResp
         * @constructor
         * @param {onebot.ISetGroupAddRequestResp=} [properties] Properties to set
         */
        function SetGroupAddRequestResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetGroupAddRequestResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {onebot.ISetGroupAddRequestResp=} [properties] Properties to set
         * @returns {onebot.SetGroupAddRequestResp} SetGroupAddRequestResp instance
         */
        SetGroupAddRequestResp.create = function create(properties) {
            return new SetGroupAddRequestResp(properties);
        };

        /**
         * Encodes the specified SetGroupAddRequestResp message. Does not implicitly {@link onebot.SetGroupAddRequestResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {onebot.ISetGroupAddRequestResp} message SetGroupAddRequestResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAddRequestResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetGroupAddRequestResp message, length delimited. Does not implicitly {@link onebot.SetGroupAddRequestResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {onebot.ISetGroupAddRequestResp} message SetGroupAddRequestResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetGroupAddRequestResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetGroupAddRequestResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetGroupAddRequestResp} SetGroupAddRequestResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAddRequestResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetGroupAddRequestResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetGroupAddRequestResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetGroupAddRequestResp} SetGroupAddRequestResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetGroupAddRequestResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetGroupAddRequestResp message.
         * @function verify
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetGroupAddRequestResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetGroupAddRequestResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetGroupAddRequestResp} SetGroupAddRequestResp
         */
        SetGroupAddRequestResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetGroupAddRequestResp)
                return object;
            return new $root.onebot.SetGroupAddRequestResp();
        };

        /**
         * Creates a plain object from a SetGroupAddRequestResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetGroupAddRequestResp
         * @static
         * @param {onebot.SetGroupAddRequestResp} message SetGroupAddRequestResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetGroupAddRequestResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetGroupAddRequestResp to JSON.
         * @function toJSON
         * @memberof onebot.SetGroupAddRequestResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetGroupAddRequestResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetGroupAddRequestResp;
    })();

    onebot.GetLoginInfoReq = (function() {

        /**
         * Properties of a GetLoginInfoReq.
         * @memberof onebot
         * @interface IGetLoginInfoReq
         */

        /**
         * Constructs a new GetLoginInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetLoginInfoReq.
         * @implements IGetLoginInfoReq
         * @constructor
         * @param {onebot.IGetLoginInfoReq=} [properties] Properties to set
         */
        function GetLoginInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetLoginInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {onebot.IGetLoginInfoReq=} [properties] Properties to set
         * @returns {onebot.GetLoginInfoReq} GetLoginInfoReq instance
         */
        GetLoginInfoReq.create = function create(properties) {
            return new GetLoginInfoReq(properties);
        };

        /**
         * Encodes the specified GetLoginInfoReq message. Does not implicitly {@link onebot.GetLoginInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {onebot.IGetLoginInfoReq} message GetLoginInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetLoginInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetLoginInfoReq message, length delimited. Does not implicitly {@link onebot.GetLoginInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {onebot.IGetLoginInfoReq} message GetLoginInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetLoginInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetLoginInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetLoginInfoReq} GetLoginInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetLoginInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetLoginInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetLoginInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetLoginInfoReq} GetLoginInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetLoginInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetLoginInfoReq message.
         * @function verify
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetLoginInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetLoginInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetLoginInfoReq} GetLoginInfoReq
         */
        GetLoginInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetLoginInfoReq)
                return object;
            return new $root.onebot.GetLoginInfoReq();
        };

        /**
         * Creates a plain object from a GetLoginInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetLoginInfoReq
         * @static
         * @param {onebot.GetLoginInfoReq} message GetLoginInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetLoginInfoReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetLoginInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetLoginInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetLoginInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLoginInfoReq;
    })();

    onebot.GetLoginInfoResp = (function() {

        /**
         * Properties of a GetLoginInfoResp.
         * @memberof onebot
         * @interface IGetLoginInfoResp
         * @property {Long|null} [userId] GetLoginInfoResp userId
         * @property {string|null} [nickname] GetLoginInfoResp nickname
         */

        /**
         * Constructs a new GetLoginInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetLoginInfoResp.
         * @implements IGetLoginInfoResp
         * @constructor
         * @param {onebot.IGetLoginInfoResp=} [properties] Properties to set
         */
        function GetLoginInfoResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetLoginInfoResp userId.
         * @member {Long} userId
         * @memberof onebot.GetLoginInfoResp
         * @instance
         */
        GetLoginInfoResp.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetLoginInfoResp nickname.
         * @member {string} nickname
         * @memberof onebot.GetLoginInfoResp
         * @instance
         */
        GetLoginInfoResp.prototype.nickname = "";

        /**
         * Creates a new GetLoginInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {onebot.IGetLoginInfoResp=} [properties] Properties to set
         * @returns {onebot.GetLoginInfoResp} GetLoginInfoResp instance
         */
        GetLoginInfoResp.create = function create(properties) {
            return new GetLoginInfoResp(properties);
        };

        /**
         * Encodes the specified GetLoginInfoResp message. Does not implicitly {@link onebot.GetLoginInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {onebot.IGetLoginInfoResp} message GetLoginInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetLoginInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            return writer;
        };

        /**
         * Encodes the specified GetLoginInfoResp message, length delimited. Does not implicitly {@link onebot.GetLoginInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {onebot.IGetLoginInfoResp} message GetLoginInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetLoginInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetLoginInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetLoginInfoResp} GetLoginInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetLoginInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetLoginInfoResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int64();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetLoginInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetLoginInfoResp} GetLoginInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetLoginInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetLoginInfoResp message.
         * @function verify
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetLoginInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            return null;
        };

        /**
         * Creates a GetLoginInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetLoginInfoResp} GetLoginInfoResp
         */
        GetLoginInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetLoginInfoResp)
                return object;
            var message = new $root.onebot.GetLoginInfoResp();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            return message;
        };

        /**
         * Creates a plain object from a GetLoginInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetLoginInfoResp
         * @static
         * @param {onebot.GetLoginInfoResp} message GetLoginInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetLoginInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.nickname = "";
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            return object;
        };

        /**
         * Converts this GetLoginInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetLoginInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetLoginInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetLoginInfoResp;
    })();

    onebot.GetStrangerInfoReq = (function() {

        /**
         * Properties of a GetStrangerInfoReq.
         * @memberof onebot
         * @interface IGetStrangerInfoReq
         * @property {Long|null} [userId] GetStrangerInfoReq userId
         * @property {boolean|null} [noCache] GetStrangerInfoReq noCache
         */

        /**
         * Constructs a new GetStrangerInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetStrangerInfoReq.
         * @implements IGetStrangerInfoReq
         * @constructor
         * @param {onebot.IGetStrangerInfoReq=} [properties] Properties to set
         */
        function GetStrangerInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetStrangerInfoReq userId.
         * @member {Long} userId
         * @memberof onebot.GetStrangerInfoReq
         * @instance
         */
        GetStrangerInfoReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetStrangerInfoReq noCache.
         * @member {boolean} noCache
         * @memberof onebot.GetStrangerInfoReq
         * @instance
         */
        GetStrangerInfoReq.prototype.noCache = false;

        /**
         * Creates a new GetStrangerInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {onebot.IGetStrangerInfoReq=} [properties] Properties to set
         * @returns {onebot.GetStrangerInfoReq} GetStrangerInfoReq instance
         */
        GetStrangerInfoReq.create = function create(properties) {
            return new GetStrangerInfoReq(properties);
        };

        /**
         * Encodes the specified GetStrangerInfoReq message. Does not implicitly {@link onebot.GetStrangerInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {onebot.IGetStrangerInfoReq} message GetStrangerInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStrangerInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
            if (message.noCache != null && Object.hasOwnProperty.call(message, "noCache"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noCache);
            return writer;
        };

        /**
         * Encodes the specified GetStrangerInfoReq message, length delimited. Does not implicitly {@link onebot.GetStrangerInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {onebot.IGetStrangerInfoReq} message GetStrangerInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStrangerInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetStrangerInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetStrangerInfoReq} GetStrangerInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStrangerInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetStrangerInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int64();
                    break;
                case 2:
                    message.noCache = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetStrangerInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetStrangerInfoReq} GetStrangerInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStrangerInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetStrangerInfoReq message.
         * @function verify
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetStrangerInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                if (typeof message.noCache !== "boolean")
                    return "noCache: boolean expected";
            return null;
        };

        /**
         * Creates a GetStrangerInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetStrangerInfoReq} GetStrangerInfoReq
         */
        GetStrangerInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetStrangerInfoReq)
                return object;
            var message = new $root.onebot.GetStrangerInfoReq();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.noCache != null)
                message.noCache = Boolean(object.noCache);
            return message;
        };

        /**
         * Creates a plain object from a GetStrangerInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetStrangerInfoReq
         * @static
         * @param {onebot.GetStrangerInfoReq} message GetStrangerInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetStrangerInfoReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.noCache = false;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                object.noCache = message.noCache;
            return object;
        };

        /**
         * Converts this GetStrangerInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetStrangerInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetStrangerInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetStrangerInfoReq;
    })();

    onebot.GetStrangerInfoResp = (function() {

        /**
         * Properties of a GetStrangerInfoResp.
         * @memberof onebot
         * @interface IGetStrangerInfoResp
         * @property {Long|null} [userId] GetStrangerInfoResp userId
         * @property {string|null} [nickname] GetStrangerInfoResp nickname
         * @property {string|null} [sex] GetStrangerInfoResp sex
         * @property {number|null} [age] GetStrangerInfoResp age
         * @property {number|null} [level] GetStrangerInfoResp level
         * @property {Long|null} [loginDays] GetStrangerInfoResp loginDays
         */

        /**
         * Constructs a new GetStrangerInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetStrangerInfoResp.
         * @implements IGetStrangerInfoResp
         * @constructor
         * @param {onebot.IGetStrangerInfoResp=} [properties] Properties to set
         */
        function GetStrangerInfoResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetStrangerInfoResp userId.
         * @member {Long} userId
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetStrangerInfoResp nickname.
         * @member {string} nickname
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.nickname = "";

        /**
         * GetStrangerInfoResp sex.
         * @member {string} sex
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.sex = "";

        /**
         * GetStrangerInfoResp age.
         * @member {number} age
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.age = 0;

        /**
         * GetStrangerInfoResp level.
         * @member {number} level
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.level = 0;

        /**
         * GetStrangerInfoResp loginDays.
         * @member {Long} loginDays
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         */
        GetStrangerInfoResp.prototype.loginDays = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GetStrangerInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {onebot.IGetStrangerInfoResp=} [properties] Properties to set
         * @returns {onebot.GetStrangerInfoResp} GetStrangerInfoResp instance
         */
        GetStrangerInfoResp.create = function create(properties) {
            return new GetStrangerInfoResp(properties);
        };

        /**
         * Encodes the specified GetStrangerInfoResp message. Does not implicitly {@link onebot.GetStrangerInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {onebot.IGetStrangerInfoResp} message GetStrangerInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStrangerInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sex);
            if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.age);
            if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.level);
            if (message.loginDays != null && Object.hasOwnProperty.call(message, "loginDays"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.loginDays);
            return writer;
        };

        /**
         * Encodes the specified GetStrangerInfoResp message, length delimited. Does not implicitly {@link onebot.GetStrangerInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {onebot.IGetStrangerInfoResp} message GetStrangerInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStrangerInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetStrangerInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetStrangerInfoResp} GetStrangerInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStrangerInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetStrangerInfoResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int64();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.sex = reader.string();
                    break;
                case 4:
                    message.age = reader.int32();
                    break;
                case 5:
                    message.level = reader.int32();
                    break;
                case 6:
                    message.loginDays = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetStrangerInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetStrangerInfoResp} GetStrangerInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStrangerInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetStrangerInfoResp message.
         * @function verify
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetStrangerInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isString(message.sex))
                    return "sex: string expected";
            if (message.age != null && message.hasOwnProperty("age"))
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.loginDays != null && message.hasOwnProperty("loginDays"))
                if (!$util.isInteger(message.loginDays) && !(message.loginDays && $util.isInteger(message.loginDays.low) && $util.isInteger(message.loginDays.high)))
                    return "loginDays: integer|Long expected";
            return null;
        };

        /**
         * Creates a GetStrangerInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetStrangerInfoResp} GetStrangerInfoResp
         */
        GetStrangerInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetStrangerInfoResp)
                return object;
            var message = new $root.onebot.GetStrangerInfoResp();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.sex != null)
                message.sex = String(object.sex);
            if (object.age != null)
                message.age = object.age | 0;
            if (object.level != null)
                message.level = object.level | 0;
            if (object.loginDays != null)
                if ($util.Long)
                    (message.loginDays = $util.Long.fromValue(object.loginDays)).unsigned = false;
                else if (typeof object.loginDays === "string")
                    message.loginDays = parseInt(object.loginDays, 10);
                else if (typeof object.loginDays === "number")
                    message.loginDays = object.loginDays;
                else if (typeof object.loginDays === "object")
                    message.loginDays = new $util.LongBits(object.loginDays.low >>> 0, object.loginDays.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GetStrangerInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetStrangerInfoResp
         * @static
         * @param {onebot.GetStrangerInfoResp} message GetStrangerInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetStrangerInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.nickname = "";
                object.sex = "";
                object.age = 0;
                object.level = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.loginDays = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.loginDays = options.longs === String ? "0" : 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.age != null && message.hasOwnProperty("age"))
                object.age = message.age;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.loginDays != null && message.hasOwnProperty("loginDays"))
                if (typeof message.loginDays === "number")
                    object.loginDays = options.longs === String ? String(message.loginDays) : message.loginDays;
                else
                    object.loginDays = options.longs === String ? $util.Long.prototype.toString.call(message.loginDays) : options.longs === Number ? new $util.LongBits(message.loginDays.low >>> 0, message.loginDays.high >>> 0).toNumber() : message.loginDays;
            return object;
        };

        /**
         * Converts this GetStrangerInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetStrangerInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetStrangerInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetStrangerInfoResp;
    })();

    onebot.GetFriendListReq = (function() {

        /**
         * Properties of a GetFriendListReq.
         * @memberof onebot
         * @interface IGetFriendListReq
         */

        /**
         * Constructs a new GetFriendListReq.
         * @memberof onebot
         * @classdesc Represents a GetFriendListReq.
         * @implements IGetFriendListReq
         * @constructor
         * @param {onebot.IGetFriendListReq=} [properties] Properties to set
         */
        function GetFriendListReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetFriendListReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {onebot.IGetFriendListReq=} [properties] Properties to set
         * @returns {onebot.GetFriendListReq} GetFriendListReq instance
         */
        GetFriendListReq.create = function create(properties) {
            return new GetFriendListReq(properties);
        };

        /**
         * Encodes the specified GetFriendListReq message. Does not implicitly {@link onebot.GetFriendListReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {onebot.IGetFriendListReq} message GetFriendListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetFriendListReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetFriendListReq message, length delimited. Does not implicitly {@link onebot.GetFriendListReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {onebot.IGetFriendListReq} message GetFriendListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetFriendListReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetFriendListReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetFriendListReq} GetFriendListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetFriendListReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetFriendListReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetFriendListReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetFriendListReq} GetFriendListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetFriendListReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetFriendListReq message.
         * @function verify
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetFriendListReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetFriendListReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetFriendListReq} GetFriendListReq
         */
        GetFriendListReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetFriendListReq)
                return object;
            return new $root.onebot.GetFriendListReq();
        };

        /**
         * Creates a plain object from a GetFriendListReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetFriendListReq
         * @static
         * @param {onebot.GetFriendListReq} message GetFriendListReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetFriendListReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetFriendListReq to JSON.
         * @function toJSON
         * @memberof onebot.GetFriendListReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetFriendListReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetFriendListReq;
    })();

    onebot.GetFriendListResp = (function() {

        /**
         * Properties of a GetFriendListResp.
         * @memberof onebot
         * @interface IGetFriendListResp
         * @property {Array.<onebot.GetFriendListResp.IFriend>|null} [friend] GetFriendListResp friend
         */

        /**
         * Constructs a new GetFriendListResp.
         * @memberof onebot
         * @classdesc Represents a GetFriendListResp.
         * @implements IGetFriendListResp
         * @constructor
         * @param {onebot.IGetFriendListResp=} [properties] Properties to set
         */
        function GetFriendListResp(properties) {
            this.friend = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetFriendListResp friend.
         * @member {Array.<onebot.GetFriendListResp.IFriend>} friend
         * @memberof onebot.GetFriendListResp
         * @instance
         */
        GetFriendListResp.prototype.friend = $util.emptyArray;

        /**
         * Creates a new GetFriendListResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {onebot.IGetFriendListResp=} [properties] Properties to set
         * @returns {onebot.GetFriendListResp} GetFriendListResp instance
         */
        GetFriendListResp.create = function create(properties) {
            return new GetFriendListResp(properties);
        };

        /**
         * Encodes the specified GetFriendListResp message. Does not implicitly {@link onebot.GetFriendListResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {onebot.IGetFriendListResp} message GetFriendListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetFriendListResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.friend != null && message.friend.length)
                for (var i = 0; i < message.friend.length; ++i)
                    $root.onebot.GetFriendListResp.Friend.encode(message.friend[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetFriendListResp message, length delimited. Does not implicitly {@link onebot.GetFriendListResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {onebot.IGetFriendListResp} message GetFriendListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetFriendListResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetFriendListResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetFriendListResp} GetFriendListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetFriendListResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetFriendListResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.friend && message.friend.length))
                        message.friend = [];
                    message.friend.push($root.onebot.GetFriendListResp.Friend.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetFriendListResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetFriendListResp} GetFriendListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetFriendListResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetFriendListResp message.
         * @function verify
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetFriendListResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.friend != null && message.hasOwnProperty("friend")) {
                if (!Array.isArray(message.friend))
                    return "friend: array expected";
                for (var i = 0; i < message.friend.length; ++i) {
                    var error = $root.onebot.GetFriendListResp.Friend.verify(message.friend[i]);
                    if (error)
                        return "friend." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GetFriendListResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetFriendListResp} GetFriendListResp
         */
        GetFriendListResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetFriendListResp)
                return object;
            var message = new $root.onebot.GetFriendListResp();
            if (object.friend) {
                if (!Array.isArray(object.friend))
                    throw TypeError(".onebot.GetFriendListResp.friend: array expected");
                message.friend = [];
                for (var i = 0; i < object.friend.length; ++i) {
                    if (typeof object.friend[i] !== "object")
                        throw TypeError(".onebot.GetFriendListResp.friend: object expected");
                    message.friend[i] = $root.onebot.GetFriendListResp.Friend.fromObject(object.friend[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GetFriendListResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetFriendListResp
         * @static
         * @param {onebot.GetFriendListResp} message GetFriendListResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetFriendListResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.friend = [];
            if (message.friend && message.friend.length) {
                object.friend = [];
                for (var j = 0; j < message.friend.length; ++j)
                    object.friend[j] = $root.onebot.GetFriendListResp.Friend.toObject(message.friend[j], options);
            }
            return object;
        };

        /**
         * Converts this GetFriendListResp to JSON.
         * @function toJSON
         * @memberof onebot.GetFriendListResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetFriendListResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetFriendListResp.Friend = (function() {

            /**
             * Properties of a Friend.
             * @memberof onebot.GetFriendListResp
             * @interface IFriend
             * @property {Long|null} [userId] Friend userId
             * @property {string|null} [nickname] Friend nickname
             * @property {string|null} [remark] Friend remark
             */

            /**
             * Constructs a new Friend.
             * @memberof onebot.GetFriendListResp
             * @classdesc Represents a Friend.
             * @implements IFriend
             * @constructor
             * @param {onebot.GetFriendListResp.IFriend=} [properties] Properties to set
             */
            function Friend(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Friend userId.
             * @member {Long} userId
             * @memberof onebot.GetFriendListResp.Friend
             * @instance
             */
            Friend.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Friend nickname.
             * @member {string} nickname
             * @memberof onebot.GetFriendListResp.Friend
             * @instance
             */
            Friend.prototype.nickname = "";

            /**
             * Friend remark.
             * @member {string} remark
             * @memberof onebot.GetFriendListResp.Friend
             * @instance
             */
            Friend.prototype.remark = "";

            /**
             * Creates a new Friend instance using the specified properties.
             * @function create
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {onebot.GetFriendListResp.IFriend=} [properties] Properties to set
             * @returns {onebot.GetFriendListResp.Friend} Friend instance
             */
            Friend.create = function create(properties) {
                return new Friend(properties);
            };

            /**
             * Encodes the specified Friend message. Does not implicitly {@link onebot.GetFriendListResp.Friend.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {onebot.GetFriendListResp.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.remark != null && Object.hasOwnProperty.call(message, "remark"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.remark);
                return writer;
            };

            /**
             * Encodes the specified Friend message, length delimited. Does not implicitly {@link onebot.GetFriendListResp.Friend.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {onebot.GetFriendListResp.IFriend} message Friend message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Friend.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Friend message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetFriendListResp.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetFriendListResp.Friend();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.remark = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Friend message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetFriendListResp.Friend} Friend
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Friend.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Friend message.
             * @function verify
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Friend.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.remark != null && message.hasOwnProperty("remark"))
                    if (!$util.isString(message.remark))
                        return "remark: string expected";
                return null;
            };

            /**
             * Creates a Friend message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetFriendListResp.Friend} Friend
             */
            Friend.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetFriendListResp.Friend)
                    return object;
                var message = new $root.onebot.GetFriendListResp.Friend();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.remark != null)
                    message.remark = String(object.remark);
                return message;
            };

            /**
             * Creates a plain object from a Friend message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetFriendListResp.Friend
             * @static
             * @param {onebot.GetFriendListResp.Friend} message Friend
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Friend.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.remark = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.remark != null && message.hasOwnProperty("remark"))
                    object.remark = message.remark;
                return object;
            };

            /**
             * Converts this Friend to JSON.
             * @function toJSON
             * @memberof onebot.GetFriendListResp.Friend
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Friend.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Friend;
        })();

        return GetFriendListResp;
    })();

    onebot.GetGroupInfoReq = (function() {

        /**
         * Properties of a GetGroupInfoReq.
         * @memberof onebot
         * @interface IGetGroupInfoReq
         * @property {Long|null} [groupId] GetGroupInfoReq groupId
         * @property {boolean|null} [noCache] GetGroupInfoReq noCache
         */

        /**
         * Constructs a new GetGroupInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetGroupInfoReq.
         * @implements IGetGroupInfoReq
         * @constructor
         * @param {onebot.IGetGroupInfoReq=} [properties] Properties to set
         */
        function GetGroupInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupInfoReq groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupInfoReq
         * @instance
         */
        GetGroupInfoReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupInfoReq noCache.
         * @member {boolean} noCache
         * @memberof onebot.GetGroupInfoReq
         * @instance
         */
        GetGroupInfoReq.prototype.noCache = false;

        /**
         * Creates a new GetGroupInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {onebot.IGetGroupInfoReq=} [properties] Properties to set
         * @returns {onebot.GetGroupInfoReq} GetGroupInfoReq instance
         */
        GetGroupInfoReq.create = function create(properties) {
            return new GetGroupInfoReq(properties);
        };

        /**
         * Encodes the specified GetGroupInfoReq message. Does not implicitly {@link onebot.GetGroupInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {onebot.IGetGroupInfoReq} message GetGroupInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.noCache != null && Object.hasOwnProperty.call(message, "noCache"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noCache);
            return writer;
        };

        /**
         * Encodes the specified GetGroupInfoReq message, length delimited. Does not implicitly {@link onebot.GetGroupInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {onebot.IGetGroupInfoReq} message GetGroupInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupInfoReq} GetGroupInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.noCache = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupInfoReq} GetGroupInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupInfoReq message.
         * @function verify
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                if (typeof message.noCache !== "boolean")
                    return "noCache: boolean expected";
            return null;
        };

        /**
         * Creates a GetGroupInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupInfoReq} GetGroupInfoReq
         */
        GetGroupInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupInfoReq)
                return object;
            var message = new $root.onebot.GetGroupInfoReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.noCache != null)
                message.noCache = Boolean(object.noCache);
            return message;
        };

        /**
         * Creates a plain object from a GetGroupInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupInfoReq
         * @static
         * @param {onebot.GetGroupInfoReq} message GetGroupInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupInfoReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.noCache = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                object.noCache = message.noCache;
            return object;
        };

        /**
         * Converts this GetGroupInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupInfoReq;
    })();

    onebot.GetGroupInfoResp = (function() {

        /**
         * Properties of a GetGroupInfoResp.
         * @memberof onebot
         * @interface IGetGroupInfoResp
         * @property {Long|null} [groupId] GetGroupInfoResp groupId
         * @property {string|null} [groupName] GetGroupInfoResp groupName
         * @property {number|null} [memberCount] GetGroupInfoResp memberCount
         * @property {number|null} [maxMemberCount] GetGroupInfoResp maxMemberCount
         */

        /**
         * Constructs a new GetGroupInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetGroupInfoResp.
         * @implements IGetGroupInfoResp
         * @constructor
         * @param {onebot.IGetGroupInfoResp=} [properties] Properties to set
         */
        function GetGroupInfoResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupInfoResp groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupInfoResp
         * @instance
         */
        GetGroupInfoResp.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupInfoResp groupName.
         * @member {string} groupName
         * @memberof onebot.GetGroupInfoResp
         * @instance
         */
        GetGroupInfoResp.prototype.groupName = "";

        /**
         * GetGroupInfoResp memberCount.
         * @member {number} memberCount
         * @memberof onebot.GetGroupInfoResp
         * @instance
         */
        GetGroupInfoResp.prototype.memberCount = 0;

        /**
         * GetGroupInfoResp maxMemberCount.
         * @member {number} maxMemberCount
         * @memberof onebot.GetGroupInfoResp
         * @instance
         */
        GetGroupInfoResp.prototype.maxMemberCount = 0;

        /**
         * Creates a new GetGroupInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {onebot.IGetGroupInfoResp=} [properties] Properties to set
         * @returns {onebot.GetGroupInfoResp} GetGroupInfoResp instance
         */
        GetGroupInfoResp.create = function create(properties) {
            return new GetGroupInfoResp(properties);
        };

        /**
         * Encodes the specified GetGroupInfoResp message. Does not implicitly {@link onebot.GetGroupInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {onebot.IGetGroupInfoResp} message GetGroupInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.groupName != null && Object.hasOwnProperty.call(message, "groupName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupName);
            if (message.memberCount != null && Object.hasOwnProperty.call(message, "memberCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.memberCount);
            if (message.maxMemberCount != null && Object.hasOwnProperty.call(message, "maxMemberCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxMemberCount);
            return writer;
        };

        /**
         * Encodes the specified GetGroupInfoResp message, length delimited. Does not implicitly {@link onebot.GetGroupInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {onebot.IGetGroupInfoResp} message GetGroupInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupInfoResp} GetGroupInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupInfoResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.memberCount = reader.int32();
                    break;
                case 4:
                    message.maxMemberCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupInfoResp} GetGroupInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupInfoResp message.
         * @function verify
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                if (!$util.isString(message.groupName))
                    return "groupName: string expected";
            if (message.memberCount != null && message.hasOwnProperty("memberCount"))
                if (!$util.isInteger(message.memberCount))
                    return "memberCount: integer expected";
            if (message.maxMemberCount != null && message.hasOwnProperty("maxMemberCount"))
                if (!$util.isInteger(message.maxMemberCount))
                    return "maxMemberCount: integer expected";
            return null;
        };

        /**
         * Creates a GetGroupInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupInfoResp} GetGroupInfoResp
         */
        GetGroupInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupInfoResp)
                return object;
            var message = new $root.onebot.GetGroupInfoResp();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.groupName != null)
                message.groupName = String(object.groupName);
            if (object.memberCount != null)
                message.memberCount = object.memberCount | 0;
            if (object.maxMemberCount != null)
                message.maxMemberCount = object.maxMemberCount | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetGroupInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupInfoResp
         * @static
         * @param {onebot.GetGroupInfoResp} message GetGroupInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.groupName = "";
                object.memberCount = 0;
                object.maxMemberCount = 0;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.groupName != null && message.hasOwnProperty("groupName"))
                object.groupName = message.groupName;
            if (message.memberCount != null && message.hasOwnProperty("memberCount"))
                object.memberCount = message.memberCount;
            if (message.maxMemberCount != null && message.hasOwnProperty("maxMemberCount"))
                object.maxMemberCount = message.maxMemberCount;
            return object;
        };

        /**
         * Converts this GetGroupInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupInfoResp;
    })();

    onebot.GetGroupListReq = (function() {

        /**
         * Properties of a GetGroupListReq.
         * @memberof onebot
         * @interface IGetGroupListReq
         */

        /**
         * Constructs a new GetGroupListReq.
         * @memberof onebot
         * @classdesc Represents a GetGroupListReq.
         * @implements IGetGroupListReq
         * @constructor
         * @param {onebot.IGetGroupListReq=} [properties] Properties to set
         */
        function GetGroupListReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetGroupListReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {onebot.IGetGroupListReq=} [properties] Properties to set
         * @returns {onebot.GetGroupListReq} GetGroupListReq instance
         */
        GetGroupListReq.create = function create(properties) {
            return new GetGroupListReq(properties);
        };

        /**
         * Encodes the specified GetGroupListReq message. Does not implicitly {@link onebot.GetGroupListReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {onebot.IGetGroupListReq} message GetGroupListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupListReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetGroupListReq message, length delimited. Does not implicitly {@link onebot.GetGroupListReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {onebot.IGetGroupListReq} message GetGroupListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupListReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupListReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupListReq} GetGroupListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupListReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupListReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupListReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupListReq} GetGroupListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupListReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupListReq message.
         * @function verify
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupListReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetGroupListReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupListReq} GetGroupListReq
         */
        GetGroupListReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupListReq)
                return object;
            return new $root.onebot.GetGroupListReq();
        };

        /**
         * Creates a plain object from a GetGroupListReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupListReq
         * @static
         * @param {onebot.GetGroupListReq} message GetGroupListReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupListReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetGroupListReq to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupListReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupListReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupListReq;
    })();

    onebot.GetGroupListResp = (function() {

        /**
         * Properties of a GetGroupListResp.
         * @memberof onebot
         * @interface IGetGroupListResp
         * @property {Array.<onebot.GetGroupListResp.IGroup>|null} [group] GetGroupListResp group
         */

        /**
         * Constructs a new GetGroupListResp.
         * @memberof onebot
         * @classdesc Represents a GetGroupListResp.
         * @implements IGetGroupListResp
         * @constructor
         * @param {onebot.IGetGroupListResp=} [properties] Properties to set
         */
        function GetGroupListResp(properties) {
            this.group = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupListResp group.
         * @member {Array.<onebot.GetGroupListResp.IGroup>} group
         * @memberof onebot.GetGroupListResp
         * @instance
         */
        GetGroupListResp.prototype.group = $util.emptyArray;

        /**
         * Creates a new GetGroupListResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {onebot.IGetGroupListResp=} [properties] Properties to set
         * @returns {onebot.GetGroupListResp} GetGroupListResp instance
         */
        GetGroupListResp.create = function create(properties) {
            return new GetGroupListResp(properties);
        };

        /**
         * Encodes the specified GetGroupListResp message. Does not implicitly {@link onebot.GetGroupListResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {onebot.IGetGroupListResp} message GetGroupListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupListResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.group != null && message.group.length)
                for (var i = 0; i < message.group.length; ++i)
                    $root.onebot.GetGroupListResp.Group.encode(message.group[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetGroupListResp message, length delimited. Does not implicitly {@link onebot.GetGroupListResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {onebot.IGetGroupListResp} message GetGroupListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupListResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupListResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupListResp} GetGroupListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupListResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupListResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.group && message.group.length))
                        message.group = [];
                    message.group.push($root.onebot.GetGroupListResp.Group.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupListResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupListResp} GetGroupListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupListResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupListResp message.
         * @function verify
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupListResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.group != null && message.hasOwnProperty("group")) {
                if (!Array.isArray(message.group))
                    return "group: array expected";
                for (var i = 0; i < message.group.length; ++i) {
                    var error = $root.onebot.GetGroupListResp.Group.verify(message.group[i]);
                    if (error)
                        return "group." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GetGroupListResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupListResp} GetGroupListResp
         */
        GetGroupListResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupListResp)
                return object;
            var message = new $root.onebot.GetGroupListResp();
            if (object.group) {
                if (!Array.isArray(object.group))
                    throw TypeError(".onebot.GetGroupListResp.group: array expected");
                message.group = [];
                for (var i = 0; i < object.group.length; ++i) {
                    if (typeof object.group[i] !== "object")
                        throw TypeError(".onebot.GetGroupListResp.group: object expected");
                    message.group[i] = $root.onebot.GetGroupListResp.Group.fromObject(object.group[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GetGroupListResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupListResp
         * @static
         * @param {onebot.GetGroupListResp} message GetGroupListResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupListResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.group = [];
            if (message.group && message.group.length) {
                object.group = [];
                for (var j = 0; j < message.group.length; ++j)
                    object.group[j] = $root.onebot.GetGroupListResp.Group.toObject(message.group[j], options);
            }
            return object;
        };

        /**
         * Converts this GetGroupListResp to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupListResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupListResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetGroupListResp.Group = (function() {

            /**
             * Properties of a Group.
             * @memberof onebot.GetGroupListResp
             * @interface IGroup
             * @property {Long|null} [groupId] Group groupId
             * @property {string|null} [groupName] Group groupName
             * @property {number|null} [memberCount] Group memberCount
             * @property {number|null} [maxMemberCount] Group maxMemberCount
             */

            /**
             * Constructs a new Group.
             * @memberof onebot.GetGroupListResp
             * @classdesc Represents a Group.
             * @implements IGroup
             * @constructor
             * @param {onebot.GetGroupListResp.IGroup=} [properties] Properties to set
             */
            function Group(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Group groupId.
             * @member {Long} groupId
             * @memberof onebot.GetGroupListResp.Group
             * @instance
             */
            Group.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Group groupName.
             * @member {string} groupName
             * @memberof onebot.GetGroupListResp.Group
             * @instance
             */
            Group.prototype.groupName = "";

            /**
             * Group memberCount.
             * @member {number} memberCount
             * @memberof onebot.GetGroupListResp.Group
             * @instance
             */
            Group.prototype.memberCount = 0;

            /**
             * Group maxMemberCount.
             * @member {number} maxMemberCount
             * @memberof onebot.GetGroupListResp.Group
             * @instance
             */
            Group.prototype.maxMemberCount = 0;

            /**
             * Creates a new Group instance using the specified properties.
             * @function create
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {onebot.GetGroupListResp.IGroup=} [properties] Properties to set
             * @returns {onebot.GetGroupListResp.Group} Group instance
             */
            Group.create = function create(properties) {
                return new Group(properties);
            };

            /**
             * Encodes the specified Group message. Does not implicitly {@link onebot.GetGroupListResp.Group.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {onebot.GetGroupListResp.IGroup} message Group message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Group.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                if (message.groupName != null && Object.hasOwnProperty.call(message, "groupName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupName);
                if (message.memberCount != null && Object.hasOwnProperty.call(message, "memberCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.memberCount);
                if (message.maxMemberCount != null && Object.hasOwnProperty.call(message, "maxMemberCount"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxMemberCount);
                return writer;
            };

            /**
             * Encodes the specified Group message, length delimited. Does not implicitly {@link onebot.GetGroupListResp.Group.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {onebot.GetGroupListResp.IGroup} message Group message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Group.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Group message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetGroupListResp.Group} Group
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Group.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupListResp.Group();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.groupId = reader.int64();
                        break;
                    case 2:
                        message.groupName = reader.string();
                        break;
                    case 3:
                        message.memberCount = reader.int32();
                        break;
                    case 4:
                        message.maxMemberCount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Group message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetGroupListResp.Group} Group
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Group.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Group message.
             * @function verify
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Group.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                        return "groupId: integer|Long expected";
                if (message.groupName != null && message.hasOwnProperty("groupName"))
                    if (!$util.isString(message.groupName))
                        return "groupName: string expected";
                if (message.memberCount != null && message.hasOwnProperty("memberCount"))
                    if (!$util.isInteger(message.memberCount))
                        return "memberCount: integer expected";
                if (message.maxMemberCount != null && message.hasOwnProperty("maxMemberCount"))
                    if (!$util.isInteger(message.maxMemberCount))
                        return "maxMemberCount: integer expected";
                return null;
            };

            /**
             * Creates a Group message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetGroupListResp.Group} Group
             */
            Group.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetGroupListResp.Group)
                    return object;
                var message = new $root.onebot.GetGroupListResp.Group();
                if (object.groupId != null)
                    if ($util.Long)
                        (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                    else if (typeof object.groupId === "string")
                        message.groupId = parseInt(object.groupId, 10);
                    else if (typeof object.groupId === "number")
                        message.groupId = object.groupId;
                    else if (typeof object.groupId === "object")
                        message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
                if (object.groupName != null)
                    message.groupName = String(object.groupName);
                if (object.memberCount != null)
                    message.memberCount = object.memberCount | 0;
                if (object.maxMemberCount != null)
                    message.maxMemberCount = object.maxMemberCount | 0;
                return message;
            };

            /**
             * Creates a plain object from a Group message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetGroupListResp.Group
             * @static
             * @param {onebot.GetGroupListResp.Group} message Group
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Group.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.groupId = options.longs === String ? "0" : 0;
                    object.groupName = "";
                    object.memberCount = 0;
                    object.maxMemberCount = 0;
                }
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (typeof message.groupId === "number")
                        object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                    else
                        object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
                if (message.groupName != null && message.hasOwnProperty("groupName"))
                    object.groupName = message.groupName;
                if (message.memberCount != null && message.hasOwnProperty("memberCount"))
                    object.memberCount = message.memberCount;
                if (message.maxMemberCount != null && message.hasOwnProperty("maxMemberCount"))
                    object.maxMemberCount = message.maxMemberCount;
                return object;
            };

            /**
             * Converts this Group to JSON.
             * @function toJSON
             * @memberof onebot.GetGroupListResp.Group
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Group.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Group;
        })();

        return GetGroupListResp;
    })();

    onebot.GetGroupMemberInfoReq = (function() {

        /**
         * Properties of a GetGroupMemberInfoReq.
         * @memberof onebot
         * @interface IGetGroupMemberInfoReq
         * @property {Long|null} [groupId] GetGroupMemberInfoReq groupId
         * @property {Long|null} [userId] GetGroupMemberInfoReq userId
         * @property {boolean|null} [noCache] GetGroupMemberInfoReq noCache
         */

        /**
         * Constructs a new GetGroupMemberInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetGroupMemberInfoReq.
         * @implements IGetGroupMemberInfoReq
         * @constructor
         * @param {onebot.IGetGroupMemberInfoReq=} [properties] Properties to set
         */
        function GetGroupMemberInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupMemberInfoReq groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupMemberInfoReq
         * @instance
         */
        GetGroupMemberInfoReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoReq userId.
         * @member {Long} userId
         * @memberof onebot.GetGroupMemberInfoReq
         * @instance
         */
        GetGroupMemberInfoReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoReq noCache.
         * @member {boolean} noCache
         * @memberof onebot.GetGroupMemberInfoReq
         * @instance
         */
        GetGroupMemberInfoReq.prototype.noCache = false;

        /**
         * Creates a new GetGroupMemberInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {onebot.IGetGroupMemberInfoReq=} [properties] Properties to set
         * @returns {onebot.GetGroupMemberInfoReq} GetGroupMemberInfoReq instance
         */
        GetGroupMemberInfoReq.create = function create(properties) {
            return new GetGroupMemberInfoReq(properties);
        };

        /**
         * Encodes the specified GetGroupMemberInfoReq message. Does not implicitly {@link onebot.GetGroupMemberInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {onebot.IGetGroupMemberInfoReq} message GetGroupMemberInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.noCache != null && Object.hasOwnProperty.call(message, "noCache"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.noCache);
            return writer;
        };

        /**
         * Encodes the specified GetGroupMemberInfoReq message, length delimited. Does not implicitly {@link onebot.GetGroupMemberInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {onebot.IGetGroupMemberInfoReq} message GetGroupMemberInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupMemberInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupMemberInfoReq} GetGroupMemberInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupMemberInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.noCache = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupMemberInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupMemberInfoReq} GetGroupMemberInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupMemberInfoReq message.
         * @function verify
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupMemberInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                if (typeof message.noCache !== "boolean")
                    return "noCache: boolean expected";
            return null;
        };

        /**
         * Creates a GetGroupMemberInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupMemberInfoReq} GetGroupMemberInfoReq
         */
        GetGroupMemberInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupMemberInfoReq)
                return object;
            var message = new $root.onebot.GetGroupMemberInfoReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.noCache != null)
                message.noCache = Boolean(object.noCache);
            return message;
        };

        /**
         * Creates a plain object from a GetGroupMemberInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupMemberInfoReq
         * @static
         * @param {onebot.GetGroupMemberInfoReq} message GetGroupMemberInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupMemberInfoReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.noCache = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.noCache != null && message.hasOwnProperty("noCache"))
                object.noCache = message.noCache;
            return object;
        };

        /**
         * Converts this GetGroupMemberInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupMemberInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupMemberInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupMemberInfoReq;
    })();

    onebot.GetGroupMemberInfoResp = (function() {

        /**
         * Properties of a GetGroupMemberInfoResp.
         * @memberof onebot
         * @interface IGetGroupMemberInfoResp
         * @property {Long|null} [groupId] GetGroupMemberInfoResp groupId
         * @property {Long|null} [userId] GetGroupMemberInfoResp userId
         * @property {string|null} [nickname] GetGroupMemberInfoResp nickname
         * @property {string|null} [card] GetGroupMemberInfoResp card
         * @property {string|null} [sex] GetGroupMemberInfoResp sex
         * @property {number|null} [age] GetGroupMemberInfoResp age
         * @property {string|null} [area] GetGroupMemberInfoResp area
         * @property {Long|null} [joinTime] GetGroupMemberInfoResp joinTime
         * @property {Long|null} [lastSentTime] GetGroupMemberInfoResp lastSentTime
         * @property {string|null} [level] GetGroupMemberInfoResp level
         * @property {string|null} [role] GetGroupMemberInfoResp role
         * @property {boolean|null} [unfriendly] GetGroupMemberInfoResp unfriendly
         * @property {string|null} [title] GetGroupMemberInfoResp title
         * @property {Long|null} [titleExpireTime] GetGroupMemberInfoResp titleExpireTime
         * @property {boolean|null} [cardChangeable] GetGroupMemberInfoResp cardChangeable
         */

        /**
         * Constructs a new GetGroupMemberInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetGroupMemberInfoResp.
         * @implements IGetGroupMemberInfoResp
         * @constructor
         * @param {onebot.IGetGroupMemberInfoResp=} [properties] Properties to set
         */
        function GetGroupMemberInfoResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupMemberInfoResp groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoResp userId.
         * @member {Long} userId
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoResp nickname.
         * @member {string} nickname
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.nickname = "";

        /**
         * GetGroupMemberInfoResp card.
         * @member {string} card
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.card = "";

        /**
         * GetGroupMemberInfoResp sex.
         * @member {string} sex
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.sex = "";

        /**
         * GetGroupMemberInfoResp age.
         * @member {number} age
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.age = 0;

        /**
         * GetGroupMemberInfoResp area.
         * @member {string} area
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.area = "";

        /**
         * GetGroupMemberInfoResp joinTime.
         * @member {Long} joinTime
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.joinTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoResp lastSentTime.
         * @member {Long} lastSentTime
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.lastSentTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoResp level.
         * @member {string} level
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.level = "";

        /**
         * GetGroupMemberInfoResp role.
         * @member {string} role
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.role = "";

        /**
         * GetGroupMemberInfoResp unfriendly.
         * @member {boolean} unfriendly
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.unfriendly = false;

        /**
         * GetGroupMemberInfoResp title.
         * @member {string} title
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.title = "";

        /**
         * GetGroupMemberInfoResp titleExpireTime.
         * @member {Long} titleExpireTime
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.titleExpireTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupMemberInfoResp cardChangeable.
         * @member {boolean} cardChangeable
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         */
        GetGroupMemberInfoResp.prototype.cardChangeable = false;

        /**
         * Creates a new GetGroupMemberInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {onebot.IGetGroupMemberInfoResp=} [properties] Properties to set
         * @returns {onebot.GetGroupMemberInfoResp} GetGroupMemberInfoResp instance
         */
        GetGroupMemberInfoResp.create = function create(properties) {
            return new GetGroupMemberInfoResp(properties);
        };

        /**
         * Encodes the specified GetGroupMemberInfoResp message. Does not implicitly {@link onebot.GetGroupMemberInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {onebot.IGetGroupMemberInfoResp} message GetGroupMemberInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.card);
            if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sex);
            if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.age);
            if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.area);
            if (message.joinTime != null && Object.hasOwnProperty.call(message, "joinTime"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.joinTime);
            if (message.lastSentTime != null && Object.hasOwnProperty.call(message, "lastSentTime"))
                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.lastSentTime);
            if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.level);
            if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.role);
            if (message.unfriendly != null && Object.hasOwnProperty.call(message, "unfriendly"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.unfriendly);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.title);
            if (message.titleExpireTime != null && Object.hasOwnProperty.call(message, "titleExpireTime"))
                writer.uint32(/* id 14, wireType 0 =*/112).int64(message.titleExpireTime);
            if (message.cardChangeable != null && Object.hasOwnProperty.call(message, "cardChangeable"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.cardChangeable);
            return writer;
        };

        /**
         * Encodes the specified GetGroupMemberInfoResp message, length delimited. Does not implicitly {@link onebot.GetGroupMemberInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {onebot.IGetGroupMemberInfoResp} message GetGroupMemberInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupMemberInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupMemberInfoResp} GetGroupMemberInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupMemberInfoResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.userId = reader.int64();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.card = reader.string();
                    break;
                case 5:
                    message.sex = reader.string();
                    break;
                case 6:
                    message.age = reader.int32();
                    break;
                case 7:
                    message.area = reader.string();
                    break;
                case 8:
                    message.joinTime = reader.int64();
                    break;
                case 9:
                    message.lastSentTime = reader.int64();
                    break;
                case 10:
                    message.level = reader.string();
                    break;
                case 11:
                    message.role = reader.string();
                    break;
                case 12:
                    message.unfriendly = reader.bool();
                    break;
                case 13:
                    message.title = reader.string();
                    break;
                case 14:
                    message.titleExpireTime = reader.int64();
                    break;
                case 15:
                    message.cardChangeable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupMemberInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupMemberInfoResp} GetGroupMemberInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupMemberInfoResp message.
         * @function verify
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupMemberInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.card != null && message.hasOwnProperty("card"))
                if (!$util.isString(message.card))
                    return "card: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                if (!$util.isString(message.sex))
                    return "sex: string expected";
            if (message.age != null && message.hasOwnProperty("age"))
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
            if (message.area != null && message.hasOwnProperty("area"))
                if (!$util.isString(message.area))
                    return "area: string expected";
            if (message.joinTime != null && message.hasOwnProperty("joinTime"))
                if (!$util.isInteger(message.joinTime) && !(message.joinTime && $util.isInteger(message.joinTime.low) && $util.isInteger(message.joinTime.high)))
                    return "joinTime: integer|Long expected";
            if (message.lastSentTime != null && message.hasOwnProperty("lastSentTime"))
                if (!$util.isInteger(message.lastSentTime) && !(message.lastSentTime && $util.isInteger(message.lastSentTime.low) && $util.isInteger(message.lastSentTime.high)))
                    return "lastSentTime: integer|Long expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isString(message.level))
                    return "level: string expected";
            if (message.role != null && message.hasOwnProperty("role"))
                if (!$util.isString(message.role))
                    return "role: string expected";
            if (message.unfriendly != null && message.hasOwnProperty("unfriendly"))
                if (typeof message.unfriendly !== "boolean")
                    return "unfriendly: boolean expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.titleExpireTime != null && message.hasOwnProperty("titleExpireTime"))
                if (!$util.isInteger(message.titleExpireTime) && !(message.titleExpireTime && $util.isInteger(message.titleExpireTime.low) && $util.isInteger(message.titleExpireTime.high)))
                    return "titleExpireTime: integer|Long expected";
            if (message.cardChangeable != null && message.hasOwnProperty("cardChangeable"))
                if (typeof message.cardChangeable !== "boolean")
                    return "cardChangeable: boolean expected";
            return null;
        };

        /**
         * Creates a GetGroupMemberInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupMemberInfoResp} GetGroupMemberInfoResp
         */
        GetGroupMemberInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupMemberInfoResp)
                return object;
            var message = new $root.onebot.GetGroupMemberInfoResp();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.card != null)
                message.card = String(object.card);
            if (object.sex != null)
                message.sex = String(object.sex);
            if (object.age != null)
                message.age = object.age | 0;
            if (object.area != null)
                message.area = String(object.area);
            if (object.joinTime != null)
                if ($util.Long)
                    (message.joinTime = $util.Long.fromValue(object.joinTime)).unsigned = false;
                else if (typeof object.joinTime === "string")
                    message.joinTime = parseInt(object.joinTime, 10);
                else if (typeof object.joinTime === "number")
                    message.joinTime = object.joinTime;
                else if (typeof object.joinTime === "object")
                    message.joinTime = new $util.LongBits(object.joinTime.low >>> 0, object.joinTime.high >>> 0).toNumber();
            if (object.lastSentTime != null)
                if ($util.Long)
                    (message.lastSentTime = $util.Long.fromValue(object.lastSentTime)).unsigned = false;
                else if (typeof object.lastSentTime === "string")
                    message.lastSentTime = parseInt(object.lastSentTime, 10);
                else if (typeof object.lastSentTime === "number")
                    message.lastSentTime = object.lastSentTime;
                else if (typeof object.lastSentTime === "object")
                    message.lastSentTime = new $util.LongBits(object.lastSentTime.low >>> 0, object.lastSentTime.high >>> 0).toNumber();
            if (object.level != null)
                message.level = String(object.level);
            if (object.role != null)
                message.role = String(object.role);
            if (object.unfriendly != null)
                message.unfriendly = Boolean(object.unfriendly);
            if (object.title != null)
                message.title = String(object.title);
            if (object.titleExpireTime != null)
                if ($util.Long)
                    (message.titleExpireTime = $util.Long.fromValue(object.titleExpireTime)).unsigned = false;
                else if (typeof object.titleExpireTime === "string")
                    message.titleExpireTime = parseInt(object.titleExpireTime, 10);
                else if (typeof object.titleExpireTime === "number")
                    message.titleExpireTime = object.titleExpireTime;
                else if (typeof object.titleExpireTime === "object")
                    message.titleExpireTime = new $util.LongBits(object.titleExpireTime.low >>> 0, object.titleExpireTime.high >>> 0).toNumber();
            if (object.cardChangeable != null)
                message.cardChangeable = Boolean(object.cardChangeable);
            return message;
        };

        /**
         * Creates a plain object from a GetGroupMemberInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupMemberInfoResp
         * @static
         * @param {onebot.GetGroupMemberInfoResp} message GetGroupMemberInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupMemberInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.nickname = "";
                object.card = "";
                object.sex = "";
                object.age = 0;
                object.area = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.joinTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.joinTime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastSentTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastSentTime = options.longs === String ? "0" : 0;
                object.level = "";
                object.role = "";
                object.unfriendly = false;
                object.title = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.titleExpireTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.titleExpireTime = options.longs === String ? "0" : 0;
                object.cardChangeable = false;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.card != null && message.hasOwnProperty("card"))
                object.card = message.card;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = message.sex;
            if (message.age != null && message.hasOwnProperty("age"))
                object.age = message.age;
            if (message.area != null && message.hasOwnProperty("area"))
                object.area = message.area;
            if (message.joinTime != null && message.hasOwnProperty("joinTime"))
                if (typeof message.joinTime === "number")
                    object.joinTime = options.longs === String ? String(message.joinTime) : message.joinTime;
                else
                    object.joinTime = options.longs === String ? $util.Long.prototype.toString.call(message.joinTime) : options.longs === Number ? new $util.LongBits(message.joinTime.low >>> 0, message.joinTime.high >>> 0).toNumber() : message.joinTime;
            if (message.lastSentTime != null && message.hasOwnProperty("lastSentTime"))
                if (typeof message.lastSentTime === "number")
                    object.lastSentTime = options.longs === String ? String(message.lastSentTime) : message.lastSentTime;
                else
                    object.lastSentTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastSentTime) : options.longs === Number ? new $util.LongBits(message.lastSentTime.low >>> 0, message.lastSentTime.high >>> 0).toNumber() : message.lastSentTime;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.role != null && message.hasOwnProperty("role"))
                object.role = message.role;
            if (message.unfriendly != null && message.hasOwnProperty("unfriendly"))
                object.unfriendly = message.unfriendly;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.titleExpireTime != null && message.hasOwnProperty("titleExpireTime"))
                if (typeof message.titleExpireTime === "number")
                    object.titleExpireTime = options.longs === String ? String(message.titleExpireTime) : message.titleExpireTime;
                else
                    object.titleExpireTime = options.longs === String ? $util.Long.prototype.toString.call(message.titleExpireTime) : options.longs === Number ? new $util.LongBits(message.titleExpireTime.low >>> 0, message.titleExpireTime.high >>> 0).toNumber() : message.titleExpireTime;
            if (message.cardChangeable != null && message.hasOwnProperty("cardChangeable"))
                object.cardChangeable = message.cardChangeable;
            return object;
        };

        /**
         * Converts this GetGroupMemberInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupMemberInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupMemberInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupMemberInfoResp;
    })();

    onebot.GetGroupMemberListReq = (function() {

        /**
         * Properties of a GetGroupMemberListReq.
         * @memberof onebot
         * @interface IGetGroupMemberListReq
         * @property {Long|null} [groupId] GetGroupMemberListReq groupId
         */

        /**
         * Constructs a new GetGroupMemberListReq.
         * @memberof onebot
         * @classdesc Represents a GetGroupMemberListReq.
         * @implements IGetGroupMemberListReq
         * @constructor
         * @param {onebot.IGetGroupMemberListReq=} [properties] Properties to set
         */
        function GetGroupMemberListReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupMemberListReq groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupMemberListReq
         * @instance
         */
        GetGroupMemberListReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new GetGroupMemberListReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {onebot.IGetGroupMemberListReq=} [properties] Properties to set
         * @returns {onebot.GetGroupMemberListReq} GetGroupMemberListReq instance
         */
        GetGroupMemberListReq.create = function create(properties) {
            return new GetGroupMemberListReq(properties);
        };

        /**
         * Encodes the specified GetGroupMemberListReq message. Does not implicitly {@link onebot.GetGroupMemberListReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {onebot.IGetGroupMemberListReq} message GetGroupMemberListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberListReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            return writer;
        };

        /**
         * Encodes the specified GetGroupMemberListReq message, length delimited. Does not implicitly {@link onebot.GetGroupMemberListReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {onebot.IGetGroupMemberListReq} message GetGroupMemberListReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberListReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupMemberListReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupMemberListReq} GetGroupMemberListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberListReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupMemberListReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupMemberListReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupMemberListReq} GetGroupMemberListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberListReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupMemberListReq message.
         * @function verify
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupMemberListReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            return null;
        };

        /**
         * Creates a GetGroupMemberListReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupMemberListReq} GetGroupMemberListReq
         */
        GetGroupMemberListReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupMemberListReq)
                return object;
            var message = new $root.onebot.GetGroupMemberListReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a GetGroupMemberListReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupMemberListReq
         * @static
         * @param {onebot.GetGroupMemberListReq} message GetGroupMemberListReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupMemberListReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            return object;
        };

        /**
         * Converts this GetGroupMemberListReq to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupMemberListReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupMemberListReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupMemberListReq;
    })();

    onebot.GetGroupMemberListResp = (function() {

        /**
         * Properties of a GetGroupMemberListResp.
         * @memberof onebot
         * @interface IGetGroupMemberListResp
         * @property {Array.<onebot.GetGroupMemberListResp.IGroupMember>|null} [groupMember] GetGroupMemberListResp groupMember
         */

        /**
         * Constructs a new GetGroupMemberListResp.
         * @memberof onebot
         * @classdesc Represents a GetGroupMemberListResp.
         * @implements IGetGroupMemberListResp
         * @constructor
         * @param {onebot.IGetGroupMemberListResp=} [properties] Properties to set
         */
        function GetGroupMemberListResp(properties) {
            this.groupMember = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupMemberListResp groupMember.
         * @member {Array.<onebot.GetGroupMemberListResp.IGroupMember>} groupMember
         * @memberof onebot.GetGroupMemberListResp
         * @instance
         */
        GetGroupMemberListResp.prototype.groupMember = $util.emptyArray;

        /**
         * Creates a new GetGroupMemberListResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {onebot.IGetGroupMemberListResp=} [properties] Properties to set
         * @returns {onebot.GetGroupMemberListResp} GetGroupMemberListResp instance
         */
        GetGroupMemberListResp.create = function create(properties) {
            return new GetGroupMemberListResp(properties);
        };

        /**
         * Encodes the specified GetGroupMemberListResp message. Does not implicitly {@link onebot.GetGroupMemberListResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {onebot.IGetGroupMemberListResp} message GetGroupMemberListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberListResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupMember != null && message.groupMember.length)
                for (var i = 0; i < message.groupMember.length; ++i)
                    $root.onebot.GetGroupMemberListResp.GroupMember.encode(message.groupMember[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetGroupMemberListResp message, length delimited. Does not implicitly {@link onebot.GetGroupMemberListResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {onebot.IGetGroupMemberListResp} message GetGroupMemberListResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupMemberListResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupMemberListResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupMemberListResp} GetGroupMemberListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberListResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupMemberListResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.groupMember && message.groupMember.length))
                        message.groupMember = [];
                    message.groupMember.push($root.onebot.GetGroupMemberListResp.GroupMember.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupMemberListResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupMemberListResp} GetGroupMemberListResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupMemberListResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupMemberListResp message.
         * @function verify
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupMemberListResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupMember != null && message.hasOwnProperty("groupMember")) {
                if (!Array.isArray(message.groupMember))
                    return "groupMember: array expected";
                for (var i = 0; i < message.groupMember.length; ++i) {
                    var error = $root.onebot.GetGroupMemberListResp.GroupMember.verify(message.groupMember[i]);
                    if (error)
                        return "groupMember." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GetGroupMemberListResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupMemberListResp} GetGroupMemberListResp
         */
        GetGroupMemberListResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupMemberListResp)
                return object;
            var message = new $root.onebot.GetGroupMemberListResp();
            if (object.groupMember) {
                if (!Array.isArray(object.groupMember))
                    throw TypeError(".onebot.GetGroupMemberListResp.groupMember: array expected");
                message.groupMember = [];
                for (var i = 0; i < object.groupMember.length; ++i) {
                    if (typeof object.groupMember[i] !== "object")
                        throw TypeError(".onebot.GetGroupMemberListResp.groupMember: object expected");
                    message.groupMember[i] = $root.onebot.GetGroupMemberListResp.GroupMember.fromObject(object.groupMember[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GetGroupMemberListResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupMemberListResp
         * @static
         * @param {onebot.GetGroupMemberListResp} message GetGroupMemberListResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupMemberListResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.groupMember = [];
            if (message.groupMember && message.groupMember.length) {
                object.groupMember = [];
                for (var j = 0; j < message.groupMember.length; ++j)
                    object.groupMember[j] = $root.onebot.GetGroupMemberListResp.GroupMember.toObject(message.groupMember[j], options);
            }
            return object;
        };

        /**
         * Converts this GetGroupMemberListResp to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupMemberListResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupMemberListResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetGroupMemberListResp.GroupMember = (function() {

            /**
             * Properties of a GroupMember.
             * @memberof onebot.GetGroupMemberListResp
             * @interface IGroupMember
             * @property {Long|null} [groupId] GroupMember groupId
             * @property {Long|null} [userId] GroupMember userId
             * @property {string|null} [nickname] GroupMember nickname
             * @property {string|null} [card] GroupMember card
             * @property {string|null} [sex] GroupMember sex
             * @property {number|null} [age] GroupMember age
             * @property {string|null} [area] GroupMember area
             * @property {Long|null} [joinTime] GroupMember joinTime
             * @property {Long|null} [lastSentTime] GroupMember lastSentTime
             * @property {string|null} [level] GroupMember level
             * @property {string|null} [role] GroupMember role
             * @property {boolean|null} [unfriendly] GroupMember unfriendly
             * @property {string|null} [title] GroupMember title
             * @property {Long|null} [titleExpireTime] GroupMember titleExpireTime
             * @property {boolean|null} [cardChangeable] GroupMember cardChangeable
             */

            /**
             * Constructs a new GroupMember.
             * @memberof onebot.GetGroupMemberListResp
             * @classdesc Represents a GroupMember.
             * @implements IGroupMember
             * @constructor
             * @param {onebot.GetGroupMemberListResp.IGroupMember=} [properties] Properties to set
             */
            function GroupMember(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupMember groupId.
             * @member {Long} groupId
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupMember userId.
             * @member {Long} userId
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupMember nickname.
             * @member {string} nickname
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.nickname = "";

            /**
             * GroupMember card.
             * @member {string} card
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.card = "";

            /**
             * GroupMember sex.
             * @member {string} sex
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.sex = "";

            /**
             * GroupMember age.
             * @member {number} age
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.age = 0;

            /**
             * GroupMember area.
             * @member {string} area
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.area = "";

            /**
             * GroupMember joinTime.
             * @member {Long} joinTime
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.joinTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupMember lastSentTime.
             * @member {Long} lastSentTime
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.lastSentTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupMember level.
             * @member {string} level
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.level = "";

            /**
             * GroupMember role.
             * @member {string} role
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.role = "";

            /**
             * GroupMember unfriendly.
             * @member {boolean} unfriendly
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.unfriendly = false;

            /**
             * GroupMember title.
             * @member {string} title
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.title = "";

            /**
             * GroupMember titleExpireTime.
             * @member {Long} titleExpireTime
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.titleExpireTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupMember cardChangeable.
             * @member {boolean} cardChangeable
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             */
            GroupMember.prototype.cardChangeable = false;

            /**
             * Creates a new GroupMember instance using the specified properties.
             * @function create
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {onebot.GetGroupMemberListResp.IGroupMember=} [properties] Properties to set
             * @returns {onebot.GetGroupMemberListResp.GroupMember} GroupMember instance
             */
            GroupMember.create = function create(properties) {
                return new GroupMember(properties);
            };

            /**
             * Encodes the specified GroupMember message. Does not implicitly {@link onebot.GetGroupMemberListResp.GroupMember.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {onebot.GetGroupMemberListResp.IGroupMember} message GroupMember message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMember.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
                if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.card);
                if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.sex);
                if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.age);
                if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.area);
                if (message.joinTime != null && Object.hasOwnProperty.call(message, "joinTime"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.joinTime);
                if (message.lastSentTime != null && Object.hasOwnProperty.call(message, "lastSentTime"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.lastSentTime);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.level);
                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.role);
                if (message.unfriendly != null && Object.hasOwnProperty.call(message, "unfriendly"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.unfriendly);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.title);
                if (message.titleExpireTime != null && Object.hasOwnProperty.call(message, "titleExpireTime"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int64(message.titleExpireTime);
                if (message.cardChangeable != null && Object.hasOwnProperty.call(message, "cardChangeable"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.cardChangeable);
                return writer;
            };

            /**
             * Encodes the specified GroupMember message, length delimited. Does not implicitly {@link onebot.GetGroupMemberListResp.GroupMember.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {onebot.GetGroupMemberListResp.IGroupMember} message GroupMember message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMember.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupMember message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetGroupMemberListResp.GroupMember} GroupMember
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMember.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupMemberListResp.GroupMember();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.groupId = reader.int64();
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.nickname = reader.string();
                        break;
                    case 4:
                        message.card = reader.string();
                        break;
                    case 5:
                        message.sex = reader.string();
                        break;
                    case 6:
                        message.age = reader.int32();
                        break;
                    case 7:
                        message.area = reader.string();
                        break;
                    case 8:
                        message.joinTime = reader.int64();
                        break;
                    case 9:
                        message.lastSentTime = reader.int64();
                        break;
                    case 10:
                        message.level = reader.string();
                        break;
                    case 11:
                        message.role = reader.string();
                        break;
                    case 12:
                        message.unfriendly = reader.bool();
                        break;
                    case 13:
                        message.title = reader.string();
                        break;
                    case 14:
                        message.titleExpireTime = reader.int64();
                        break;
                    case 15:
                        message.cardChangeable = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupMember message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetGroupMemberListResp.GroupMember} GroupMember
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMember.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupMember message.
             * @function verify
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupMember.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                        return "groupId: integer|Long expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isString(message.card))
                        return "card: string expected";
                if (message.sex != null && message.hasOwnProperty("sex"))
                    if (!$util.isString(message.sex))
                        return "sex: string expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                if (message.area != null && message.hasOwnProperty("area"))
                    if (!$util.isString(message.area))
                        return "area: string expected";
                if (message.joinTime != null && message.hasOwnProperty("joinTime"))
                    if (!$util.isInteger(message.joinTime) && !(message.joinTime && $util.isInteger(message.joinTime.low) && $util.isInteger(message.joinTime.high)))
                        return "joinTime: integer|Long expected";
                if (message.lastSentTime != null && message.hasOwnProperty("lastSentTime"))
                    if (!$util.isInteger(message.lastSentTime) && !(message.lastSentTime && $util.isInteger(message.lastSentTime.low) && $util.isInteger(message.lastSentTime.high)))
                        return "lastSentTime: integer|Long expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isString(message.level))
                        return "level: string expected";
                if (message.role != null && message.hasOwnProperty("role"))
                    if (!$util.isString(message.role))
                        return "role: string expected";
                if (message.unfriendly != null && message.hasOwnProperty("unfriendly"))
                    if (typeof message.unfriendly !== "boolean")
                        return "unfriendly: boolean expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.titleExpireTime != null && message.hasOwnProperty("titleExpireTime"))
                    if (!$util.isInteger(message.titleExpireTime) && !(message.titleExpireTime && $util.isInteger(message.titleExpireTime.low) && $util.isInteger(message.titleExpireTime.high)))
                        return "titleExpireTime: integer|Long expected";
                if (message.cardChangeable != null && message.hasOwnProperty("cardChangeable"))
                    if (typeof message.cardChangeable !== "boolean")
                        return "cardChangeable: boolean expected";
                return null;
            };

            /**
             * Creates a GroupMember message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetGroupMemberListResp.GroupMember} GroupMember
             */
            GroupMember.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetGroupMemberListResp.GroupMember)
                    return object;
                var message = new $root.onebot.GetGroupMemberListResp.GroupMember();
                if (object.groupId != null)
                    if ($util.Long)
                        (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                    else if (typeof object.groupId === "string")
                        message.groupId = parseInt(object.groupId, 10);
                    else if (typeof object.groupId === "number")
                        message.groupId = object.groupId;
                    else if (typeof object.groupId === "object")
                        message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.card != null)
                    message.card = String(object.card);
                if (object.sex != null)
                    message.sex = String(object.sex);
                if (object.age != null)
                    message.age = object.age | 0;
                if (object.area != null)
                    message.area = String(object.area);
                if (object.joinTime != null)
                    if ($util.Long)
                        (message.joinTime = $util.Long.fromValue(object.joinTime)).unsigned = false;
                    else if (typeof object.joinTime === "string")
                        message.joinTime = parseInt(object.joinTime, 10);
                    else if (typeof object.joinTime === "number")
                        message.joinTime = object.joinTime;
                    else if (typeof object.joinTime === "object")
                        message.joinTime = new $util.LongBits(object.joinTime.low >>> 0, object.joinTime.high >>> 0).toNumber();
                if (object.lastSentTime != null)
                    if ($util.Long)
                        (message.lastSentTime = $util.Long.fromValue(object.lastSentTime)).unsigned = false;
                    else if (typeof object.lastSentTime === "string")
                        message.lastSentTime = parseInt(object.lastSentTime, 10);
                    else if (typeof object.lastSentTime === "number")
                        message.lastSentTime = object.lastSentTime;
                    else if (typeof object.lastSentTime === "object")
                        message.lastSentTime = new $util.LongBits(object.lastSentTime.low >>> 0, object.lastSentTime.high >>> 0).toNumber();
                if (object.level != null)
                    message.level = String(object.level);
                if (object.role != null)
                    message.role = String(object.role);
                if (object.unfriendly != null)
                    message.unfriendly = Boolean(object.unfriendly);
                if (object.title != null)
                    message.title = String(object.title);
                if (object.titleExpireTime != null)
                    if ($util.Long)
                        (message.titleExpireTime = $util.Long.fromValue(object.titleExpireTime)).unsigned = false;
                    else if (typeof object.titleExpireTime === "string")
                        message.titleExpireTime = parseInt(object.titleExpireTime, 10);
                    else if (typeof object.titleExpireTime === "number")
                        message.titleExpireTime = object.titleExpireTime;
                    else if (typeof object.titleExpireTime === "object")
                        message.titleExpireTime = new $util.LongBits(object.titleExpireTime.low >>> 0, object.titleExpireTime.high >>> 0).toNumber();
                if (object.cardChangeable != null)
                    message.cardChangeable = Boolean(object.cardChangeable);
                return message;
            };

            /**
             * Creates a plain object from a GroupMember message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @static
             * @param {onebot.GetGroupMemberListResp.GroupMember} message GroupMember
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupMember.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.groupId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.card = "";
                    object.sex = "";
                    object.age = 0;
                    object.area = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.joinTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.joinTime = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.lastSentTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lastSentTime = options.longs === String ? "0" : 0;
                    object.level = "";
                    object.role = "";
                    object.unfriendly = false;
                    object.title = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.titleExpireTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.titleExpireTime = options.longs === String ? "0" : 0;
                    object.cardChangeable = false;
                }
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (typeof message.groupId === "number")
                        object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                    else
                        object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.sex != null && message.hasOwnProperty("sex"))
                    object.sex = message.sex;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.joinTime != null && message.hasOwnProperty("joinTime"))
                    if (typeof message.joinTime === "number")
                        object.joinTime = options.longs === String ? String(message.joinTime) : message.joinTime;
                    else
                        object.joinTime = options.longs === String ? $util.Long.prototype.toString.call(message.joinTime) : options.longs === Number ? new $util.LongBits(message.joinTime.low >>> 0, message.joinTime.high >>> 0).toNumber() : message.joinTime;
                if (message.lastSentTime != null && message.hasOwnProperty("lastSentTime"))
                    if (typeof message.lastSentTime === "number")
                        object.lastSentTime = options.longs === String ? String(message.lastSentTime) : message.lastSentTime;
                    else
                        object.lastSentTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastSentTime) : options.longs === Number ? new $util.LongBits(message.lastSentTime.low >>> 0, message.lastSentTime.high >>> 0).toNumber() : message.lastSentTime;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = message.role;
                if (message.unfriendly != null && message.hasOwnProperty("unfriendly"))
                    object.unfriendly = message.unfriendly;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.titleExpireTime != null && message.hasOwnProperty("titleExpireTime"))
                    if (typeof message.titleExpireTime === "number")
                        object.titleExpireTime = options.longs === String ? String(message.titleExpireTime) : message.titleExpireTime;
                    else
                        object.titleExpireTime = options.longs === String ? $util.Long.prototype.toString.call(message.titleExpireTime) : options.longs === Number ? new $util.LongBits(message.titleExpireTime.low >>> 0, message.titleExpireTime.high >>> 0).toNumber() : message.titleExpireTime;
                if (message.cardChangeable != null && message.hasOwnProperty("cardChangeable"))
                    object.cardChangeable = message.cardChangeable;
                return object;
            };

            /**
             * Converts this GroupMember to JSON.
             * @function toJSON
             * @memberof onebot.GetGroupMemberListResp.GroupMember
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupMember.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupMember;
        })();

        return GetGroupMemberListResp;
    })();

    onebot.GetGroupHonorInfoReq = (function() {

        /**
         * Properties of a GetGroupHonorInfoReq.
         * @memberof onebot
         * @interface IGetGroupHonorInfoReq
         * @property {Long|null} [groupId] GetGroupHonorInfoReq groupId
         * @property {string|null} [type] GetGroupHonorInfoReq type
         */

        /**
         * Constructs a new GetGroupHonorInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetGroupHonorInfoReq.
         * @implements IGetGroupHonorInfoReq
         * @constructor
         * @param {onebot.IGetGroupHonorInfoReq=} [properties] Properties to set
         */
        function GetGroupHonorInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupHonorInfoReq groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupHonorInfoReq
         * @instance
         */
        GetGroupHonorInfoReq.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupHonorInfoReq type.
         * @member {string} type
         * @memberof onebot.GetGroupHonorInfoReq
         * @instance
         */
        GetGroupHonorInfoReq.prototype.type = "";

        /**
         * Creates a new GetGroupHonorInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {onebot.IGetGroupHonorInfoReq=} [properties] Properties to set
         * @returns {onebot.GetGroupHonorInfoReq} GetGroupHonorInfoReq instance
         */
        GetGroupHonorInfoReq.create = function create(properties) {
            return new GetGroupHonorInfoReq(properties);
        };

        /**
         * Encodes the specified GetGroupHonorInfoReq message. Does not implicitly {@link onebot.GetGroupHonorInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {onebot.IGetGroupHonorInfoReq} message GetGroupHonorInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupHonorInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);
            return writer;
        };

        /**
         * Encodes the specified GetGroupHonorInfoReq message, length delimited. Does not implicitly {@link onebot.GetGroupHonorInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {onebot.IGetGroupHonorInfoReq} message GetGroupHonorInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupHonorInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupHonorInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupHonorInfoReq} GetGroupHonorInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupHonorInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupHonorInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupHonorInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupHonorInfoReq} GetGroupHonorInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupHonorInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupHonorInfoReq message.
         * @function verify
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupHonorInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            return null;
        };

        /**
         * Creates a GetGroupHonorInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupHonorInfoReq} GetGroupHonorInfoReq
         */
        GetGroupHonorInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupHonorInfoReq)
                return object;
            var message = new $root.onebot.GetGroupHonorInfoReq();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.type != null)
                message.type = String(object.type);
            return message;
        };

        /**
         * Creates a plain object from a GetGroupHonorInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupHonorInfoReq
         * @static
         * @param {onebot.GetGroupHonorInfoReq} message GetGroupHonorInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupHonorInfoReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.type = "";
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this GetGroupHonorInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupHonorInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupHonorInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetGroupHonorInfoReq;
    })();

    onebot.GetGroupHonorInfoResp = (function() {

        /**
         * Properties of a GetGroupHonorInfoResp.
         * @memberof onebot
         * @interface IGetGroupHonorInfoResp
         * @property {Long|null} [groupId] GetGroupHonorInfoResp groupId
         * @property {onebot.GetGroupHonorInfoResp.ICurrentTalkative|null} [currentTalkative] GetGroupHonorInfoResp currentTalkative
         * @property {Array.<onebot.GetGroupHonorInfoResp.IHonor>|null} [talkative] GetGroupHonorInfoResp talkative
         * @property {Array.<onebot.GetGroupHonorInfoResp.IHonor>|null} [performer] GetGroupHonorInfoResp performer
         * @property {Array.<onebot.GetGroupHonorInfoResp.IHonor>|null} [legend] GetGroupHonorInfoResp legend
         * @property {Array.<onebot.GetGroupHonorInfoResp.IHonor>|null} [strongNewbie] GetGroupHonorInfoResp strongNewbie
         * @property {Array.<onebot.GetGroupHonorInfoResp.IHonor>|null} [emotion] GetGroupHonorInfoResp emotion
         */

        /**
         * Constructs a new GetGroupHonorInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetGroupHonorInfoResp.
         * @implements IGetGroupHonorInfoResp
         * @constructor
         * @param {onebot.IGetGroupHonorInfoResp=} [properties] Properties to set
         */
        function GetGroupHonorInfoResp(properties) {
            this.talkative = [];
            this.performer = [];
            this.legend = [];
            this.strongNewbie = [];
            this.emotion = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetGroupHonorInfoResp groupId.
         * @member {Long} groupId
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GetGroupHonorInfoResp currentTalkative.
         * @member {onebot.GetGroupHonorInfoResp.ICurrentTalkative|null|undefined} currentTalkative
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.currentTalkative = null;

        /**
         * GetGroupHonorInfoResp talkative.
         * @member {Array.<onebot.GetGroupHonorInfoResp.IHonor>} talkative
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.talkative = $util.emptyArray;

        /**
         * GetGroupHonorInfoResp performer.
         * @member {Array.<onebot.GetGroupHonorInfoResp.IHonor>} performer
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.performer = $util.emptyArray;

        /**
         * GetGroupHonorInfoResp legend.
         * @member {Array.<onebot.GetGroupHonorInfoResp.IHonor>} legend
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.legend = $util.emptyArray;

        /**
         * GetGroupHonorInfoResp strongNewbie.
         * @member {Array.<onebot.GetGroupHonorInfoResp.IHonor>} strongNewbie
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.strongNewbie = $util.emptyArray;

        /**
         * GetGroupHonorInfoResp emotion.
         * @member {Array.<onebot.GetGroupHonorInfoResp.IHonor>} emotion
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         */
        GetGroupHonorInfoResp.prototype.emotion = $util.emptyArray;

        /**
         * Creates a new GetGroupHonorInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {onebot.IGetGroupHonorInfoResp=} [properties] Properties to set
         * @returns {onebot.GetGroupHonorInfoResp} GetGroupHonorInfoResp instance
         */
        GetGroupHonorInfoResp.create = function create(properties) {
            return new GetGroupHonorInfoResp(properties);
        };

        /**
         * Encodes the specified GetGroupHonorInfoResp message. Does not implicitly {@link onebot.GetGroupHonorInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {onebot.IGetGroupHonorInfoResp} message GetGroupHonorInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupHonorInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
            if (message.currentTalkative != null && Object.hasOwnProperty.call(message, "currentTalkative"))
                $root.onebot.GetGroupHonorInfoResp.CurrentTalkative.encode(message.currentTalkative, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.talkative != null && message.talkative.length)
                for (var i = 0; i < message.talkative.length; ++i)
                    $root.onebot.GetGroupHonorInfoResp.Honor.encode(message.talkative[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.performer != null && message.performer.length)
                for (var i = 0; i < message.performer.length; ++i)
                    $root.onebot.GetGroupHonorInfoResp.Honor.encode(message.performer[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.legend != null && message.legend.length)
                for (var i = 0; i < message.legend.length; ++i)
                    $root.onebot.GetGroupHonorInfoResp.Honor.encode(message.legend[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.strongNewbie != null && message.strongNewbie.length)
                for (var i = 0; i < message.strongNewbie.length; ++i)
                    $root.onebot.GetGroupHonorInfoResp.Honor.encode(message.strongNewbie[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.emotion != null && message.emotion.length)
                for (var i = 0; i < message.emotion.length; ++i)
                    $root.onebot.GetGroupHonorInfoResp.Honor.encode(message.emotion[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetGroupHonorInfoResp message, length delimited. Does not implicitly {@link onebot.GetGroupHonorInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {onebot.IGetGroupHonorInfoResp} message GetGroupHonorInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetGroupHonorInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetGroupHonorInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetGroupHonorInfoResp} GetGroupHonorInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupHonorInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupHonorInfoResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.int64();
                    break;
                case 2:
                    message.currentTalkative = $root.onebot.GetGroupHonorInfoResp.CurrentTalkative.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.talkative && message.talkative.length))
                        message.talkative = [];
                    message.talkative.push($root.onebot.GetGroupHonorInfoResp.Honor.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.performer && message.performer.length))
                        message.performer = [];
                    message.performer.push($root.onebot.GetGroupHonorInfoResp.Honor.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.legend && message.legend.length))
                        message.legend = [];
                    message.legend.push($root.onebot.GetGroupHonorInfoResp.Honor.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.strongNewbie && message.strongNewbie.length))
                        message.strongNewbie = [];
                    message.strongNewbie.push($root.onebot.GetGroupHonorInfoResp.Honor.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.emotion && message.emotion.length))
                        message.emotion = [];
                    message.emotion.push($root.onebot.GetGroupHonorInfoResp.Honor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetGroupHonorInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetGroupHonorInfoResp} GetGroupHonorInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetGroupHonorInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetGroupHonorInfoResp message.
         * @function verify
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetGroupHonorInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.currentTalkative != null && message.hasOwnProperty("currentTalkative")) {
                var error = $root.onebot.GetGroupHonorInfoResp.CurrentTalkative.verify(message.currentTalkative);
                if (error)
                    return "currentTalkative." + error;
            }
            if (message.talkative != null && message.hasOwnProperty("talkative")) {
                if (!Array.isArray(message.talkative))
                    return "talkative: array expected";
                for (var i = 0; i < message.talkative.length; ++i) {
                    var error = $root.onebot.GetGroupHonorInfoResp.Honor.verify(message.talkative[i]);
                    if (error)
                        return "talkative." + error;
                }
            }
            if (message.performer != null && message.hasOwnProperty("performer")) {
                if (!Array.isArray(message.performer))
                    return "performer: array expected";
                for (var i = 0; i < message.performer.length; ++i) {
                    var error = $root.onebot.GetGroupHonorInfoResp.Honor.verify(message.performer[i]);
                    if (error)
                        return "performer." + error;
                }
            }
            if (message.legend != null && message.hasOwnProperty("legend")) {
                if (!Array.isArray(message.legend))
                    return "legend: array expected";
                for (var i = 0; i < message.legend.length; ++i) {
                    var error = $root.onebot.GetGroupHonorInfoResp.Honor.verify(message.legend[i]);
                    if (error)
                        return "legend." + error;
                }
            }
            if (message.strongNewbie != null && message.hasOwnProperty("strongNewbie")) {
                if (!Array.isArray(message.strongNewbie))
                    return "strongNewbie: array expected";
                for (var i = 0; i < message.strongNewbie.length; ++i) {
                    var error = $root.onebot.GetGroupHonorInfoResp.Honor.verify(message.strongNewbie[i]);
                    if (error)
                        return "strongNewbie." + error;
                }
            }
            if (message.emotion != null && message.hasOwnProperty("emotion")) {
                if (!Array.isArray(message.emotion))
                    return "emotion: array expected";
                for (var i = 0; i < message.emotion.length; ++i) {
                    var error = $root.onebot.GetGroupHonorInfoResp.Honor.verify(message.emotion[i]);
                    if (error)
                        return "emotion." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GetGroupHonorInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetGroupHonorInfoResp} GetGroupHonorInfoResp
         */
        GetGroupHonorInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetGroupHonorInfoResp)
                return object;
            var message = new $root.onebot.GetGroupHonorInfoResp();
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.currentTalkative != null) {
                if (typeof object.currentTalkative !== "object")
                    throw TypeError(".onebot.GetGroupHonorInfoResp.currentTalkative: object expected");
                message.currentTalkative = $root.onebot.GetGroupHonorInfoResp.CurrentTalkative.fromObject(object.currentTalkative);
            }
            if (object.talkative) {
                if (!Array.isArray(object.talkative))
                    throw TypeError(".onebot.GetGroupHonorInfoResp.talkative: array expected");
                message.talkative = [];
                for (var i = 0; i < object.talkative.length; ++i) {
                    if (typeof object.talkative[i] !== "object")
                        throw TypeError(".onebot.GetGroupHonorInfoResp.talkative: object expected");
                    message.talkative[i] = $root.onebot.GetGroupHonorInfoResp.Honor.fromObject(object.talkative[i]);
                }
            }
            if (object.performer) {
                if (!Array.isArray(object.performer))
                    throw TypeError(".onebot.GetGroupHonorInfoResp.performer: array expected");
                message.performer = [];
                for (var i = 0; i < object.performer.length; ++i) {
                    if (typeof object.performer[i] !== "object")
                        throw TypeError(".onebot.GetGroupHonorInfoResp.performer: object expected");
                    message.performer[i] = $root.onebot.GetGroupHonorInfoResp.Honor.fromObject(object.performer[i]);
                }
            }
            if (object.legend) {
                if (!Array.isArray(object.legend))
                    throw TypeError(".onebot.GetGroupHonorInfoResp.legend: array expected");
                message.legend = [];
                for (var i = 0; i < object.legend.length; ++i) {
                    if (typeof object.legend[i] !== "object")
                        throw TypeError(".onebot.GetGroupHonorInfoResp.legend: object expected");
                    message.legend[i] = $root.onebot.GetGroupHonorInfoResp.Honor.fromObject(object.legend[i]);
                }
            }
            if (object.strongNewbie) {
                if (!Array.isArray(object.strongNewbie))
                    throw TypeError(".onebot.GetGroupHonorInfoResp.strongNewbie: array expected");
                message.strongNewbie = [];
                for (var i = 0; i < object.strongNewbie.length; ++i) {
                    if (typeof object.strongNewbie[i] !== "object")
                        throw TypeError(".onebot.GetGroupHonorInfoResp.strongNewbie: object expected");
                    message.strongNewbie[i] = $root.onebot.GetGroupHonorInfoResp.Honor.fromObject(object.strongNewbie[i]);
                }
            }
            if (object.emotion) {
                if (!Array.isArray(object.emotion))
                    throw TypeError(".onebot.GetGroupHonorInfoResp.emotion: array expected");
                message.emotion = [];
                for (var i = 0; i < object.emotion.length; ++i) {
                    if (typeof object.emotion[i] !== "object")
                        throw TypeError(".onebot.GetGroupHonorInfoResp.emotion: object expected");
                    message.emotion[i] = $root.onebot.GetGroupHonorInfoResp.Honor.fromObject(object.emotion[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GetGroupHonorInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetGroupHonorInfoResp
         * @static
         * @param {onebot.GetGroupHonorInfoResp} message GetGroupHonorInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetGroupHonorInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.talkative = [];
                object.performer = [];
                object.legend = [];
                object.strongNewbie = [];
                object.emotion = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                object.currentTalkative = null;
            }
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.currentTalkative != null && message.hasOwnProperty("currentTalkative"))
                object.currentTalkative = $root.onebot.GetGroupHonorInfoResp.CurrentTalkative.toObject(message.currentTalkative, options);
            if (message.talkative && message.talkative.length) {
                object.talkative = [];
                for (var j = 0; j < message.talkative.length; ++j)
                    object.talkative[j] = $root.onebot.GetGroupHonorInfoResp.Honor.toObject(message.talkative[j], options);
            }
            if (message.performer && message.performer.length) {
                object.performer = [];
                for (var j = 0; j < message.performer.length; ++j)
                    object.performer[j] = $root.onebot.GetGroupHonorInfoResp.Honor.toObject(message.performer[j], options);
            }
            if (message.legend && message.legend.length) {
                object.legend = [];
                for (var j = 0; j < message.legend.length; ++j)
                    object.legend[j] = $root.onebot.GetGroupHonorInfoResp.Honor.toObject(message.legend[j], options);
            }
            if (message.strongNewbie && message.strongNewbie.length) {
                object.strongNewbie = [];
                for (var j = 0; j < message.strongNewbie.length; ++j)
                    object.strongNewbie[j] = $root.onebot.GetGroupHonorInfoResp.Honor.toObject(message.strongNewbie[j], options);
            }
            if (message.emotion && message.emotion.length) {
                object.emotion = [];
                for (var j = 0; j < message.emotion.length; ++j)
                    object.emotion[j] = $root.onebot.GetGroupHonorInfoResp.Honor.toObject(message.emotion[j], options);
            }
            return object;
        };

        /**
         * Converts this GetGroupHonorInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetGroupHonorInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetGroupHonorInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GetGroupHonorInfoResp.CurrentTalkative = (function() {

            /**
             * Properties of a CurrentTalkative.
             * @memberof onebot.GetGroupHonorInfoResp
             * @interface ICurrentTalkative
             * @property {Long|null} [userId] CurrentTalkative userId
             * @property {string|null} [nickname] CurrentTalkative nickname
             * @property {string|null} [avatar] CurrentTalkative avatar
             * @property {number|null} [dayCount] CurrentTalkative dayCount
             */

            /**
             * Constructs a new CurrentTalkative.
             * @memberof onebot.GetGroupHonorInfoResp
             * @classdesc Represents a CurrentTalkative.
             * @implements ICurrentTalkative
             * @constructor
             * @param {onebot.GetGroupHonorInfoResp.ICurrentTalkative=} [properties] Properties to set
             */
            function CurrentTalkative(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CurrentTalkative userId.
             * @member {Long} userId
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @instance
             */
            CurrentTalkative.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CurrentTalkative nickname.
             * @member {string} nickname
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @instance
             */
            CurrentTalkative.prototype.nickname = "";

            /**
             * CurrentTalkative avatar.
             * @member {string} avatar
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @instance
             */
            CurrentTalkative.prototype.avatar = "";

            /**
             * CurrentTalkative dayCount.
             * @member {number} dayCount
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @instance
             */
            CurrentTalkative.prototype.dayCount = 0;

            /**
             * Creates a new CurrentTalkative instance using the specified properties.
             * @function create
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {onebot.GetGroupHonorInfoResp.ICurrentTalkative=} [properties] Properties to set
             * @returns {onebot.GetGroupHonorInfoResp.CurrentTalkative} CurrentTalkative instance
             */
            CurrentTalkative.create = function create(properties) {
                return new CurrentTalkative(properties);
            };

            /**
             * Encodes the specified CurrentTalkative message. Does not implicitly {@link onebot.GetGroupHonorInfoResp.CurrentTalkative.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {onebot.GetGroupHonorInfoResp.ICurrentTalkative} message CurrentTalkative message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CurrentTalkative.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.avatar != null && Object.hasOwnProperty.call(message, "avatar"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avatar);
                if (message.dayCount != null && Object.hasOwnProperty.call(message, "dayCount"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dayCount);
                return writer;
            };

            /**
             * Encodes the specified CurrentTalkative message, length delimited. Does not implicitly {@link onebot.GetGroupHonorInfoResp.CurrentTalkative.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {onebot.GetGroupHonorInfoResp.ICurrentTalkative} message CurrentTalkative message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CurrentTalkative.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CurrentTalkative message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetGroupHonorInfoResp.CurrentTalkative} CurrentTalkative
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CurrentTalkative.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupHonorInfoResp.CurrentTalkative();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.avatar = reader.string();
                        break;
                    case 4:
                        message.dayCount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CurrentTalkative message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetGroupHonorInfoResp.CurrentTalkative} CurrentTalkative
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CurrentTalkative.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CurrentTalkative message.
             * @function verify
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CurrentTalkative.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                if (message.dayCount != null && message.hasOwnProperty("dayCount"))
                    if (!$util.isInteger(message.dayCount))
                        return "dayCount: integer expected";
                return null;
            };

            /**
             * Creates a CurrentTalkative message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetGroupHonorInfoResp.CurrentTalkative} CurrentTalkative
             */
            CurrentTalkative.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetGroupHonorInfoResp.CurrentTalkative)
                    return object;
                var message = new $root.onebot.GetGroupHonorInfoResp.CurrentTalkative();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                if (object.dayCount != null)
                    message.dayCount = object.dayCount | 0;
                return message;
            };

            /**
             * Creates a plain object from a CurrentTalkative message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @static
             * @param {onebot.GetGroupHonorInfoResp.CurrentTalkative} message CurrentTalkative
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CurrentTalkative.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.avatar = "";
                    object.dayCount = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                if (message.dayCount != null && message.hasOwnProperty("dayCount"))
                    object.dayCount = message.dayCount;
                return object;
            };

            /**
             * Converts this CurrentTalkative to JSON.
             * @function toJSON
             * @memberof onebot.GetGroupHonorInfoResp.CurrentTalkative
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CurrentTalkative.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CurrentTalkative;
        })();

        GetGroupHonorInfoResp.Honor = (function() {

            /**
             * Properties of an Honor.
             * @memberof onebot.GetGroupHonorInfoResp
             * @interface IHonor
             * @property {Long|null} [userId] Honor userId
             * @property {string|null} [nickname] Honor nickname
             * @property {string|null} [avatar] Honor avatar
             * @property {string|null} [description] Honor description
             */

            /**
             * Constructs a new Honor.
             * @memberof onebot.GetGroupHonorInfoResp
             * @classdesc Represents an Honor.
             * @implements IHonor
             * @constructor
             * @param {onebot.GetGroupHonorInfoResp.IHonor=} [properties] Properties to set
             */
            function Honor(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Honor userId.
             * @member {Long} userId
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @instance
             */
            Honor.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Honor nickname.
             * @member {string} nickname
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @instance
             */
            Honor.prototype.nickname = "";

            /**
             * Honor avatar.
             * @member {string} avatar
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @instance
             */
            Honor.prototype.avatar = "";

            /**
             * Honor description.
             * @member {string} description
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @instance
             */
            Honor.prototype.description = "";

            /**
             * Creates a new Honor instance using the specified properties.
             * @function create
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {onebot.GetGroupHonorInfoResp.IHonor=} [properties] Properties to set
             * @returns {onebot.GetGroupHonorInfoResp.Honor} Honor instance
             */
            Honor.create = function create(properties) {
                return new Honor(properties);
            };

            /**
             * Encodes the specified Honor message. Does not implicitly {@link onebot.GetGroupHonorInfoResp.Honor.verify|verify} messages.
             * @function encode
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {onebot.GetGroupHonorInfoResp.IHonor} message Honor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Honor.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.avatar != null && Object.hasOwnProperty.call(message, "avatar"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avatar);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                return writer;
            };

            /**
             * Encodes the specified Honor message, length delimited. Does not implicitly {@link onebot.GetGroupHonorInfoResp.Honor.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {onebot.GetGroupHonorInfoResp.IHonor} message Honor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Honor.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Honor message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GetGroupHonorInfoResp.Honor} Honor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Honor.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetGroupHonorInfoResp.Honor();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.avatar = reader.string();
                        break;
                    case 4:
                        message.description = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Honor message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GetGroupHonorInfoResp.Honor} Honor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Honor.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Honor message.
             * @function verify
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Honor.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                return null;
            };

            /**
             * Creates an Honor message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GetGroupHonorInfoResp.Honor} Honor
             */
            Honor.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GetGroupHonorInfoResp.Honor)
                    return object;
                var message = new $root.onebot.GetGroupHonorInfoResp.Honor();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                if (object.description != null)
                    message.description = String(object.description);
                return message;
            };

            /**
             * Creates a plain object from an Honor message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @static
             * @param {onebot.GetGroupHonorInfoResp.Honor} message Honor
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Honor.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.avatar = "";
                    object.description = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                return object;
            };

            /**
             * Converts this Honor to JSON.
             * @function toJSON
             * @memberof onebot.GetGroupHonorInfoResp.Honor
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Honor.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Honor;
        })();

        return GetGroupHonorInfoResp;
    })();

    onebot.GetCookiesReq = (function() {

        /**
         * Properties of a GetCookiesReq.
         * @memberof onebot
         * @interface IGetCookiesReq
         * @property {string|null} [domain] GetCookiesReq domain
         */

        /**
         * Constructs a new GetCookiesReq.
         * @memberof onebot
         * @classdesc Represents a GetCookiesReq.
         * @implements IGetCookiesReq
         * @constructor
         * @param {onebot.IGetCookiesReq=} [properties] Properties to set
         */
        function GetCookiesReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetCookiesReq domain.
         * @member {string} domain
         * @memberof onebot.GetCookiesReq
         * @instance
         */
        GetCookiesReq.prototype.domain = "";

        /**
         * Creates a new GetCookiesReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {onebot.IGetCookiesReq=} [properties] Properties to set
         * @returns {onebot.GetCookiesReq} GetCookiesReq instance
         */
        GetCookiesReq.create = function create(properties) {
            return new GetCookiesReq(properties);
        };

        /**
         * Encodes the specified GetCookiesReq message. Does not implicitly {@link onebot.GetCookiesReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {onebot.IGetCookiesReq} message GetCookiesReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCookiesReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);
            return writer;
        };

        /**
         * Encodes the specified GetCookiesReq message, length delimited. Does not implicitly {@link onebot.GetCookiesReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {onebot.IGetCookiesReq} message GetCookiesReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCookiesReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCookiesReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCookiesReq} GetCookiesReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCookiesReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCookiesReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.domain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCookiesReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCookiesReq} GetCookiesReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCookiesReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCookiesReq message.
         * @function verify
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCookiesReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            return null;
        };

        /**
         * Creates a GetCookiesReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCookiesReq} GetCookiesReq
         */
        GetCookiesReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCookiesReq)
                return object;
            var message = new $root.onebot.GetCookiesReq();
            if (object.domain != null)
                message.domain = String(object.domain);
            return message;
        };

        /**
         * Creates a plain object from a GetCookiesReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCookiesReq
         * @static
         * @param {onebot.GetCookiesReq} message GetCookiesReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCookiesReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.domain = "";
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            return object;
        };

        /**
         * Converts this GetCookiesReq to JSON.
         * @function toJSON
         * @memberof onebot.GetCookiesReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCookiesReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCookiesReq;
    })();

    onebot.GetCookiesResp = (function() {

        /**
         * Properties of a GetCookiesResp.
         * @memberof onebot
         * @interface IGetCookiesResp
         * @property {string|null} [cookies] GetCookiesResp cookies
         */

        /**
         * Constructs a new GetCookiesResp.
         * @memberof onebot
         * @classdesc Represents a GetCookiesResp.
         * @implements IGetCookiesResp
         * @constructor
         * @param {onebot.IGetCookiesResp=} [properties] Properties to set
         */
        function GetCookiesResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetCookiesResp cookies.
         * @member {string} cookies
         * @memberof onebot.GetCookiesResp
         * @instance
         */
        GetCookiesResp.prototype.cookies = "";

        /**
         * Creates a new GetCookiesResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {onebot.IGetCookiesResp=} [properties] Properties to set
         * @returns {onebot.GetCookiesResp} GetCookiesResp instance
         */
        GetCookiesResp.create = function create(properties) {
            return new GetCookiesResp(properties);
        };

        /**
         * Encodes the specified GetCookiesResp message. Does not implicitly {@link onebot.GetCookiesResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {onebot.IGetCookiesResp} message GetCookiesResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCookiesResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cookies != null && Object.hasOwnProperty.call(message, "cookies"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cookies);
            return writer;
        };

        /**
         * Encodes the specified GetCookiesResp message, length delimited. Does not implicitly {@link onebot.GetCookiesResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {onebot.IGetCookiesResp} message GetCookiesResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCookiesResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCookiesResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCookiesResp} GetCookiesResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCookiesResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCookiesResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cookies = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCookiesResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCookiesResp} GetCookiesResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCookiesResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCookiesResp message.
         * @function verify
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCookiesResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cookies != null && message.hasOwnProperty("cookies"))
                if (!$util.isString(message.cookies))
                    return "cookies: string expected";
            return null;
        };

        /**
         * Creates a GetCookiesResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCookiesResp} GetCookiesResp
         */
        GetCookiesResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCookiesResp)
                return object;
            var message = new $root.onebot.GetCookiesResp();
            if (object.cookies != null)
                message.cookies = String(object.cookies);
            return message;
        };

        /**
         * Creates a plain object from a GetCookiesResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCookiesResp
         * @static
         * @param {onebot.GetCookiesResp} message GetCookiesResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCookiesResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cookies = "";
            if (message.cookies != null && message.hasOwnProperty("cookies"))
                object.cookies = message.cookies;
            return object;
        };

        /**
         * Converts this GetCookiesResp to JSON.
         * @function toJSON
         * @memberof onebot.GetCookiesResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCookiesResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCookiesResp;
    })();

    onebot.GetCsrfTokenReq = (function() {

        /**
         * Properties of a GetCsrfTokenReq.
         * @memberof onebot
         * @interface IGetCsrfTokenReq
         */

        /**
         * Constructs a new GetCsrfTokenReq.
         * @memberof onebot
         * @classdesc Represents a GetCsrfTokenReq.
         * @implements IGetCsrfTokenReq
         * @constructor
         * @param {onebot.IGetCsrfTokenReq=} [properties] Properties to set
         */
        function GetCsrfTokenReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetCsrfTokenReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {onebot.IGetCsrfTokenReq=} [properties] Properties to set
         * @returns {onebot.GetCsrfTokenReq} GetCsrfTokenReq instance
         */
        GetCsrfTokenReq.create = function create(properties) {
            return new GetCsrfTokenReq(properties);
        };

        /**
         * Encodes the specified GetCsrfTokenReq message. Does not implicitly {@link onebot.GetCsrfTokenReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {onebot.IGetCsrfTokenReq} message GetCsrfTokenReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCsrfTokenReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetCsrfTokenReq message, length delimited. Does not implicitly {@link onebot.GetCsrfTokenReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {onebot.IGetCsrfTokenReq} message GetCsrfTokenReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCsrfTokenReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCsrfTokenReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCsrfTokenReq} GetCsrfTokenReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCsrfTokenReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCsrfTokenReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCsrfTokenReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCsrfTokenReq} GetCsrfTokenReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCsrfTokenReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCsrfTokenReq message.
         * @function verify
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCsrfTokenReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetCsrfTokenReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCsrfTokenReq} GetCsrfTokenReq
         */
        GetCsrfTokenReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCsrfTokenReq)
                return object;
            return new $root.onebot.GetCsrfTokenReq();
        };

        /**
         * Creates a plain object from a GetCsrfTokenReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCsrfTokenReq
         * @static
         * @param {onebot.GetCsrfTokenReq} message GetCsrfTokenReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCsrfTokenReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetCsrfTokenReq to JSON.
         * @function toJSON
         * @memberof onebot.GetCsrfTokenReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCsrfTokenReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCsrfTokenReq;
    })();

    onebot.GetCsrfTokenResp = (function() {

        /**
         * Properties of a GetCsrfTokenResp.
         * @memberof onebot
         * @interface IGetCsrfTokenResp
         * @property {number|null} [token] GetCsrfTokenResp token
         */

        /**
         * Constructs a new GetCsrfTokenResp.
         * @memberof onebot
         * @classdesc Represents a GetCsrfTokenResp.
         * @implements IGetCsrfTokenResp
         * @constructor
         * @param {onebot.IGetCsrfTokenResp=} [properties] Properties to set
         */
        function GetCsrfTokenResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetCsrfTokenResp token.
         * @member {number} token
         * @memberof onebot.GetCsrfTokenResp
         * @instance
         */
        GetCsrfTokenResp.prototype.token = 0;

        /**
         * Creates a new GetCsrfTokenResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {onebot.IGetCsrfTokenResp=} [properties] Properties to set
         * @returns {onebot.GetCsrfTokenResp} GetCsrfTokenResp instance
         */
        GetCsrfTokenResp.create = function create(properties) {
            return new GetCsrfTokenResp(properties);
        };

        /**
         * Encodes the specified GetCsrfTokenResp message. Does not implicitly {@link onebot.GetCsrfTokenResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {onebot.IGetCsrfTokenResp} message GetCsrfTokenResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCsrfTokenResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.token);
            return writer;
        };

        /**
         * Encodes the specified GetCsrfTokenResp message, length delimited. Does not implicitly {@link onebot.GetCsrfTokenResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {onebot.IGetCsrfTokenResp} message GetCsrfTokenResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCsrfTokenResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCsrfTokenResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCsrfTokenResp} GetCsrfTokenResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCsrfTokenResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCsrfTokenResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.token = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCsrfTokenResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCsrfTokenResp} GetCsrfTokenResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCsrfTokenResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCsrfTokenResp message.
         * @function verify
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCsrfTokenResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isInteger(message.token))
                    return "token: integer expected";
            return null;
        };

        /**
         * Creates a GetCsrfTokenResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCsrfTokenResp} GetCsrfTokenResp
         */
        GetCsrfTokenResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCsrfTokenResp)
                return object;
            var message = new $root.onebot.GetCsrfTokenResp();
            if (object.token != null)
                message.token = object.token | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetCsrfTokenResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCsrfTokenResp
         * @static
         * @param {onebot.GetCsrfTokenResp} message GetCsrfTokenResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCsrfTokenResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.token = 0;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };

        /**
         * Converts this GetCsrfTokenResp to JSON.
         * @function toJSON
         * @memberof onebot.GetCsrfTokenResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCsrfTokenResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCsrfTokenResp;
    })();

    onebot.GetCredentialsReq = (function() {

        /**
         * Properties of a GetCredentialsReq.
         * @memberof onebot
         * @interface IGetCredentialsReq
         * @property {string|null} [domain] GetCredentialsReq domain
         */

        /**
         * Constructs a new GetCredentialsReq.
         * @memberof onebot
         * @classdesc Represents a GetCredentialsReq.
         * @implements IGetCredentialsReq
         * @constructor
         * @param {onebot.IGetCredentialsReq=} [properties] Properties to set
         */
        function GetCredentialsReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetCredentialsReq domain.
         * @member {string} domain
         * @memberof onebot.GetCredentialsReq
         * @instance
         */
        GetCredentialsReq.prototype.domain = "";

        /**
         * Creates a new GetCredentialsReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {onebot.IGetCredentialsReq=} [properties] Properties to set
         * @returns {onebot.GetCredentialsReq} GetCredentialsReq instance
         */
        GetCredentialsReq.create = function create(properties) {
            return new GetCredentialsReq(properties);
        };

        /**
         * Encodes the specified GetCredentialsReq message. Does not implicitly {@link onebot.GetCredentialsReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {onebot.IGetCredentialsReq} message GetCredentialsReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCredentialsReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);
            return writer;
        };

        /**
         * Encodes the specified GetCredentialsReq message, length delimited. Does not implicitly {@link onebot.GetCredentialsReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {onebot.IGetCredentialsReq} message GetCredentialsReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCredentialsReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCredentialsReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCredentialsReq} GetCredentialsReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCredentialsReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCredentialsReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.domain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCredentialsReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCredentialsReq} GetCredentialsReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCredentialsReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCredentialsReq message.
         * @function verify
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCredentialsReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            return null;
        };

        /**
         * Creates a GetCredentialsReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCredentialsReq} GetCredentialsReq
         */
        GetCredentialsReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCredentialsReq)
                return object;
            var message = new $root.onebot.GetCredentialsReq();
            if (object.domain != null)
                message.domain = String(object.domain);
            return message;
        };

        /**
         * Creates a plain object from a GetCredentialsReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCredentialsReq
         * @static
         * @param {onebot.GetCredentialsReq} message GetCredentialsReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCredentialsReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.domain = "";
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            return object;
        };

        /**
         * Converts this GetCredentialsReq to JSON.
         * @function toJSON
         * @memberof onebot.GetCredentialsReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCredentialsReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCredentialsReq;
    })();

    onebot.GetCredentialsResp = (function() {

        /**
         * Properties of a GetCredentialsResp.
         * @memberof onebot
         * @interface IGetCredentialsResp
         * @property {string|null} [cookies] GetCredentialsResp cookies
         * @property {number|null} [csrfToken] GetCredentialsResp csrfToken
         */

        /**
         * Constructs a new GetCredentialsResp.
         * @memberof onebot
         * @classdesc Represents a GetCredentialsResp.
         * @implements IGetCredentialsResp
         * @constructor
         * @param {onebot.IGetCredentialsResp=} [properties] Properties to set
         */
        function GetCredentialsResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetCredentialsResp cookies.
         * @member {string} cookies
         * @memberof onebot.GetCredentialsResp
         * @instance
         */
        GetCredentialsResp.prototype.cookies = "";

        /**
         * GetCredentialsResp csrfToken.
         * @member {number} csrfToken
         * @memberof onebot.GetCredentialsResp
         * @instance
         */
        GetCredentialsResp.prototype.csrfToken = 0;

        /**
         * Creates a new GetCredentialsResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {onebot.IGetCredentialsResp=} [properties] Properties to set
         * @returns {onebot.GetCredentialsResp} GetCredentialsResp instance
         */
        GetCredentialsResp.create = function create(properties) {
            return new GetCredentialsResp(properties);
        };

        /**
         * Encodes the specified GetCredentialsResp message. Does not implicitly {@link onebot.GetCredentialsResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {onebot.IGetCredentialsResp} message GetCredentialsResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCredentialsResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cookies != null && Object.hasOwnProperty.call(message, "cookies"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cookies);
            if (message.csrfToken != null && Object.hasOwnProperty.call(message, "csrfToken"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.csrfToken);
            return writer;
        };

        /**
         * Encodes the specified GetCredentialsResp message, length delimited. Does not implicitly {@link onebot.GetCredentialsResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {onebot.IGetCredentialsResp} message GetCredentialsResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetCredentialsResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetCredentialsResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetCredentialsResp} GetCredentialsResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCredentialsResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetCredentialsResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cookies = reader.string();
                    break;
                case 2:
                    message.csrfToken = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetCredentialsResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetCredentialsResp} GetCredentialsResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetCredentialsResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetCredentialsResp message.
         * @function verify
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetCredentialsResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cookies != null && message.hasOwnProperty("cookies"))
                if (!$util.isString(message.cookies))
                    return "cookies: string expected";
            if (message.csrfToken != null && message.hasOwnProperty("csrfToken"))
                if (!$util.isInteger(message.csrfToken))
                    return "csrfToken: integer expected";
            return null;
        };

        /**
         * Creates a GetCredentialsResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetCredentialsResp} GetCredentialsResp
         */
        GetCredentialsResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetCredentialsResp)
                return object;
            var message = new $root.onebot.GetCredentialsResp();
            if (object.cookies != null)
                message.cookies = String(object.cookies);
            if (object.csrfToken != null)
                message.csrfToken = object.csrfToken | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetCredentialsResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetCredentialsResp
         * @static
         * @param {onebot.GetCredentialsResp} message GetCredentialsResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetCredentialsResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cookies = "";
                object.csrfToken = 0;
            }
            if (message.cookies != null && message.hasOwnProperty("cookies"))
                object.cookies = message.cookies;
            if (message.csrfToken != null && message.hasOwnProperty("csrfToken"))
                object.csrfToken = message.csrfToken;
            return object;
        };

        /**
         * Converts this GetCredentialsResp to JSON.
         * @function toJSON
         * @memberof onebot.GetCredentialsResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetCredentialsResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetCredentialsResp;
    })();

    onebot.GetRecordReq = (function() {

        /**
         * Properties of a GetRecordReq.
         * @memberof onebot
         * @interface IGetRecordReq
         * @property {string|null} [file] GetRecordReq file
         * @property {string|null} [outFormat] GetRecordReq outFormat
         */

        /**
         * Constructs a new GetRecordReq.
         * @memberof onebot
         * @classdesc Represents a GetRecordReq.
         * @implements IGetRecordReq
         * @constructor
         * @param {onebot.IGetRecordReq=} [properties] Properties to set
         */
        function GetRecordReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetRecordReq file.
         * @member {string} file
         * @memberof onebot.GetRecordReq
         * @instance
         */
        GetRecordReq.prototype.file = "";

        /**
         * GetRecordReq outFormat.
         * @member {string} outFormat
         * @memberof onebot.GetRecordReq
         * @instance
         */
        GetRecordReq.prototype.outFormat = "";

        /**
         * Creates a new GetRecordReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetRecordReq
         * @static
         * @param {onebot.IGetRecordReq=} [properties] Properties to set
         * @returns {onebot.GetRecordReq} GetRecordReq instance
         */
        GetRecordReq.create = function create(properties) {
            return new GetRecordReq(properties);
        };

        /**
         * Encodes the specified GetRecordReq message. Does not implicitly {@link onebot.GetRecordReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetRecordReq
         * @static
         * @param {onebot.IGetRecordReq} message GetRecordReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetRecordReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
            if (message.outFormat != null && Object.hasOwnProperty.call(message, "outFormat"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.outFormat);
            return writer;
        };

        /**
         * Encodes the specified GetRecordReq message, length delimited. Does not implicitly {@link onebot.GetRecordReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetRecordReq
         * @static
         * @param {onebot.IGetRecordReq} message GetRecordReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetRecordReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetRecordReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetRecordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetRecordReq} GetRecordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetRecordReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetRecordReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file = reader.string();
                    break;
                case 2:
                    message.outFormat = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetRecordReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetRecordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetRecordReq} GetRecordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetRecordReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetRecordReq message.
         * @function verify
         * @memberof onebot.GetRecordReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetRecordReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file != null && message.hasOwnProperty("file"))
                if (!$util.isString(message.file))
                    return "file: string expected";
            if (message.outFormat != null && message.hasOwnProperty("outFormat"))
                if (!$util.isString(message.outFormat))
                    return "outFormat: string expected";
            return null;
        };

        /**
         * Creates a GetRecordReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetRecordReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetRecordReq} GetRecordReq
         */
        GetRecordReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetRecordReq)
                return object;
            var message = new $root.onebot.GetRecordReq();
            if (object.file != null)
                message.file = String(object.file);
            if (object.outFormat != null)
                message.outFormat = String(object.outFormat);
            return message;
        };

        /**
         * Creates a plain object from a GetRecordReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetRecordReq
         * @static
         * @param {onebot.GetRecordReq} message GetRecordReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetRecordReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.file = "";
                object.outFormat = "";
            }
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = message.file;
            if (message.outFormat != null && message.hasOwnProperty("outFormat"))
                object.outFormat = message.outFormat;
            return object;
        };

        /**
         * Converts this GetRecordReq to JSON.
         * @function toJSON
         * @memberof onebot.GetRecordReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetRecordReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetRecordReq;
    })();

    onebot.GetRecordResp = (function() {

        /**
         * Properties of a GetRecordResp.
         * @memberof onebot
         * @interface IGetRecordResp
         * @property {string|null} [file] GetRecordResp file
         */

        /**
         * Constructs a new GetRecordResp.
         * @memberof onebot
         * @classdesc Represents a GetRecordResp.
         * @implements IGetRecordResp
         * @constructor
         * @param {onebot.IGetRecordResp=} [properties] Properties to set
         */
        function GetRecordResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetRecordResp file.
         * @member {string} file
         * @memberof onebot.GetRecordResp
         * @instance
         */
        GetRecordResp.prototype.file = "";

        /**
         * Creates a new GetRecordResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetRecordResp
         * @static
         * @param {onebot.IGetRecordResp=} [properties] Properties to set
         * @returns {onebot.GetRecordResp} GetRecordResp instance
         */
        GetRecordResp.create = function create(properties) {
            return new GetRecordResp(properties);
        };

        /**
         * Encodes the specified GetRecordResp message. Does not implicitly {@link onebot.GetRecordResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetRecordResp
         * @static
         * @param {onebot.IGetRecordResp} message GetRecordResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetRecordResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
            return writer;
        };

        /**
         * Encodes the specified GetRecordResp message, length delimited. Does not implicitly {@link onebot.GetRecordResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetRecordResp
         * @static
         * @param {onebot.IGetRecordResp} message GetRecordResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetRecordResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetRecordResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetRecordResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetRecordResp} GetRecordResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetRecordResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetRecordResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetRecordResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetRecordResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetRecordResp} GetRecordResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetRecordResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetRecordResp message.
         * @function verify
         * @memberof onebot.GetRecordResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetRecordResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file != null && message.hasOwnProperty("file"))
                if (!$util.isString(message.file))
                    return "file: string expected";
            return null;
        };

        /**
         * Creates a GetRecordResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetRecordResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetRecordResp} GetRecordResp
         */
        GetRecordResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetRecordResp)
                return object;
            var message = new $root.onebot.GetRecordResp();
            if (object.file != null)
                message.file = String(object.file);
            return message;
        };

        /**
         * Creates a plain object from a GetRecordResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetRecordResp
         * @static
         * @param {onebot.GetRecordResp} message GetRecordResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetRecordResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file = "";
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = message.file;
            return object;
        };

        /**
         * Converts this GetRecordResp to JSON.
         * @function toJSON
         * @memberof onebot.GetRecordResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetRecordResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetRecordResp;
    })();

    onebot.GetImageReq = (function() {

        /**
         * Properties of a GetImageReq.
         * @memberof onebot
         * @interface IGetImageReq
         * @property {string|null} [file] GetImageReq file
         */

        /**
         * Constructs a new GetImageReq.
         * @memberof onebot
         * @classdesc Represents a GetImageReq.
         * @implements IGetImageReq
         * @constructor
         * @param {onebot.IGetImageReq=} [properties] Properties to set
         */
        function GetImageReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetImageReq file.
         * @member {string} file
         * @memberof onebot.GetImageReq
         * @instance
         */
        GetImageReq.prototype.file = "";

        /**
         * Creates a new GetImageReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetImageReq
         * @static
         * @param {onebot.IGetImageReq=} [properties] Properties to set
         * @returns {onebot.GetImageReq} GetImageReq instance
         */
        GetImageReq.create = function create(properties) {
            return new GetImageReq(properties);
        };

        /**
         * Encodes the specified GetImageReq message. Does not implicitly {@link onebot.GetImageReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetImageReq
         * @static
         * @param {onebot.IGetImageReq} message GetImageReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetImageReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
            return writer;
        };

        /**
         * Encodes the specified GetImageReq message, length delimited. Does not implicitly {@link onebot.GetImageReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetImageReq
         * @static
         * @param {onebot.IGetImageReq} message GetImageReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetImageReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetImageReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetImageReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetImageReq} GetImageReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetImageReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetImageReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetImageReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetImageReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetImageReq} GetImageReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetImageReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetImageReq message.
         * @function verify
         * @memberof onebot.GetImageReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetImageReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file != null && message.hasOwnProperty("file"))
                if (!$util.isString(message.file))
                    return "file: string expected";
            return null;
        };

        /**
         * Creates a GetImageReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetImageReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetImageReq} GetImageReq
         */
        GetImageReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetImageReq)
                return object;
            var message = new $root.onebot.GetImageReq();
            if (object.file != null)
                message.file = String(object.file);
            return message;
        };

        /**
         * Creates a plain object from a GetImageReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetImageReq
         * @static
         * @param {onebot.GetImageReq} message GetImageReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetImageReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file = "";
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = message.file;
            return object;
        };

        /**
         * Converts this GetImageReq to JSON.
         * @function toJSON
         * @memberof onebot.GetImageReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetImageReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetImageReq;
    })();

    onebot.GetImageResp = (function() {

        /**
         * Properties of a GetImageResp.
         * @memberof onebot
         * @interface IGetImageResp
         * @property {string|null} [file] GetImageResp file
         */

        /**
         * Constructs a new GetImageResp.
         * @memberof onebot
         * @classdesc Represents a GetImageResp.
         * @implements IGetImageResp
         * @constructor
         * @param {onebot.IGetImageResp=} [properties] Properties to set
         */
        function GetImageResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetImageResp file.
         * @member {string} file
         * @memberof onebot.GetImageResp
         * @instance
         */
        GetImageResp.prototype.file = "";

        /**
         * Creates a new GetImageResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetImageResp
         * @static
         * @param {onebot.IGetImageResp=} [properties] Properties to set
         * @returns {onebot.GetImageResp} GetImageResp instance
         */
        GetImageResp.create = function create(properties) {
            return new GetImageResp(properties);
        };

        /**
         * Encodes the specified GetImageResp message. Does not implicitly {@link onebot.GetImageResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetImageResp
         * @static
         * @param {onebot.IGetImageResp} message GetImageResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetImageResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
            return writer;
        };

        /**
         * Encodes the specified GetImageResp message, length delimited. Does not implicitly {@link onebot.GetImageResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetImageResp
         * @static
         * @param {onebot.IGetImageResp} message GetImageResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetImageResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetImageResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetImageResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetImageResp} GetImageResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetImageResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetImageResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.file = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetImageResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetImageResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetImageResp} GetImageResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetImageResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetImageResp message.
         * @function verify
         * @memberof onebot.GetImageResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetImageResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.file != null && message.hasOwnProperty("file"))
                if (!$util.isString(message.file))
                    return "file: string expected";
            return null;
        };

        /**
         * Creates a GetImageResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetImageResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetImageResp} GetImageResp
         */
        GetImageResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetImageResp)
                return object;
            var message = new $root.onebot.GetImageResp();
            if (object.file != null)
                message.file = String(object.file);
            return message;
        };

        /**
         * Creates a plain object from a GetImageResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetImageResp
         * @static
         * @param {onebot.GetImageResp} message GetImageResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetImageResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.file = "";
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = message.file;
            return object;
        };

        /**
         * Converts this GetImageResp to JSON.
         * @function toJSON
         * @memberof onebot.GetImageResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetImageResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetImageResp;
    })();

    onebot.CanSendImageReq = (function() {

        /**
         * Properties of a CanSendImageReq.
         * @memberof onebot
         * @interface ICanSendImageReq
         */

        /**
         * Constructs a new CanSendImageReq.
         * @memberof onebot
         * @classdesc Represents a CanSendImageReq.
         * @implements ICanSendImageReq
         * @constructor
         * @param {onebot.ICanSendImageReq=} [properties] Properties to set
         */
        function CanSendImageReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new CanSendImageReq instance using the specified properties.
         * @function create
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {onebot.ICanSendImageReq=} [properties] Properties to set
         * @returns {onebot.CanSendImageReq} CanSendImageReq instance
         */
        CanSendImageReq.create = function create(properties) {
            return new CanSendImageReq(properties);
        };

        /**
         * Encodes the specified CanSendImageReq message. Does not implicitly {@link onebot.CanSendImageReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {onebot.ICanSendImageReq} message CanSendImageReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendImageReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified CanSendImageReq message, length delimited. Does not implicitly {@link onebot.CanSendImageReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {onebot.ICanSendImageReq} message CanSendImageReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendImageReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CanSendImageReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CanSendImageReq} CanSendImageReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendImageReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CanSendImageReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CanSendImageReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CanSendImageReq} CanSendImageReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendImageReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CanSendImageReq message.
         * @function verify
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CanSendImageReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a CanSendImageReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CanSendImageReq} CanSendImageReq
         */
        CanSendImageReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CanSendImageReq)
                return object;
            return new $root.onebot.CanSendImageReq();
        };

        /**
         * Creates a plain object from a CanSendImageReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CanSendImageReq
         * @static
         * @param {onebot.CanSendImageReq} message CanSendImageReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CanSendImageReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this CanSendImageReq to JSON.
         * @function toJSON
         * @memberof onebot.CanSendImageReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CanSendImageReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CanSendImageReq;
    })();

    onebot.CanSendImageResp = (function() {

        /**
         * Properties of a CanSendImageResp.
         * @memberof onebot
         * @interface ICanSendImageResp
         * @property {boolean|null} [yes] CanSendImageResp yes
         */

        /**
         * Constructs a new CanSendImageResp.
         * @memberof onebot
         * @classdesc Represents a CanSendImageResp.
         * @implements ICanSendImageResp
         * @constructor
         * @param {onebot.ICanSendImageResp=} [properties] Properties to set
         */
        function CanSendImageResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CanSendImageResp yes.
         * @member {boolean} yes
         * @memberof onebot.CanSendImageResp
         * @instance
         */
        CanSendImageResp.prototype.yes = false;

        /**
         * Creates a new CanSendImageResp instance using the specified properties.
         * @function create
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {onebot.ICanSendImageResp=} [properties] Properties to set
         * @returns {onebot.CanSendImageResp} CanSendImageResp instance
         */
        CanSendImageResp.create = function create(properties) {
            return new CanSendImageResp(properties);
        };

        /**
         * Encodes the specified CanSendImageResp message. Does not implicitly {@link onebot.CanSendImageResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {onebot.ICanSendImageResp} message CanSendImageResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendImageResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.yes != null && Object.hasOwnProperty.call(message, "yes"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.yes);
            return writer;
        };

        /**
         * Encodes the specified CanSendImageResp message, length delimited. Does not implicitly {@link onebot.CanSendImageResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {onebot.ICanSendImageResp} message CanSendImageResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendImageResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CanSendImageResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CanSendImageResp} CanSendImageResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendImageResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CanSendImageResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.yes = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CanSendImageResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CanSendImageResp} CanSendImageResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendImageResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CanSendImageResp message.
         * @function verify
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CanSendImageResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.yes != null && message.hasOwnProperty("yes"))
                if (typeof message.yes !== "boolean")
                    return "yes: boolean expected";
            return null;
        };

        /**
         * Creates a CanSendImageResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CanSendImageResp} CanSendImageResp
         */
        CanSendImageResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CanSendImageResp)
                return object;
            var message = new $root.onebot.CanSendImageResp();
            if (object.yes != null)
                message.yes = Boolean(object.yes);
            return message;
        };

        /**
         * Creates a plain object from a CanSendImageResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CanSendImageResp
         * @static
         * @param {onebot.CanSendImageResp} message CanSendImageResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CanSendImageResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.yes = false;
            if (message.yes != null && message.hasOwnProperty("yes"))
                object.yes = message.yes;
            return object;
        };

        /**
         * Converts this CanSendImageResp to JSON.
         * @function toJSON
         * @memberof onebot.CanSendImageResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CanSendImageResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CanSendImageResp;
    })();

    onebot.CanSendRecordReq = (function() {

        /**
         * Properties of a CanSendRecordReq.
         * @memberof onebot
         * @interface ICanSendRecordReq
         */

        /**
         * Constructs a new CanSendRecordReq.
         * @memberof onebot
         * @classdesc Represents a CanSendRecordReq.
         * @implements ICanSendRecordReq
         * @constructor
         * @param {onebot.ICanSendRecordReq=} [properties] Properties to set
         */
        function CanSendRecordReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new CanSendRecordReq instance using the specified properties.
         * @function create
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {onebot.ICanSendRecordReq=} [properties] Properties to set
         * @returns {onebot.CanSendRecordReq} CanSendRecordReq instance
         */
        CanSendRecordReq.create = function create(properties) {
            return new CanSendRecordReq(properties);
        };

        /**
         * Encodes the specified CanSendRecordReq message. Does not implicitly {@link onebot.CanSendRecordReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {onebot.ICanSendRecordReq} message CanSendRecordReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendRecordReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified CanSendRecordReq message, length delimited. Does not implicitly {@link onebot.CanSendRecordReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {onebot.ICanSendRecordReq} message CanSendRecordReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendRecordReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CanSendRecordReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CanSendRecordReq} CanSendRecordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendRecordReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CanSendRecordReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CanSendRecordReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CanSendRecordReq} CanSendRecordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendRecordReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CanSendRecordReq message.
         * @function verify
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CanSendRecordReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a CanSendRecordReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CanSendRecordReq} CanSendRecordReq
         */
        CanSendRecordReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CanSendRecordReq)
                return object;
            return new $root.onebot.CanSendRecordReq();
        };

        /**
         * Creates a plain object from a CanSendRecordReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CanSendRecordReq
         * @static
         * @param {onebot.CanSendRecordReq} message CanSendRecordReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CanSendRecordReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this CanSendRecordReq to JSON.
         * @function toJSON
         * @memberof onebot.CanSendRecordReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CanSendRecordReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CanSendRecordReq;
    })();

    onebot.CanSendRecordResp = (function() {

        /**
         * Properties of a CanSendRecordResp.
         * @memberof onebot
         * @interface ICanSendRecordResp
         * @property {boolean|null} [yes] CanSendRecordResp yes
         */

        /**
         * Constructs a new CanSendRecordResp.
         * @memberof onebot
         * @classdesc Represents a CanSendRecordResp.
         * @implements ICanSendRecordResp
         * @constructor
         * @param {onebot.ICanSendRecordResp=} [properties] Properties to set
         */
        function CanSendRecordResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CanSendRecordResp yes.
         * @member {boolean} yes
         * @memberof onebot.CanSendRecordResp
         * @instance
         */
        CanSendRecordResp.prototype.yes = false;

        /**
         * Creates a new CanSendRecordResp instance using the specified properties.
         * @function create
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {onebot.ICanSendRecordResp=} [properties] Properties to set
         * @returns {onebot.CanSendRecordResp} CanSendRecordResp instance
         */
        CanSendRecordResp.create = function create(properties) {
            return new CanSendRecordResp(properties);
        };

        /**
         * Encodes the specified CanSendRecordResp message. Does not implicitly {@link onebot.CanSendRecordResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {onebot.ICanSendRecordResp} message CanSendRecordResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendRecordResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.yes != null && Object.hasOwnProperty.call(message, "yes"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.yes);
            return writer;
        };

        /**
         * Encodes the specified CanSendRecordResp message, length delimited. Does not implicitly {@link onebot.CanSendRecordResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {onebot.ICanSendRecordResp} message CanSendRecordResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CanSendRecordResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CanSendRecordResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CanSendRecordResp} CanSendRecordResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendRecordResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CanSendRecordResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.yes = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CanSendRecordResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CanSendRecordResp} CanSendRecordResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CanSendRecordResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CanSendRecordResp message.
         * @function verify
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CanSendRecordResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.yes != null && message.hasOwnProperty("yes"))
                if (typeof message.yes !== "boolean")
                    return "yes: boolean expected";
            return null;
        };

        /**
         * Creates a CanSendRecordResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CanSendRecordResp} CanSendRecordResp
         */
        CanSendRecordResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CanSendRecordResp)
                return object;
            var message = new $root.onebot.CanSendRecordResp();
            if (object.yes != null)
                message.yes = Boolean(object.yes);
            return message;
        };

        /**
         * Creates a plain object from a CanSendRecordResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CanSendRecordResp
         * @static
         * @param {onebot.CanSendRecordResp} message CanSendRecordResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CanSendRecordResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.yes = false;
            if (message.yes != null && message.hasOwnProperty("yes"))
                object.yes = message.yes;
            return object;
        };

        /**
         * Converts this CanSendRecordResp to JSON.
         * @function toJSON
         * @memberof onebot.CanSendRecordResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CanSendRecordResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CanSendRecordResp;
    })();

    onebot.GetStatusReq = (function() {

        /**
         * Properties of a GetStatusReq.
         * @memberof onebot
         * @interface IGetStatusReq
         */

        /**
         * Constructs a new GetStatusReq.
         * @memberof onebot
         * @classdesc Represents a GetStatusReq.
         * @implements IGetStatusReq
         * @constructor
         * @param {onebot.IGetStatusReq=} [properties] Properties to set
         */
        function GetStatusReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetStatusReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetStatusReq
         * @static
         * @param {onebot.IGetStatusReq=} [properties] Properties to set
         * @returns {onebot.GetStatusReq} GetStatusReq instance
         */
        GetStatusReq.create = function create(properties) {
            return new GetStatusReq(properties);
        };

        /**
         * Encodes the specified GetStatusReq message. Does not implicitly {@link onebot.GetStatusReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetStatusReq
         * @static
         * @param {onebot.IGetStatusReq} message GetStatusReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStatusReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetStatusReq message, length delimited. Does not implicitly {@link onebot.GetStatusReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetStatusReq
         * @static
         * @param {onebot.IGetStatusReq} message GetStatusReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStatusReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetStatusReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetStatusReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetStatusReq} GetStatusReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStatusReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetStatusReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetStatusReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetStatusReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetStatusReq} GetStatusReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStatusReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetStatusReq message.
         * @function verify
         * @memberof onebot.GetStatusReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetStatusReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetStatusReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetStatusReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetStatusReq} GetStatusReq
         */
        GetStatusReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetStatusReq)
                return object;
            return new $root.onebot.GetStatusReq();
        };

        /**
         * Creates a plain object from a GetStatusReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetStatusReq
         * @static
         * @param {onebot.GetStatusReq} message GetStatusReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetStatusReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetStatusReq to JSON.
         * @function toJSON
         * @memberof onebot.GetStatusReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetStatusReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetStatusReq;
    })();

    onebot.GetStatusResp = (function() {

        /**
         * Properties of a GetStatusResp.
         * @memberof onebot
         * @interface IGetStatusResp
         * @property {boolean|null} [online] GetStatusResp online
         * @property {boolean|null} [good] GetStatusResp good
         */

        /**
         * Constructs a new GetStatusResp.
         * @memberof onebot
         * @classdesc Represents a GetStatusResp.
         * @implements IGetStatusResp
         * @constructor
         * @param {onebot.IGetStatusResp=} [properties] Properties to set
         */
        function GetStatusResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetStatusResp online.
         * @member {boolean} online
         * @memberof onebot.GetStatusResp
         * @instance
         */
        GetStatusResp.prototype.online = false;

        /**
         * GetStatusResp good.
         * @member {boolean} good
         * @memberof onebot.GetStatusResp
         * @instance
         */
        GetStatusResp.prototype.good = false;

        /**
         * Creates a new GetStatusResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetStatusResp
         * @static
         * @param {onebot.IGetStatusResp=} [properties] Properties to set
         * @returns {onebot.GetStatusResp} GetStatusResp instance
         */
        GetStatusResp.create = function create(properties) {
            return new GetStatusResp(properties);
        };

        /**
         * Encodes the specified GetStatusResp message. Does not implicitly {@link onebot.GetStatusResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetStatusResp
         * @static
         * @param {onebot.IGetStatusResp} message GetStatusResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStatusResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.online != null && Object.hasOwnProperty.call(message, "online"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.online);
            if (message.good != null && Object.hasOwnProperty.call(message, "good"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.good);
            return writer;
        };

        /**
         * Encodes the specified GetStatusResp message, length delimited. Does not implicitly {@link onebot.GetStatusResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetStatusResp
         * @static
         * @param {onebot.IGetStatusResp} message GetStatusResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetStatusResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetStatusResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetStatusResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetStatusResp} GetStatusResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStatusResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetStatusResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.online = reader.bool();
                    break;
                case 2:
                    message.good = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetStatusResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetStatusResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetStatusResp} GetStatusResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetStatusResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetStatusResp message.
         * @function verify
         * @memberof onebot.GetStatusResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetStatusResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.online != null && message.hasOwnProperty("online"))
                if (typeof message.online !== "boolean")
                    return "online: boolean expected";
            if (message.good != null && message.hasOwnProperty("good"))
                if (typeof message.good !== "boolean")
                    return "good: boolean expected";
            return null;
        };

        /**
         * Creates a GetStatusResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetStatusResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetStatusResp} GetStatusResp
         */
        GetStatusResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetStatusResp)
                return object;
            var message = new $root.onebot.GetStatusResp();
            if (object.online != null)
                message.online = Boolean(object.online);
            if (object.good != null)
                message.good = Boolean(object.good);
            return message;
        };

        /**
         * Creates a plain object from a GetStatusResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetStatusResp
         * @static
         * @param {onebot.GetStatusResp} message GetStatusResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetStatusResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.online = false;
                object.good = false;
            }
            if (message.online != null && message.hasOwnProperty("online"))
                object.online = message.online;
            if (message.good != null && message.hasOwnProperty("good"))
                object.good = message.good;
            return object;
        };

        /**
         * Converts this GetStatusResp to JSON.
         * @function toJSON
         * @memberof onebot.GetStatusResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetStatusResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetStatusResp;
    })();

    onebot.GetVersionInfoReq = (function() {

        /**
         * Properties of a GetVersionInfoReq.
         * @memberof onebot
         * @interface IGetVersionInfoReq
         */

        /**
         * Constructs a new GetVersionInfoReq.
         * @memberof onebot
         * @classdesc Represents a GetVersionInfoReq.
         * @implements IGetVersionInfoReq
         * @constructor
         * @param {onebot.IGetVersionInfoReq=} [properties] Properties to set
         */
        function GetVersionInfoReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GetVersionInfoReq instance using the specified properties.
         * @function create
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {onebot.IGetVersionInfoReq=} [properties] Properties to set
         * @returns {onebot.GetVersionInfoReq} GetVersionInfoReq instance
         */
        GetVersionInfoReq.create = function create(properties) {
            return new GetVersionInfoReq(properties);
        };

        /**
         * Encodes the specified GetVersionInfoReq message. Does not implicitly {@link onebot.GetVersionInfoReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {onebot.IGetVersionInfoReq} message GetVersionInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetVersionInfoReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GetVersionInfoReq message, length delimited. Does not implicitly {@link onebot.GetVersionInfoReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {onebot.IGetVersionInfoReq} message GetVersionInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetVersionInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetVersionInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetVersionInfoReq} GetVersionInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetVersionInfoReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetVersionInfoReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetVersionInfoReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetVersionInfoReq} GetVersionInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetVersionInfoReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetVersionInfoReq message.
         * @function verify
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetVersionInfoReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GetVersionInfoReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetVersionInfoReq} GetVersionInfoReq
         */
        GetVersionInfoReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetVersionInfoReq)
                return object;
            return new $root.onebot.GetVersionInfoReq();
        };

        /**
         * Creates a plain object from a GetVersionInfoReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetVersionInfoReq
         * @static
         * @param {onebot.GetVersionInfoReq} message GetVersionInfoReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetVersionInfoReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GetVersionInfoReq to JSON.
         * @function toJSON
         * @memberof onebot.GetVersionInfoReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetVersionInfoReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetVersionInfoReq;
    })();

    onebot.GetVersionInfoResp = (function() {

        /**
         * Properties of a GetVersionInfoResp.
         * @memberof onebot
         * @interface IGetVersionInfoResp
         * @property {string|null} [appName] GetVersionInfoResp appName
         * @property {string|null} [appVersion] GetVersionInfoResp appVersion
         * @property {string|null} [protocolVersion] GetVersionInfoResp protocolVersion
         * @property {Object.<string,string>|null} [extra] GetVersionInfoResp extra
         */

        /**
         * Constructs a new GetVersionInfoResp.
         * @memberof onebot
         * @classdesc Represents a GetVersionInfoResp.
         * @implements IGetVersionInfoResp
         * @constructor
         * @param {onebot.IGetVersionInfoResp=} [properties] Properties to set
         */
        function GetVersionInfoResp(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetVersionInfoResp appName.
         * @member {string} appName
         * @memberof onebot.GetVersionInfoResp
         * @instance
         */
        GetVersionInfoResp.prototype.appName = "";

        /**
         * GetVersionInfoResp appVersion.
         * @member {string} appVersion
         * @memberof onebot.GetVersionInfoResp
         * @instance
         */
        GetVersionInfoResp.prototype.appVersion = "";

        /**
         * GetVersionInfoResp protocolVersion.
         * @member {string} protocolVersion
         * @memberof onebot.GetVersionInfoResp
         * @instance
         */
        GetVersionInfoResp.prototype.protocolVersion = "";

        /**
         * GetVersionInfoResp extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GetVersionInfoResp
         * @instance
         */
        GetVersionInfoResp.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GetVersionInfoResp instance using the specified properties.
         * @function create
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {onebot.IGetVersionInfoResp=} [properties] Properties to set
         * @returns {onebot.GetVersionInfoResp} GetVersionInfoResp instance
         */
        GetVersionInfoResp.create = function create(properties) {
            return new GetVersionInfoResp(properties);
        };

        /**
         * Encodes the specified GetVersionInfoResp message. Does not implicitly {@link onebot.GetVersionInfoResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {onebot.IGetVersionInfoResp} message GetVersionInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetVersionInfoResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appName != null && Object.hasOwnProperty.call(message, "appName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.appName);
            if (message.appVersion != null && Object.hasOwnProperty.call(message, "appVersion"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.appVersion);
            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, "protocolVersion"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.protocolVersion);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetVersionInfoResp message, length delimited. Does not implicitly {@link onebot.GetVersionInfoResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {onebot.IGetVersionInfoResp} message GetVersionInfoResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetVersionInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetVersionInfoResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GetVersionInfoResp} GetVersionInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetVersionInfoResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GetVersionInfoResp(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appName = reader.string();
                    break;
                case 2:
                    message.appVersion = reader.string();
                    break;
                case 3:
                    message.protocolVersion = reader.string();
                    break;
                case 4:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetVersionInfoResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GetVersionInfoResp} GetVersionInfoResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetVersionInfoResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetVersionInfoResp message.
         * @function verify
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetVersionInfoResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appName != null && message.hasOwnProperty("appName"))
                if (!$util.isString(message.appName))
                    return "appName: string expected";
            if (message.appVersion != null && message.hasOwnProperty("appVersion"))
                if (!$util.isString(message.appVersion))
                    return "appVersion: string expected";
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                if (!$util.isString(message.protocolVersion))
                    return "protocolVersion: string expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GetVersionInfoResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GetVersionInfoResp} GetVersionInfoResp
         */
        GetVersionInfoResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GetVersionInfoResp)
                return object;
            var message = new $root.onebot.GetVersionInfoResp();
            if (object.appName != null)
                message.appName = String(object.appName);
            if (object.appVersion != null)
                message.appVersion = String(object.appVersion);
            if (object.protocolVersion != null)
                message.protocolVersion = String(object.protocolVersion);
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GetVersionInfoResp.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GetVersionInfoResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GetVersionInfoResp
         * @static
         * @param {onebot.GetVersionInfoResp} message GetVersionInfoResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetVersionInfoResp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                object.appName = "";
                object.appVersion = "";
                object.protocolVersion = "";
            }
            if (message.appName != null && message.hasOwnProperty("appName"))
                object.appName = message.appName;
            if (message.appVersion != null && message.hasOwnProperty("appVersion"))
                object.appVersion = message.appVersion;
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                object.protocolVersion = message.protocolVersion;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GetVersionInfoResp to JSON.
         * @function toJSON
         * @memberof onebot.GetVersionInfoResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetVersionInfoResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetVersionInfoResp;
    })();

    onebot.SetRestartReq = (function() {

        /**
         * Properties of a SetRestartReq.
         * @memberof onebot
         * @interface ISetRestartReq
         * @property {number|null} [delay] SetRestartReq delay
         */

        /**
         * Constructs a new SetRestartReq.
         * @memberof onebot
         * @classdesc Represents a SetRestartReq.
         * @implements ISetRestartReq
         * @constructor
         * @param {onebot.ISetRestartReq=} [properties] Properties to set
         */
        function SetRestartReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetRestartReq delay.
         * @member {number} delay
         * @memberof onebot.SetRestartReq
         * @instance
         */
        SetRestartReq.prototype.delay = 0;

        /**
         * Creates a new SetRestartReq instance using the specified properties.
         * @function create
         * @memberof onebot.SetRestartReq
         * @static
         * @param {onebot.ISetRestartReq=} [properties] Properties to set
         * @returns {onebot.SetRestartReq} SetRestartReq instance
         */
        SetRestartReq.create = function create(properties) {
            return new SetRestartReq(properties);
        };

        /**
         * Encodes the specified SetRestartReq message. Does not implicitly {@link onebot.SetRestartReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetRestartReq
         * @static
         * @param {onebot.ISetRestartReq} message SetRestartReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetRestartReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.delay != null && Object.hasOwnProperty.call(message, "delay"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.delay);
            return writer;
        };

        /**
         * Encodes the specified SetRestartReq message, length delimited. Does not implicitly {@link onebot.SetRestartReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetRestartReq
         * @static
         * @param {onebot.ISetRestartReq} message SetRestartReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetRestartReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetRestartReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetRestartReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetRestartReq} SetRestartReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetRestartReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetRestartReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.delay = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetRestartReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetRestartReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetRestartReq} SetRestartReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetRestartReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetRestartReq message.
         * @function verify
         * @memberof onebot.SetRestartReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetRestartReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.delay != null && message.hasOwnProperty("delay"))
                if (!$util.isInteger(message.delay))
                    return "delay: integer expected";
            return null;
        };

        /**
         * Creates a SetRestartReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetRestartReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetRestartReq} SetRestartReq
         */
        SetRestartReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetRestartReq)
                return object;
            var message = new $root.onebot.SetRestartReq();
            if (object.delay != null)
                message.delay = object.delay | 0;
            return message;
        };

        /**
         * Creates a plain object from a SetRestartReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetRestartReq
         * @static
         * @param {onebot.SetRestartReq} message SetRestartReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetRestartReq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.delay = 0;
            if (message.delay != null && message.hasOwnProperty("delay"))
                object.delay = message.delay;
            return object;
        };

        /**
         * Converts this SetRestartReq to JSON.
         * @function toJSON
         * @memberof onebot.SetRestartReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetRestartReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetRestartReq;
    })();

    onebot.SetRestartResp = (function() {

        /**
         * Properties of a SetRestartResp.
         * @memberof onebot
         * @interface ISetRestartResp
         */

        /**
         * Constructs a new SetRestartResp.
         * @memberof onebot
         * @classdesc Represents a SetRestartResp.
         * @implements ISetRestartResp
         * @constructor
         * @param {onebot.ISetRestartResp=} [properties] Properties to set
         */
        function SetRestartResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new SetRestartResp instance using the specified properties.
         * @function create
         * @memberof onebot.SetRestartResp
         * @static
         * @param {onebot.ISetRestartResp=} [properties] Properties to set
         * @returns {onebot.SetRestartResp} SetRestartResp instance
         */
        SetRestartResp.create = function create(properties) {
            return new SetRestartResp(properties);
        };

        /**
         * Encodes the specified SetRestartResp message. Does not implicitly {@link onebot.SetRestartResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.SetRestartResp
         * @static
         * @param {onebot.ISetRestartResp} message SetRestartResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetRestartResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified SetRestartResp message, length delimited. Does not implicitly {@link onebot.SetRestartResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.SetRestartResp
         * @static
         * @param {onebot.ISetRestartResp} message SetRestartResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetRestartResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetRestartResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.SetRestartResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.SetRestartResp} SetRestartResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetRestartResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.SetRestartResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetRestartResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.SetRestartResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.SetRestartResp} SetRestartResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetRestartResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetRestartResp message.
         * @function verify
         * @memberof onebot.SetRestartResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetRestartResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a SetRestartResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.SetRestartResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.SetRestartResp} SetRestartResp
         */
        SetRestartResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.SetRestartResp)
                return object;
            return new $root.onebot.SetRestartResp();
        };

        /**
         * Creates a plain object from a SetRestartResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.SetRestartResp
         * @static
         * @param {onebot.SetRestartResp} message SetRestartResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetRestartResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this SetRestartResp to JSON.
         * @function toJSON
         * @memberof onebot.SetRestartResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetRestartResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetRestartResp;
    })();

    onebot.CleanCacheReq = (function() {

        /**
         * Properties of a CleanCacheReq.
         * @memberof onebot
         * @interface ICleanCacheReq
         */

        /**
         * Constructs a new CleanCacheReq.
         * @memberof onebot
         * @classdesc Represents a CleanCacheReq.
         * @implements ICleanCacheReq
         * @constructor
         * @param {onebot.ICleanCacheReq=} [properties] Properties to set
         */
        function CleanCacheReq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new CleanCacheReq instance using the specified properties.
         * @function create
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {onebot.ICleanCacheReq=} [properties] Properties to set
         * @returns {onebot.CleanCacheReq} CleanCacheReq instance
         */
        CleanCacheReq.create = function create(properties) {
            return new CleanCacheReq(properties);
        };

        /**
         * Encodes the specified CleanCacheReq message. Does not implicitly {@link onebot.CleanCacheReq.verify|verify} messages.
         * @function encode
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {onebot.ICleanCacheReq} message CleanCacheReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanCacheReq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified CleanCacheReq message, length delimited. Does not implicitly {@link onebot.CleanCacheReq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {onebot.ICleanCacheReq} message CleanCacheReq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanCacheReq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanCacheReq message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CleanCacheReq} CleanCacheReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanCacheReq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CleanCacheReq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CleanCacheReq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CleanCacheReq} CleanCacheReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanCacheReq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanCacheReq message.
         * @function verify
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanCacheReq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a CleanCacheReq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CleanCacheReq} CleanCacheReq
         */
        CleanCacheReq.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CleanCacheReq)
                return object;
            return new $root.onebot.CleanCacheReq();
        };

        /**
         * Creates a plain object from a CleanCacheReq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CleanCacheReq
         * @static
         * @param {onebot.CleanCacheReq} message CleanCacheReq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanCacheReq.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this CleanCacheReq to JSON.
         * @function toJSON
         * @memberof onebot.CleanCacheReq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanCacheReq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CleanCacheReq;
    })();

    onebot.CleanCacheResp = (function() {

        /**
         * Properties of a CleanCacheResp.
         * @memberof onebot
         * @interface ICleanCacheResp
         */

        /**
         * Constructs a new CleanCacheResp.
         * @memberof onebot
         * @classdesc Represents a CleanCacheResp.
         * @implements ICleanCacheResp
         * @constructor
         * @param {onebot.ICleanCacheResp=} [properties] Properties to set
         */
        function CleanCacheResp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new CleanCacheResp instance using the specified properties.
         * @function create
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {onebot.ICleanCacheResp=} [properties] Properties to set
         * @returns {onebot.CleanCacheResp} CleanCacheResp instance
         */
        CleanCacheResp.create = function create(properties) {
            return new CleanCacheResp(properties);
        };

        /**
         * Encodes the specified CleanCacheResp message. Does not implicitly {@link onebot.CleanCacheResp.verify|verify} messages.
         * @function encode
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {onebot.ICleanCacheResp} message CleanCacheResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanCacheResp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified CleanCacheResp message, length delimited. Does not implicitly {@link onebot.CleanCacheResp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {onebot.ICleanCacheResp} message CleanCacheResp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanCacheResp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanCacheResp message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.CleanCacheResp} CleanCacheResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanCacheResp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.CleanCacheResp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CleanCacheResp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.CleanCacheResp} CleanCacheResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanCacheResp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanCacheResp message.
         * @function verify
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanCacheResp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a CleanCacheResp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.CleanCacheResp} CleanCacheResp
         */
        CleanCacheResp.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.CleanCacheResp)
                return object;
            return new $root.onebot.CleanCacheResp();
        };

        /**
         * Creates a plain object from a CleanCacheResp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.CleanCacheResp
         * @static
         * @param {onebot.CleanCacheResp} message CleanCacheResp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanCacheResp.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this CleanCacheResp to JSON.
         * @function toJSON
         * @memberof onebot.CleanCacheResp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanCacheResp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CleanCacheResp;
    })();

    onebot.Message = (function() {

        /**
         * Properties of a Message.
         * @memberof onebot
         * @interface IMessage
         * @property {string|null} [type] Message type
         * @property {Object.<string,string>|null} [data] Message data
         */

        /**
         * Constructs a new Message.
         * @memberof onebot
         * @classdesc Represents a Message.
         * @implements IMessage
         * @constructor
         * @param {onebot.IMessage=} [properties] Properties to set
         */
        function Message(properties) {
            this.data = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Message type.
         * @member {string} type
         * @memberof onebot.Message
         * @instance
         */
        Message.prototype.type = "";

        /**
         * Message data.
         * @member {Object.<string,string>} data
         * @memberof onebot.Message
         * @instance
         */
        Message.prototype.data = $util.emptyObject;

        /**
         * Creates a new Message instance using the specified properties.
         * @function create
         * @memberof onebot.Message
         * @static
         * @param {onebot.IMessage=} [properties] Properties to set
         * @returns {onebot.Message} Message instance
         */
        Message.create = function create(properties) {
            return new Message(properties);
        };

        /**
         * Encodes the specified Message message. Does not implicitly {@link onebot.Message.verify|verify} messages.
         * @function encode
         * @memberof onebot.Message
         * @static
         * @param {onebot.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                for (var keys = Object.keys(message.data), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.data[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Message message, length delimited. Does not implicitly {@link onebot.Message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.Message
         * @static
         * @param {onebot.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Message message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.Message(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                case 2:
                    if (message.data === $util.emptyObject)
                        message.data = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.data[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Message message.
         * @function verify
         * @memberof onebot.Message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!$util.isObject(message.data))
                    return "data: object expected";
                var key = Object.keys(message.data);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.data[key[i]]))
                        return "data: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.Message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.Message} Message
         */
        Message.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.Message)
                return object;
            var message = new $root.onebot.Message();
            if (object.type != null)
                message.type = String(object.type);
            if (object.data) {
                if (typeof object.data !== "object")
                    throw TypeError(".onebot.Message.data: object expected");
                message.data = {};
                for (var keys = Object.keys(object.data), i = 0; i < keys.length; ++i)
                    message.data[keys[i]] = String(object.data[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a Message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.Message
         * @static
         * @param {onebot.Message} message Message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.data = {};
            if (options.defaults)
                object.type = "";
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            var keys2;
            if (message.data && (keys2 = Object.keys(message.data)).length) {
                object.data = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.data[keys2[j]] = message.data[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this Message to JSON.
         * @function toJSON
         * @memberof onebot.Message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Message;
    })();

    onebot.PrivateMessageEvent = (function() {

        /**
         * Properties of a PrivateMessageEvent.
         * @memberof onebot
         * @interface IPrivateMessageEvent
         * @property {Long|null} [time] PrivateMessageEvent time
         * @property {Long|null} [selfId] PrivateMessageEvent selfId
         * @property {string|null} [postType] PrivateMessageEvent postType
         * @property {string|null} [messageType] PrivateMessageEvent messageType
         * @property {string|null} [subType] PrivateMessageEvent subType
         * @property {number|null} [messageId] PrivateMessageEvent messageId
         * @property {Long|null} [userId] PrivateMessageEvent userId
         * @property {Array.<onebot.IMessage>|null} [message] PrivateMessageEvent message
         * @property {string|null} [rawMessage] PrivateMessageEvent rawMessage
         * @property {number|null} [font] PrivateMessageEvent font
         * @property {onebot.PrivateMessageEvent.ISender|null} [sender] PrivateMessageEvent sender
         * @property {Object.<string,string>|null} [extra] PrivateMessageEvent extra
         */

        /**
         * Constructs a new PrivateMessageEvent.
         * @memberof onebot
         * @classdesc Represents a PrivateMessageEvent.
         * @implements IPrivateMessageEvent
         * @constructor
         * @param {onebot.IPrivateMessageEvent=} [properties] Properties to set
         */
        function PrivateMessageEvent(properties) {
            this.message = [];
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PrivateMessageEvent time.
         * @member {Long} time
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PrivateMessageEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PrivateMessageEvent postType.
         * @member {string} postType
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.postType = "";

        /**
         * PrivateMessageEvent messageType.
         * @member {string} messageType
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.messageType = "";

        /**
         * PrivateMessageEvent subType.
         * @member {string} subType
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.subType = "";

        /**
         * PrivateMessageEvent messageId.
         * @member {number} messageId
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.messageId = 0;

        /**
         * PrivateMessageEvent userId.
         * @member {Long} userId
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PrivateMessageEvent message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.message = $util.emptyArray;

        /**
         * PrivateMessageEvent rawMessage.
         * @member {string} rawMessage
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.rawMessage = "";

        /**
         * PrivateMessageEvent font.
         * @member {number} font
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.font = 0;

        /**
         * PrivateMessageEvent sender.
         * @member {onebot.PrivateMessageEvent.ISender|null|undefined} sender
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.sender = null;

        /**
         * PrivateMessageEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.PrivateMessageEvent
         * @instance
         */
        PrivateMessageEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new PrivateMessageEvent instance using the specified properties.
         * @function create
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {onebot.IPrivateMessageEvent=} [properties] Properties to set
         * @returns {onebot.PrivateMessageEvent} PrivateMessageEvent instance
         */
        PrivateMessageEvent.create = function create(properties) {
            return new PrivateMessageEvent(properties);
        };

        /**
         * Encodes the specified PrivateMessageEvent message. Does not implicitly {@link onebot.PrivateMessageEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {onebot.IPrivateMessageEvent} message PrivateMessageEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PrivateMessageEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.messageType != null && Object.hasOwnProperty.call(message, "messageType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.messageType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.messageId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.userId);
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.rawMessage != null && Object.hasOwnProperty.call(message, "rawMessage"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.rawMessage);
            if (message.font != null && Object.hasOwnProperty.call(message, "font"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.font);
            if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                $root.onebot.PrivateMessageEvent.Sender.encode(message.sender, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PrivateMessageEvent message, length delimited. Does not implicitly {@link onebot.PrivateMessageEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {onebot.IPrivateMessageEvent} message PrivateMessageEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PrivateMessageEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PrivateMessageEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.PrivateMessageEvent} PrivateMessageEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PrivateMessageEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.PrivateMessageEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.messageType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.messageId = reader.int32();
                    break;
                case 7:
                    message.userId = reader.int64();
                    break;
                case 8:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.rawMessage = reader.string();
                    break;
                case 10:
                    message.font = reader.int32();
                    break;
                case 11:
                    message.sender = $root.onebot.PrivateMessageEvent.Sender.decode(reader, reader.uint32());
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PrivateMessageEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.PrivateMessageEvent} PrivateMessageEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PrivateMessageEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PrivateMessageEvent message.
         * @function verify
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PrivateMessageEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                if (!$util.isString(message.messageType))
                    return "messageType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                if (!$util.isString(message.rawMessage))
                    return "rawMessage: string expected";
            if (message.font != null && message.hasOwnProperty("font"))
                if (!$util.isInteger(message.font))
                    return "font: integer expected";
            if (message.sender != null && message.hasOwnProperty("sender")) {
                var error = $root.onebot.PrivateMessageEvent.Sender.verify(message.sender);
                if (error)
                    return "sender." + error;
            }
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a PrivateMessageEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.PrivateMessageEvent} PrivateMessageEvent
         */
        PrivateMessageEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.PrivateMessageEvent)
                return object;
            var message = new $root.onebot.PrivateMessageEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.messageType != null)
                message.messageType = String(object.messageType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.PrivateMessageEvent.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.PrivateMessageEvent.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.rawMessage != null)
                message.rawMessage = String(object.rawMessage);
            if (object.font != null)
                message.font = object.font | 0;
            if (object.sender != null) {
                if (typeof object.sender !== "object")
                    throw TypeError(".onebot.PrivateMessageEvent.sender: object expected");
                message.sender = $root.onebot.PrivateMessageEvent.Sender.fromObject(object.sender);
            }
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.PrivateMessageEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a PrivateMessageEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.PrivateMessageEvent
         * @static
         * @param {onebot.PrivateMessageEvent} message PrivateMessageEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PrivateMessageEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.messageType = "";
                object.subType = "";
                object.messageId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.rawMessage = "";
                object.font = 0;
                object.sender = null;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                object.messageType = message.messageType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                object.rawMessage = message.rawMessage;
            if (message.font != null && message.hasOwnProperty("font"))
                object.font = message.font;
            if (message.sender != null && message.hasOwnProperty("sender"))
                object.sender = $root.onebot.PrivateMessageEvent.Sender.toObject(message.sender, options);
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this PrivateMessageEvent to JSON.
         * @function toJSON
         * @memberof onebot.PrivateMessageEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PrivateMessageEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        PrivateMessageEvent.Sender = (function() {

            /**
             * Properties of a Sender.
             * @memberof onebot.PrivateMessageEvent
             * @interface ISender
             * @property {Long|null} [userId] Sender userId
             * @property {string|null} [nickname] Sender nickname
             * @property {string|null} [sex] Sender sex
             * @property {number|null} [age] Sender age
             */

            /**
             * Constructs a new Sender.
             * @memberof onebot.PrivateMessageEvent
             * @classdesc Represents a Sender.
             * @implements ISender
             * @constructor
             * @param {onebot.PrivateMessageEvent.ISender=} [properties] Properties to set
             */
            function Sender(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Sender userId.
             * @member {Long} userId
             * @memberof onebot.PrivateMessageEvent.Sender
             * @instance
             */
            Sender.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Sender nickname.
             * @member {string} nickname
             * @memberof onebot.PrivateMessageEvent.Sender
             * @instance
             */
            Sender.prototype.nickname = "";

            /**
             * Sender sex.
             * @member {string} sex
             * @memberof onebot.PrivateMessageEvent.Sender
             * @instance
             */
            Sender.prototype.sex = "";

            /**
             * Sender age.
             * @member {number} age
             * @memberof onebot.PrivateMessageEvent.Sender
             * @instance
             */
            Sender.prototype.age = 0;

            /**
             * Creates a new Sender instance using the specified properties.
             * @function create
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {onebot.PrivateMessageEvent.ISender=} [properties] Properties to set
             * @returns {onebot.PrivateMessageEvent.Sender} Sender instance
             */
            Sender.create = function create(properties) {
                return new Sender(properties);
            };

            /**
             * Encodes the specified Sender message. Does not implicitly {@link onebot.PrivateMessageEvent.Sender.verify|verify} messages.
             * @function encode
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {onebot.PrivateMessageEvent.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.sex);
                if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.age);
                return writer;
            };

            /**
             * Encodes the specified Sender message, length delimited. Does not implicitly {@link onebot.PrivateMessageEvent.Sender.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {onebot.PrivateMessageEvent.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Sender message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.PrivateMessageEvent.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.PrivateMessageEvent.Sender();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.sex = reader.string();
                        break;
                    case 4:
                        message.age = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Sender message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.PrivateMessageEvent.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Sender message.
             * @function verify
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Sender.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.sex != null && message.hasOwnProperty("sex"))
                    if (!$util.isString(message.sex))
                        return "sex: string expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                return null;
            };

            /**
             * Creates a Sender message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.PrivateMessageEvent.Sender} Sender
             */
            Sender.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.PrivateMessageEvent.Sender)
                    return object;
                var message = new $root.onebot.PrivateMessageEvent.Sender();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.sex != null)
                    message.sex = String(object.sex);
                if (object.age != null)
                    message.age = object.age | 0;
                return message;
            };

            /**
             * Creates a plain object from a Sender message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.PrivateMessageEvent.Sender
             * @static
             * @param {onebot.PrivateMessageEvent.Sender} message Sender
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Sender.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.sex = "";
                    object.age = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.sex != null && message.hasOwnProperty("sex"))
                    object.sex = message.sex;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                return object;
            };

            /**
             * Converts this Sender to JSON.
             * @function toJSON
             * @memberof onebot.PrivateMessageEvent.Sender
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Sender.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Sender;
        })();

        return PrivateMessageEvent;
    })();

    onebot.GroupMessageEvent = (function() {

        /**
         * Properties of a GroupMessageEvent.
         * @memberof onebot
         * @interface IGroupMessageEvent
         * @property {Long|null} [time] GroupMessageEvent time
         * @property {Long|null} [selfId] GroupMessageEvent selfId
         * @property {string|null} [postType] GroupMessageEvent postType
         * @property {string|null} [messageType] GroupMessageEvent messageType
         * @property {string|null} [subType] GroupMessageEvent subType
         * @property {number|null} [messageId] GroupMessageEvent messageId
         * @property {Long|null} [groupId] GroupMessageEvent groupId
         * @property {Long|null} [userId] GroupMessageEvent userId
         * @property {onebot.GroupMessageEvent.IAnonymous|null} [anonymous] GroupMessageEvent anonymous
         * @property {Array.<onebot.IMessage>|null} [message] GroupMessageEvent message
         * @property {string|null} [rawMessage] GroupMessageEvent rawMessage
         * @property {number|null} [font] GroupMessageEvent font
         * @property {onebot.GroupMessageEvent.ISender|null} [sender] GroupMessageEvent sender
         * @property {Object.<string,string>|null} [extra] GroupMessageEvent extra
         */

        /**
         * Constructs a new GroupMessageEvent.
         * @memberof onebot
         * @classdesc Represents a GroupMessageEvent.
         * @implements IGroupMessageEvent
         * @constructor
         * @param {onebot.IGroupMessageEvent=} [properties] Properties to set
         */
        function GroupMessageEvent(properties) {
            this.message = [];
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupMessageEvent time.
         * @member {Long} time
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupMessageEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupMessageEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.postType = "";

        /**
         * GroupMessageEvent messageType.
         * @member {string} messageType
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.messageType = "";

        /**
         * GroupMessageEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.subType = "";

        /**
         * GroupMessageEvent messageId.
         * @member {number} messageId
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.messageId = 0;

        /**
         * GroupMessageEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupMessageEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupMessageEvent anonymous.
         * @member {onebot.GroupMessageEvent.IAnonymous|null|undefined} anonymous
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.anonymous = null;

        /**
         * GroupMessageEvent message.
         * @member {Array.<onebot.IMessage>} message
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.message = $util.emptyArray;

        /**
         * GroupMessageEvent rawMessage.
         * @member {string} rawMessage
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.rawMessage = "";

        /**
         * GroupMessageEvent font.
         * @member {number} font
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.font = 0;

        /**
         * GroupMessageEvent sender.
         * @member {onebot.GroupMessageEvent.ISender|null|undefined} sender
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.sender = null;

        /**
         * GroupMessageEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupMessageEvent
         * @instance
         */
        GroupMessageEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupMessageEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {onebot.IGroupMessageEvent=} [properties] Properties to set
         * @returns {onebot.GroupMessageEvent} GroupMessageEvent instance
         */
        GroupMessageEvent.create = function create(properties) {
            return new GroupMessageEvent(properties);
        };

        /**
         * Encodes the specified GroupMessageEvent message. Does not implicitly {@link onebot.GroupMessageEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {onebot.IGroupMessageEvent} message GroupMessageEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupMessageEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.messageType != null && Object.hasOwnProperty.call(message, "messageType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.messageType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.messageId);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.userId);
            if (message.anonymous != null && Object.hasOwnProperty.call(message, "anonymous"))
                $root.onebot.GroupMessageEvent.Anonymous.encode(message.anonymous, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.message != null && message.message.length)
                for (var i = 0; i < message.message.length; ++i)
                    $root.onebot.Message.encode(message.message[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.rawMessage != null && Object.hasOwnProperty.call(message, "rawMessage"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.rawMessage);
            if (message.font != null && Object.hasOwnProperty.call(message, "font"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.font);
            if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                $root.onebot.GroupMessageEvent.Sender.encode(message.sender, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupMessageEvent message, length delimited. Does not implicitly {@link onebot.GroupMessageEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {onebot.IGroupMessageEvent} message GroupMessageEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupMessageEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupMessageEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupMessageEvent} GroupMessageEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupMessageEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupMessageEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.messageType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.messageId = reader.int32();
                    break;
                case 7:
                    message.groupId = reader.int64();
                    break;
                case 8:
                    message.userId = reader.int64();
                    break;
                case 9:
                    message.anonymous = $root.onebot.GroupMessageEvent.Anonymous.decode(reader, reader.uint32());
                    break;
                case 10:
                    if (!(message.message && message.message.length))
                        message.message = [];
                    message.message.push($root.onebot.Message.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.rawMessage = reader.string();
                    break;
                case 12:
                    message.font = reader.int32();
                    break;
                case 13:
                    message.sender = $root.onebot.GroupMessageEvent.Sender.decode(reader, reader.uint32());
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupMessageEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupMessageEvent} GroupMessageEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupMessageEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupMessageEvent message.
         * @function verify
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupMessageEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                if (!$util.isString(message.messageType))
                    return "messageType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.anonymous != null && message.hasOwnProperty("anonymous")) {
                var error = $root.onebot.GroupMessageEvent.Anonymous.verify(message.anonymous);
                if (error)
                    return "anonymous." + error;
            }
            if (message.message != null && message.hasOwnProperty("message")) {
                if (!Array.isArray(message.message))
                    return "message: array expected";
                for (var i = 0; i < message.message.length; ++i) {
                    var error = $root.onebot.Message.verify(message.message[i]);
                    if (error)
                        return "message." + error;
                }
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                if (!$util.isString(message.rawMessage))
                    return "rawMessage: string expected";
            if (message.font != null && message.hasOwnProperty("font"))
                if (!$util.isInteger(message.font))
                    return "font: integer expected";
            if (message.sender != null && message.hasOwnProperty("sender")) {
                var error = $root.onebot.GroupMessageEvent.Sender.verify(message.sender);
                if (error)
                    return "sender." + error;
            }
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupMessageEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupMessageEvent} GroupMessageEvent
         */
        GroupMessageEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupMessageEvent)
                return object;
            var message = new $root.onebot.GroupMessageEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.messageType != null)
                message.messageType = String(object.messageType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.anonymous != null) {
                if (typeof object.anonymous !== "object")
                    throw TypeError(".onebot.GroupMessageEvent.anonymous: object expected");
                message.anonymous = $root.onebot.GroupMessageEvent.Anonymous.fromObject(object.anonymous);
            }
            if (object.message) {
                if (!Array.isArray(object.message))
                    throw TypeError(".onebot.GroupMessageEvent.message: array expected");
                message.message = [];
                for (var i = 0; i < object.message.length; ++i) {
                    if (typeof object.message[i] !== "object")
                        throw TypeError(".onebot.GroupMessageEvent.message: object expected");
                    message.message[i] = $root.onebot.Message.fromObject(object.message[i]);
                }
            }
            if (object.rawMessage != null)
                message.rawMessage = String(object.rawMessage);
            if (object.font != null)
                message.font = object.font | 0;
            if (object.sender != null) {
                if (typeof object.sender !== "object")
                    throw TypeError(".onebot.GroupMessageEvent.sender: object expected");
                message.sender = $root.onebot.GroupMessageEvent.Sender.fromObject(object.sender);
            }
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupMessageEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupMessageEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupMessageEvent
         * @static
         * @param {onebot.GroupMessageEvent} message GroupMessageEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupMessageEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.message = [];
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.messageType = "";
                object.subType = "";
                object.messageId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.anonymous = null;
                object.rawMessage = "";
                object.font = 0;
                object.sender = null;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.messageType != null && message.hasOwnProperty("messageType"))
                object.messageType = message.messageType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.anonymous != null && message.hasOwnProperty("anonymous"))
                object.anonymous = $root.onebot.GroupMessageEvent.Anonymous.toObject(message.anonymous, options);
            if (message.message && message.message.length) {
                object.message = [];
                for (var j = 0; j < message.message.length; ++j)
                    object.message[j] = $root.onebot.Message.toObject(message.message[j], options);
            }
            if (message.rawMessage != null && message.hasOwnProperty("rawMessage"))
                object.rawMessage = message.rawMessage;
            if (message.font != null && message.hasOwnProperty("font"))
                object.font = message.font;
            if (message.sender != null && message.hasOwnProperty("sender"))
                object.sender = $root.onebot.GroupMessageEvent.Sender.toObject(message.sender, options);
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupMessageEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupMessageEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupMessageEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GroupMessageEvent.Anonymous = (function() {

            /**
             * Properties of an Anonymous.
             * @memberof onebot.GroupMessageEvent
             * @interface IAnonymous
             * @property {Long|null} [id] Anonymous id
             * @property {string|null} [name] Anonymous name
             * @property {string|null} [flag] Anonymous flag
             */

            /**
             * Constructs a new Anonymous.
             * @memberof onebot.GroupMessageEvent
             * @classdesc Represents an Anonymous.
             * @implements IAnonymous
             * @constructor
             * @param {onebot.GroupMessageEvent.IAnonymous=} [properties] Properties to set
             */
            function Anonymous(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Anonymous id.
             * @member {Long} id
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @instance
             */
            Anonymous.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Anonymous name.
             * @member {string} name
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @instance
             */
            Anonymous.prototype.name = "";

            /**
             * Anonymous flag.
             * @member {string} flag
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @instance
             */
            Anonymous.prototype.flag = "";

            /**
             * Creates a new Anonymous instance using the specified properties.
             * @function create
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {onebot.GroupMessageEvent.IAnonymous=} [properties] Properties to set
             * @returns {onebot.GroupMessageEvent.Anonymous} Anonymous instance
             */
            Anonymous.create = function create(properties) {
                return new Anonymous(properties);
            };

            /**
             * Encodes the specified Anonymous message. Does not implicitly {@link onebot.GroupMessageEvent.Anonymous.verify|verify} messages.
             * @function encode
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {onebot.GroupMessageEvent.IAnonymous} message Anonymous message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Anonymous.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.flag);
                return writer;
            };

            /**
             * Encodes the specified Anonymous message, length delimited. Does not implicitly {@link onebot.GroupMessageEvent.Anonymous.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {onebot.GroupMessageEvent.IAnonymous} message Anonymous message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Anonymous.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Anonymous message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GroupMessageEvent.Anonymous} Anonymous
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Anonymous.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupMessageEvent.Anonymous();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.flag = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Anonymous message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GroupMessageEvent.Anonymous} Anonymous
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Anonymous.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Anonymous message.
             * @function verify
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Anonymous.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isString(message.flag))
                        return "flag: string expected";
                return null;
            };

            /**
             * Creates an Anonymous message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GroupMessageEvent.Anonymous} Anonymous
             */
            Anonymous.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GroupMessageEvent.Anonymous)
                    return object;
                var message = new $root.onebot.GroupMessageEvent.Anonymous();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.flag != null)
                    message.flag = String(object.flag);
                return message;
            };

            /**
             * Creates a plain object from an Anonymous message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @static
             * @param {onebot.GroupMessageEvent.Anonymous} message Anonymous
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Anonymous.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.name = "";
                    object.flag = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                return object;
            };

            /**
             * Converts this Anonymous to JSON.
             * @function toJSON
             * @memberof onebot.GroupMessageEvent.Anonymous
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Anonymous.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Anonymous;
        })();

        GroupMessageEvent.Sender = (function() {

            /**
             * Properties of a Sender.
             * @memberof onebot.GroupMessageEvent
             * @interface ISender
             * @property {Long|null} [userId] Sender userId
             * @property {string|null} [nickname] Sender nickname
             * @property {string|null} [card] Sender card
             * @property {string|null} [sex] Sender sex
             * @property {number|null} [age] Sender age
             * @property {string|null} [area] Sender area
             * @property {string|null} [level] Sender level
             * @property {string|null} [role] Sender role
             * @property {string|null} [title] Sender title
             */

            /**
             * Constructs a new Sender.
             * @memberof onebot.GroupMessageEvent
             * @classdesc Represents a Sender.
             * @implements ISender
             * @constructor
             * @param {onebot.GroupMessageEvent.ISender=} [properties] Properties to set
             */
            function Sender(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Sender userId.
             * @member {Long} userId
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Sender nickname.
             * @member {string} nickname
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.nickname = "";

            /**
             * Sender card.
             * @member {string} card
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.card = "";

            /**
             * Sender sex.
             * @member {string} sex
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.sex = "";

            /**
             * Sender age.
             * @member {number} age
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.age = 0;

            /**
             * Sender area.
             * @member {string} area
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.area = "";

            /**
             * Sender level.
             * @member {string} level
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.level = "";

            /**
             * Sender role.
             * @member {string} role
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.role = "";

            /**
             * Sender title.
             * @member {string} title
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             */
            Sender.prototype.title = "";

            /**
             * Creates a new Sender instance using the specified properties.
             * @function create
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {onebot.GroupMessageEvent.ISender=} [properties] Properties to set
             * @returns {onebot.GroupMessageEvent.Sender} Sender instance
             */
            Sender.create = function create(properties) {
                return new Sender(properties);
            };

            /**
             * Encodes the specified Sender message. Does not implicitly {@link onebot.GroupMessageEvent.Sender.verify|verify} messages.
             * @function encode
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {onebot.GroupMessageEvent.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.card);
                if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.sex);
                if (message.age != null && Object.hasOwnProperty.call(message, "age"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.age);
                if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.area);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.level);
                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.role);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.title);
                return writer;
            };

            /**
             * Encodes the specified Sender message, length delimited. Does not implicitly {@link onebot.GroupMessageEvent.Sender.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {onebot.GroupMessageEvent.ISender} message Sender message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sender.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Sender message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GroupMessageEvent.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupMessageEvent.Sender();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.card = reader.string();
                        break;
                    case 4:
                        message.sex = reader.string();
                        break;
                    case 5:
                        message.age = reader.int32();
                        break;
                    case 6:
                        message.area = reader.string();
                        break;
                    case 7:
                        message.level = reader.string();
                        break;
                    case 8:
                        message.role = reader.string();
                        break;
                    case 9:
                        message.title = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Sender message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GroupMessageEvent.Sender} Sender
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sender.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Sender message.
             * @function verify
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Sender.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.card != null && message.hasOwnProperty("card"))
                    if (!$util.isString(message.card))
                        return "card: string expected";
                if (message.sex != null && message.hasOwnProperty("sex"))
                    if (!$util.isString(message.sex))
                        return "sex: string expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                if (message.area != null && message.hasOwnProperty("area"))
                    if (!$util.isString(message.area))
                        return "area: string expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isString(message.level))
                        return "level: string expected";
                if (message.role != null && message.hasOwnProperty("role"))
                    if (!$util.isString(message.role))
                        return "role: string expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                return null;
            };

            /**
             * Creates a Sender message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GroupMessageEvent.Sender} Sender
             */
            Sender.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GroupMessageEvent.Sender)
                    return object;
                var message = new $root.onebot.GroupMessageEvent.Sender();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.card != null)
                    message.card = String(object.card);
                if (object.sex != null)
                    message.sex = String(object.sex);
                if (object.age != null)
                    message.age = object.age | 0;
                if (object.area != null)
                    message.area = String(object.area);
                if (object.level != null)
                    message.level = String(object.level);
                if (object.role != null)
                    message.role = String(object.role);
                if (object.title != null)
                    message.title = String(object.title);
                return message;
            };

            /**
             * Creates a plain object from a Sender message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GroupMessageEvent.Sender
             * @static
             * @param {onebot.GroupMessageEvent.Sender} message Sender
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Sender.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.card = "";
                    object.sex = "";
                    object.age = 0;
                    object.area = "";
                    object.level = "";
                    object.role = "";
                    object.title = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.card != null && message.hasOwnProperty("card"))
                    object.card = message.card;
                if (message.sex != null && message.hasOwnProperty("sex"))
                    object.sex = message.sex;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = message.role;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                return object;
            };

            /**
             * Converts this Sender to JSON.
             * @function toJSON
             * @memberof onebot.GroupMessageEvent.Sender
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Sender.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Sender;
        })();

        return GroupMessageEvent;
    })();

    onebot.GroupUploadNoticeEvent = (function() {

        /**
         * Properties of a GroupUploadNoticeEvent.
         * @memberof onebot
         * @interface IGroupUploadNoticeEvent
         * @property {Long|null} [time] GroupUploadNoticeEvent time
         * @property {Long|null} [selfId] GroupUploadNoticeEvent selfId
         * @property {string|null} [postType] GroupUploadNoticeEvent postType
         * @property {string|null} [noticeType] GroupUploadNoticeEvent noticeType
         * @property {Long|null} [groupId] GroupUploadNoticeEvent groupId
         * @property {Long|null} [userId] GroupUploadNoticeEvent userId
         * @property {onebot.GroupUploadNoticeEvent.IFile|null} [file] GroupUploadNoticeEvent file
         * @property {Object.<string,string>|null} [extra] GroupUploadNoticeEvent extra
         */

        /**
         * Constructs a new GroupUploadNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupUploadNoticeEvent.
         * @implements IGroupUploadNoticeEvent
         * @constructor
         * @param {onebot.IGroupUploadNoticeEvent=} [properties] Properties to set
         */
        function GroupUploadNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupUploadNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupUploadNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupUploadNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.postType = "";

        /**
         * GroupUploadNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.noticeType = "";

        /**
         * GroupUploadNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupUploadNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupUploadNoticeEvent file.
         * @member {onebot.GroupUploadNoticeEvent.IFile|null|undefined} file
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.file = null;

        /**
         * GroupUploadNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         */
        GroupUploadNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupUploadNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {onebot.IGroupUploadNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupUploadNoticeEvent} GroupUploadNoticeEvent instance
         */
        GroupUploadNoticeEvent.create = function create(properties) {
            return new GroupUploadNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupUploadNoticeEvent message. Does not implicitly {@link onebot.GroupUploadNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {onebot.IGroupUploadNoticeEvent} message GroupUploadNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupUploadNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.userId);
            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                $root.onebot.GroupUploadNoticeEvent.File.encode(message.file, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupUploadNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupUploadNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {onebot.IGroupUploadNoticeEvent} message GroupUploadNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupUploadNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupUploadNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupUploadNoticeEvent} GroupUploadNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupUploadNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupUploadNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.groupId = reader.int64();
                    break;
                case 6:
                    message.userId = reader.int64();
                    break;
                case 7:
                    message.file = $root.onebot.GroupUploadNoticeEvent.File.decode(reader, reader.uint32());
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupUploadNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupUploadNoticeEvent} GroupUploadNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupUploadNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupUploadNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupUploadNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.file != null && message.hasOwnProperty("file")) {
                var error = $root.onebot.GroupUploadNoticeEvent.File.verify(message.file);
                if (error)
                    return "file." + error;
            }
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupUploadNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupUploadNoticeEvent} GroupUploadNoticeEvent
         */
        GroupUploadNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupUploadNoticeEvent)
                return object;
            var message = new $root.onebot.GroupUploadNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.file != null) {
                if (typeof object.file !== "object")
                    throw TypeError(".onebot.GroupUploadNoticeEvent.file: object expected");
                message.file = $root.onebot.GroupUploadNoticeEvent.File.fromObject(object.file);
            }
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupUploadNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupUploadNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupUploadNoticeEvent
         * @static
         * @param {onebot.GroupUploadNoticeEvent} message GroupUploadNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupUploadNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.file = null;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = $root.onebot.GroupUploadNoticeEvent.File.toObject(message.file, options);
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupUploadNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupUploadNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupUploadNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        GroupUploadNoticeEvent.File = (function() {

            /**
             * Properties of a File.
             * @memberof onebot.GroupUploadNoticeEvent
             * @interface IFile
             * @property {string|null} [id] File id
             * @property {string|null} [name] File name
             * @property {Long|null} [size] File size
             * @property {Long|null} [busid] File busid
             * @property {string|null} [url] File url
             */

            /**
             * Constructs a new File.
             * @memberof onebot.GroupUploadNoticeEvent
             * @classdesc Represents a File.
             * @implements IFile
             * @constructor
             * @param {onebot.GroupUploadNoticeEvent.IFile=} [properties] Properties to set
             */
            function File(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * File id.
             * @member {string} id
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             */
            File.prototype.id = "";

            /**
             * File name.
             * @member {string} name
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             */
            File.prototype.name = "";

            /**
             * File size.
             * @member {Long} size
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             */
            File.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * File busid.
             * @member {Long} busid
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             */
            File.prototype.busid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * File url.
             * @member {string} url
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             */
            File.prototype.url = "";

            /**
             * Creates a new File instance using the specified properties.
             * @function create
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {onebot.GroupUploadNoticeEvent.IFile=} [properties] Properties to set
             * @returns {onebot.GroupUploadNoticeEvent.File} File instance
             */
            File.create = function create(properties) {
                return new File(properties);
            };

            /**
             * Encodes the specified File message. Does not implicitly {@link onebot.GroupUploadNoticeEvent.File.verify|verify} messages.
             * @function encode
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {onebot.GroupUploadNoticeEvent.IFile} message File message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            File.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.size);
                if (message.busid != null && Object.hasOwnProperty.call(message, "busid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.busid);
                if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);
                return writer;
            };

            /**
             * Encodes the specified File message, length delimited. Does not implicitly {@link onebot.GroupUploadNoticeEvent.File.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {onebot.GroupUploadNoticeEvent.IFile} message File message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            File.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a File message from the specified reader or buffer.
             * @function decode
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onebot.GroupUploadNoticeEvent.File} File
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            File.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupUploadNoticeEvent.File();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.size = reader.int64();
                        break;
                    case 4:
                        message.busid = reader.int64();
                        break;
                    case 5:
                        message.url = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a File message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onebot.GroupUploadNoticeEvent.File} File
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            File.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a File message.
             * @function verify
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            File.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.size != null && message.hasOwnProperty("size"))
                    if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                        return "size: integer|Long expected";
                if (message.busid != null && message.hasOwnProperty("busid"))
                    if (!$util.isInteger(message.busid) && !(message.busid && $util.isInteger(message.busid.low) && $util.isInteger(message.busid.high)))
                        return "busid: integer|Long expected";
                if (message.url != null && message.hasOwnProperty("url"))
                    if (!$util.isString(message.url))
                        return "url: string expected";
                return null;
            };

            /**
             * Creates a File message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onebot.GroupUploadNoticeEvent.File} File
             */
            File.fromObject = function fromObject(object) {
                if (object instanceof $root.onebot.GroupUploadNoticeEvent.File)
                    return object;
                var message = new $root.onebot.GroupUploadNoticeEvent.File();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.size != null)
                    if ($util.Long)
                        (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                    else if (typeof object.size === "string")
                        message.size = parseInt(object.size, 10);
                    else if (typeof object.size === "number")
                        message.size = object.size;
                    else if (typeof object.size === "object")
                        message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                if (object.busid != null)
                    if ($util.Long)
                        (message.busid = $util.Long.fromValue(object.busid)).unsigned = false;
                    else if (typeof object.busid === "string")
                        message.busid = parseInt(object.busid, 10);
                    else if (typeof object.busid === "number")
                        message.busid = object.busid;
                    else if (typeof object.busid === "object")
                        message.busid = new $util.LongBits(object.busid.low >>> 0, object.busid.high >>> 0).toNumber();
                if (object.url != null)
                    message.url = String(object.url);
                return message;
            };

            /**
             * Creates a plain object from a File message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @static
             * @param {onebot.GroupUploadNoticeEvent.File} message File
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            File.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = "";
                    object.name = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.size = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.busid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.busid = options.longs === String ? "0" : 0;
                    object.url = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.size != null && message.hasOwnProperty("size"))
                    if (typeof message.size === "number")
                        object.size = options.longs === String ? String(message.size) : message.size;
                    else
                        object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                if (message.busid != null && message.hasOwnProperty("busid"))
                    if (typeof message.busid === "number")
                        object.busid = options.longs === String ? String(message.busid) : message.busid;
                    else
                        object.busid = options.longs === String ? $util.Long.prototype.toString.call(message.busid) : options.longs === Number ? new $util.LongBits(message.busid.low >>> 0, message.busid.high >>> 0).toNumber() : message.busid;
                if (message.url != null && message.hasOwnProperty("url"))
                    object.url = message.url;
                return object;
            };

            /**
             * Converts this File to JSON.
             * @function toJSON
             * @memberof onebot.GroupUploadNoticeEvent.File
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            File.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return File;
        })();

        return GroupUploadNoticeEvent;
    })();

    onebot.GroupAdminNoticeEvent = (function() {

        /**
         * Properties of a GroupAdminNoticeEvent.
         * @memberof onebot
         * @interface IGroupAdminNoticeEvent
         * @property {Long|null} [time] GroupAdminNoticeEvent time
         * @property {Long|null} [selfId] GroupAdminNoticeEvent selfId
         * @property {string|null} [postType] GroupAdminNoticeEvent postType
         * @property {string|null} [noticeType] GroupAdminNoticeEvent noticeType
         * @property {string|null} [subType] GroupAdminNoticeEvent subType
         * @property {Long|null} [groupId] GroupAdminNoticeEvent groupId
         * @property {Long|null} [userId] GroupAdminNoticeEvent userId
         * @property {Object.<string,string>|null} [extra] GroupAdminNoticeEvent extra
         */

        /**
         * Constructs a new GroupAdminNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupAdminNoticeEvent.
         * @implements IGroupAdminNoticeEvent
         * @constructor
         * @param {onebot.IGroupAdminNoticeEvent=} [properties] Properties to set
         */
        function GroupAdminNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupAdminNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupAdminNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupAdminNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.postType = "";

        /**
         * GroupAdminNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.noticeType = "";

        /**
         * GroupAdminNoticeEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.subType = "";

        /**
         * GroupAdminNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupAdminNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupAdminNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         */
        GroupAdminNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupAdminNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {onebot.IGroupAdminNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupAdminNoticeEvent} GroupAdminNoticeEvent instance
         */
        GroupAdminNoticeEvent.create = function create(properties) {
            return new GroupAdminNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupAdminNoticeEvent message. Does not implicitly {@link onebot.GroupAdminNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {onebot.IGroupAdminNoticeEvent} message GroupAdminNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupAdminNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.userId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupAdminNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupAdminNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {onebot.IGroupAdminNoticeEvent} message GroupAdminNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupAdminNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupAdminNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupAdminNoticeEvent} GroupAdminNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupAdminNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupAdminNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = reader.int64();
                    break;
                case 7:
                    message.userId = reader.int64();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupAdminNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupAdminNoticeEvent} GroupAdminNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupAdminNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupAdminNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupAdminNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupAdminNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupAdminNoticeEvent} GroupAdminNoticeEvent
         */
        GroupAdminNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupAdminNoticeEvent)
                return object;
            var message = new $root.onebot.GroupAdminNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupAdminNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupAdminNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupAdminNoticeEvent
         * @static
         * @param {onebot.GroupAdminNoticeEvent} message GroupAdminNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupAdminNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                object.subType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupAdminNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupAdminNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupAdminNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupAdminNoticeEvent;
    })();

    onebot.GroupDecreaseNoticeEvent = (function() {

        /**
         * Properties of a GroupDecreaseNoticeEvent.
         * @memberof onebot
         * @interface IGroupDecreaseNoticeEvent
         * @property {Long|null} [time] GroupDecreaseNoticeEvent time
         * @property {Long|null} [selfId] GroupDecreaseNoticeEvent selfId
         * @property {string|null} [postType] GroupDecreaseNoticeEvent postType
         * @property {string|null} [noticeType] GroupDecreaseNoticeEvent noticeType
         * @property {string|null} [subType] GroupDecreaseNoticeEvent subType
         * @property {Long|null} [groupId] GroupDecreaseNoticeEvent groupId
         * @property {Long|null} [operatorId] GroupDecreaseNoticeEvent operatorId
         * @property {Long|null} [userId] GroupDecreaseNoticeEvent userId
         * @property {Object.<string,string>|null} [extra] GroupDecreaseNoticeEvent extra
         */

        /**
         * Constructs a new GroupDecreaseNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupDecreaseNoticeEvent.
         * @implements IGroupDecreaseNoticeEvent
         * @constructor
         * @param {onebot.IGroupDecreaseNoticeEvent=} [properties] Properties to set
         */
        function GroupDecreaseNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupDecreaseNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupDecreaseNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupDecreaseNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.postType = "";

        /**
         * GroupDecreaseNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.noticeType = "";

        /**
         * GroupDecreaseNoticeEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.subType = "";

        /**
         * GroupDecreaseNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupDecreaseNoticeEvent operatorId.
         * @member {Long} operatorId
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.operatorId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupDecreaseNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupDecreaseNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         */
        GroupDecreaseNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupDecreaseNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {onebot.IGroupDecreaseNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupDecreaseNoticeEvent} GroupDecreaseNoticeEvent instance
         */
        GroupDecreaseNoticeEvent.create = function create(properties) {
            return new GroupDecreaseNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupDecreaseNoticeEvent message. Does not implicitly {@link onebot.GroupDecreaseNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {onebot.IGroupDecreaseNoticeEvent} message GroupDecreaseNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupDecreaseNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.groupId);
            if (message.operatorId != null && Object.hasOwnProperty.call(message, "operatorId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.operatorId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.userId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupDecreaseNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupDecreaseNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {onebot.IGroupDecreaseNoticeEvent} message GroupDecreaseNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupDecreaseNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupDecreaseNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupDecreaseNoticeEvent} GroupDecreaseNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupDecreaseNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupDecreaseNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = reader.int64();
                    break;
                case 7:
                    message.operatorId = reader.int64();
                    break;
                case 8:
                    message.userId = reader.int64();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupDecreaseNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupDecreaseNoticeEvent} GroupDecreaseNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupDecreaseNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupDecreaseNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupDecreaseNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (!$util.isInteger(message.operatorId) && !(message.operatorId && $util.isInteger(message.operatorId.low) && $util.isInteger(message.operatorId.high)))
                    return "operatorId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupDecreaseNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupDecreaseNoticeEvent} GroupDecreaseNoticeEvent
         */
        GroupDecreaseNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupDecreaseNoticeEvent)
                return object;
            var message = new $root.onebot.GroupDecreaseNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.operatorId != null)
                if ($util.Long)
                    (message.operatorId = $util.Long.fromValue(object.operatorId)).unsigned = false;
                else if (typeof object.operatorId === "string")
                    message.operatorId = parseInt(object.operatorId, 10);
                else if (typeof object.operatorId === "number")
                    message.operatorId = object.operatorId;
                else if (typeof object.operatorId === "object")
                    message.operatorId = new $util.LongBits(object.operatorId.low >>> 0, object.operatorId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupDecreaseNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupDecreaseNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @static
         * @param {onebot.GroupDecreaseNoticeEvent} message GroupDecreaseNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupDecreaseNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                object.subType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.operatorId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.operatorId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (typeof message.operatorId === "number")
                    object.operatorId = options.longs === String ? String(message.operatorId) : message.operatorId;
                else
                    object.operatorId = options.longs === String ? $util.Long.prototype.toString.call(message.operatorId) : options.longs === Number ? new $util.LongBits(message.operatorId.low >>> 0, message.operatorId.high >>> 0).toNumber() : message.operatorId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupDecreaseNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupDecreaseNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupDecreaseNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupDecreaseNoticeEvent;
    })();

    onebot.GroupIncreaseNoticeEvent = (function() {

        /**
         * Properties of a GroupIncreaseNoticeEvent.
         * @memberof onebot
         * @interface IGroupIncreaseNoticeEvent
         * @property {Long|null} [time] GroupIncreaseNoticeEvent time
         * @property {Long|null} [selfId] GroupIncreaseNoticeEvent selfId
         * @property {string|null} [postType] GroupIncreaseNoticeEvent postType
         * @property {string|null} [noticeType] GroupIncreaseNoticeEvent noticeType
         * @property {string|null} [subType] GroupIncreaseNoticeEvent subType
         * @property {Long|null} [groupId] GroupIncreaseNoticeEvent groupId
         * @property {Long|null} [operatorId] GroupIncreaseNoticeEvent operatorId
         * @property {Long|null} [userId] GroupIncreaseNoticeEvent userId
         * @property {Object.<string,string>|null} [extra] GroupIncreaseNoticeEvent extra
         */

        /**
         * Constructs a new GroupIncreaseNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupIncreaseNoticeEvent.
         * @implements IGroupIncreaseNoticeEvent
         * @constructor
         * @param {onebot.IGroupIncreaseNoticeEvent=} [properties] Properties to set
         */
        function GroupIncreaseNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupIncreaseNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupIncreaseNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupIncreaseNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.postType = "";

        /**
         * GroupIncreaseNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.noticeType = "";

        /**
         * GroupIncreaseNoticeEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.subType = "";

        /**
         * GroupIncreaseNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupIncreaseNoticeEvent operatorId.
         * @member {Long} operatorId
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.operatorId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupIncreaseNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupIncreaseNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         */
        GroupIncreaseNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupIncreaseNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {onebot.IGroupIncreaseNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupIncreaseNoticeEvent} GroupIncreaseNoticeEvent instance
         */
        GroupIncreaseNoticeEvent.create = function create(properties) {
            return new GroupIncreaseNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupIncreaseNoticeEvent message. Does not implicitly {@link onebot.GroupIncreaseNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {onebot.IGroupIncreaseNoticeEvent} message GroupIncreaseNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupIncreaseNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.groupId);
            if (message.operatorId != null && Object.hasOwnProperty.call(message, "operatorId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.operatorId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.userId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupIncreaseNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupIncreaseNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {onebot.IGroupIncreaseNoticeEvent} message GroupIncreaseNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupIncreaseNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupIncreaseNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupIncreaseNoticeEvent} GroupIncreaseNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupIncreaseNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupIncreaseNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = reader.int64();
                    break;
                case 7:
                    message.operatorId = reader.int64();
                    break;
                case 8:
                    message.userId = reader.int64();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupIncreaseNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupIncreaseNoticeEvent} GroupIncreaseNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupIncreaseNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupIncreaseNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupIncreaseNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (!$util.isInteger(message.operatorId) && !(message.operatorId && $util.isInteger(message.operatorId.low) && $util.isInteger(message.operatorId.high)))
                    return "operatorId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupIncreaseNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupIncreaseNoticeEvent} GroupIncreaseNoticeEvent
         */
        GroupIncreaseNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupIncreaseNoticeEvent)
                return object;
            var message = new $root.onebot.GroupIncreaseNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.operatorId != null)
                if ($util.Long)
                    (message.operatorId = $util.Long.fromValue(object.operatorId)).unsigned = false;
                else if (typeof object.operatorId === "string")
                    message.operatorId = parseInt(object.operatorId, 10);
                else if (typeof object.operatorId === "number")
                    message.operatorId = object.operatorId;
                else if (typeof object.operatorId === "object")
                    message.operatorId = new $util.LongBits(object.operatorId.low >>> 0, object.operatorId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupIncreaseNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupIncreaseNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @static
         * @param {onebot.GroupIncreaseNoticeEvent} message GroupIncreaseNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupIncreaseNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                object.subType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.operatorId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.operatorId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (typeof message.operatorId === "number")
                    object.operatorId = options.longs === String ? String(message.operatorId) : message.operatorId;
                else
                    object.operatorId = options.longs === String ? $util.Long.prototype.toString.call(message.operatorId) : options.longs === Number ? new $util.LongBits(message.operatorId.low >>> 0, message.operatorId.high >>> 0).toNumber() : message.operatorId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupIncreaseNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupIncreaseNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupIncreaseNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupIncreaseNoticeEvent;
    })();

    onebot.GroupBanNoticeEvent = (function() {

        /**
         * Properties of a GroupBanNoticeEvent.
         * @memberof onebot
         * @interface IGroupBanNoticeEvent
         * @property {Long|null} [time] GroupBanNoticeEvent time
         * @property {Long|null} [selfId] GroupBanNoticeEvent selfId
         * @property {string|null} [postType] GroupBanNoticeEvent postType
         * @property {string|null} [noticeType] GroupBanNoticeEvent noticeType
         * @property {string|null} [subType] GroupBanNoticeEvent subType
         * @property {Long|null} [groupId] GroupBanNoticeEvent groupId
         * @property {Long|null} [operatorId] GroupBanNoticeEvent operatorId
         * @property {Long|null} [userId] GroupBanNoticeEvent userId
         * @property {Long|null} [duration] GroupBanNoticeEvent duration
         * @property {Object.<string,string>|null} [extra] GroupBanNoticeEvent extra
         */

        /**
         * Constructs a new GroupBanNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupBanNoticeEvent.
         * @implements IGroupBanNoticeEvent
         * @constructor
         * @param {onebot.IGroupBanNoticeEvent=} [properties] Properties to set
         */
        function GroupBanNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupBanNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.postType = "";

        /**
         * GroupBanNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.noticeType = "";

        /**
         * GroupBanNoticeEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.subType = "";

        /**
         * GroupBanNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent operatorId.
         * @member {Long} operatorId
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.operatorId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent duration.
         * @member {Long} duration
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupBanNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         */
        GroupBanNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupBanNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {onebot.IGroupBanNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupBanNoticeEvent} GroupBanNoticeEvent instance
         */
        GroupBanNoticeEvent.create = function create(properties) {
            return new GroupBanNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupBanNoticeEvent message. Does not implicitly {@link onebot.GroupBanNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {onebot.IGroupBanNoticeEvent} message GroupBanNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupBanNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.groupId);
            if (message.operatorId != null && Object.hasOwnProperty.call(message, "operatorId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.operatorId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.userId);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.duration);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupBanNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupBanNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {onebot.IGroupBanNoticeEvent} message GroupBanNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupBanNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupBanNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupBanNoticeEvent} GroupBanNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupBanNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupBanNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = reader.int64();
                    break;
                case 7:
                    message.operatorId = reader.int64();
                    break;
                case 8:
                    message.userId = reader.int64();
                    break;
                case 9:
                    message.duration = reader.int64();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupBanNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupBanNoticeEvent} GroupBanNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupBanNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupBanNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupBanNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (!$util.isInteger(message.operatorId) && !(message.operatorId && $util.isInteger(message.operatorId.low) && $util.isInteger(message.operatorId.high)))
                    return "operatorId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))
                    return "duration: integer|Long expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupBanNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupBanNoticeEvent} GroupBanNoticeEvent
         */
        GroupBanNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupBanNoticeEvent)
                return object;
            var message = new $root.onebot.GroupBanNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.operatorId != null)
                if ($util.Long)
                    (message.operatorId = $util.Long.fromValue(object.operatorId)).unsigned = false;
                else if (typeof object.operatorId === "string")
                    message.operatorId = parseInt(object.operatorId, 10);
                else if (typeof object.operatorId === "number")
                    message.operatorId = object.operatorId;
                else if (typeof object.operatorId === "object")
                    message.operatorId = new $util.LongBits(object.operatorId.low >>> 0, object.operatorId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.duration != null)
                if ($util.Long)
                    (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;
                else if (typeof object.duration === "string")
                    message.duration = parseInt(object.duration, 10);
                else if (typeof object.duration === "number")
                    message.duration = object.duration;
                else if (typeof object.duration === "object")
                    message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupBanNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupBanNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupBanNoticeEvent
         * @static
         * @param {onebot.GroupBanNoticeEvent} message GroupBanNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupBanNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                object.subType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.operatorId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.operatorId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.duration = options.longs === String ? "0" : 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (typeof message.operatorId === "number")
                    object.operatorId = options.longs === String ? String(message.operatorId) : message.operatorId;
                else
                    object.operatorId = options.longs === String ? $util.Long.prototype.toString.call(message.operatorId) : options.longs === Number ? new $util.LongBits(message.operatorId.low >>> 0, message.operatorId.high >>> 0).toNumber() : message.operatorId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (typeof message.duration === "number")
                    object.duration = options.longs === String ? String(message.duration) : message.duration;
                else
                    object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupBanNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupBanNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupBanNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupBanNoticeEvent;
    })();

    onebot.FriendAddNoticeEvent = (function() {

        /**
         * Properties of a FriendAddNoticeEvent.
         * @memberof onebot
         * @interface IFriendAddNoticeEvent
         * @property {Long|null} [time] FriendAddNoticeEvent time
         * @property {Long|null} [selfId] FriendAddNoticeEvent selfId
         * @property {string|null} [postType] FriendAddNoticeEvent postType
         * @property {string|null} [noticeType] FriendAddNoticeEvent noticeType
         * @property {Long|null} [userId] FriendAddNoticeEvent userId
         * @property {Object.<string,string>|null} [extra] FriendAddNoticeEvent extra
         */

        /**
         * Constructs a new FriendAddNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a FriendAddNoticeEvent.
         * @implements IFriendAddNoticeEvent
         * @constructor
         * @param {onebot.IFriendAddNoticeEvent=} [properties] Properties to set
         */
        function FriendAddNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FriendAddNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendAddNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendAddNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.postType = "";

        /**
         * FriendAddNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.noticeType = "";

        /**
         * FriendAddNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendAddNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         */
        FriendAddNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new FriendAddNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {onebot.IFriendAddNoticeEvent=} [properties] Properties to set
         * @returns {onebot.FriendAddNoticeEvent} FriendAddNoticeEvent instance
         */
        FriendAddNoticeEvent.create = function create(properties) {
            return new FriendAddNoticeEvent(properties);
        };

        /**
         * Encodes the specified FriendAddNoticeEvent message. Does not implicitly {@link onebot.FriendAddNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {onebot.IFriendAddNoticeEvent} message FriendAddNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendAddNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.userId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified FriendAddNoticeEvent message, length delimited. Does not implicitly {@link onebot.FriendAddNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {onebot.IFriendAddNoticeEvent} message FriendAddNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendAddNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FriendAddNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.FriendAddNoticeEvent} FriendAddNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendAddNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.FriendAddNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.userId = reader.int64();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FriendAddNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.FriendAddNoticeEvent} FriendAddNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendAddNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FriendAddNoticeEvent message.
         * @function verify
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FriendAddNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a FriendAddNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.FriendAddNoticeEvent} FriendAddNoticeEvent
         */
        FriendAddNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.FriendAddNoticeEvent)
                return object;
            var message = new $root.onebot.FriendAddNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.FriendAddNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a FriendAddNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.FriendAddNoticeEvent
         * @static
         * @param {onebot.FriendAddNoticeEvent} message FriendAddNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FriendAddNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this FriendAddNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.FriendAddNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FriendAddNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FriendAddNoticeEvent;
    })();

    onebot.GroupRecallNoticeEvent = (function() {

        /**
         * Properties of a GroupRecallNoticeEvent.
         * @memberof onebot
         * @interface IGroupRecallNoticeEvent
         * @property {Long|null} [time] GroupRecallNoticeEvent time
         * @property {Long|null} [selfId] GroupRecallNoticeEvent selfId
         * @property {string|null} [postType] GroupRecallNoticeEvent postType
         * @property {string|null} [noticeType] GroupRecallNoticeEvent noticeType
         * @property {Long|null} [groupId] GroupRecallNoticeEvent groupId
         * @property {Long|null} [userId] GroupRecallNoticeEvent userId
         * @property {Long|null} [operatorId] GroupRecallNoticeEvent operatorId
         * @property {number|null} [messageId] GroupRecallNoticeEvent messageId
         * @property {Object.<string,string>|null} [extra] GroupRecallNoticeEvent extra
         */

        /**
         * Constructs a new GroupRecallNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a GroupRecallNoticeEvent.
         * @implements IGroupRecallNoticeEvent
         * @constructor
         * @param {onebot.IGroupRecallNoticeEvent=} [properties] Properties to set
         */
        function GroupRecallNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupRecallNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRecallNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRecallNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.postType = "";

        /**
         * GroupRecallNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.noticeType = "";

        /**
         * GroupRecallNoticeEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRecallNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRecallNoticeEvent operatorId.
         * @member {Long} operatorId
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.operatorId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRecallNoticeEvent messageId.
         * @member {number} messageId
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.messageId = 0;

        /**
         * GroupRecallNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         */
        GroupRecallNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupRecallNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {onebot.IGroupRecallNoticeEvent=} [properties] Properties to set
         * @returns {onebot.GroupRecallNoticeEvent} GroupRecallNoticeEvent instance
         */
        GroupRecallNoticeEvent.create = function create(properties) {
            return new GroupRecallNoticeEvent(properties);
        };

        /**
         * Encodes the specified GroupRecallNoticeEvent message. Does not implicitly {@link onebot.GroupRecallNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {onebot.IGroupRecallNoticeEvent} message GroupRecallNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupRecallNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.userId);
            if (message.operatorId != null && Object.hasOwnProperty.call(message, "operatorId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.operatorId);
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.messageId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupRecallNoticeEvent message, length delimited. Does not implicitly {@link onebot.GroupRecallNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {onebot.IGroupRecallNoticeEvent} message GroupRecallNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupRecallNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupRecallNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupRecallNoticeEvent} GroupRecallNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupRecallNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupRecallNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.groupId = reader.int64();
                    break;
                case 6:
                    message.userId = reader.int64();
                    break;
                case 7:
                    message.operatorId = reader.int64();
                    break;
                case 8:
                    message.messageId = reader.int32();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupRecallNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupRecallNoticeEvent} GroupRecallNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupRecallNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupRecallNoticeEvent message.
         * @function verify
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupRecallNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (!$util.isInteger(message.operatorId) && !(message.operatorId && $util.isInteger(message.operatorId.low) && $util.isInteger(message.operatorId.high)))
                    return "operatorId: integer|Long expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupRecallNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupRecallNoticeEvent} GroupRecallNoticeEvent
         */
        GroupRecallNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupRecallNoticeEvent)
                return object;
            var message = new $root.onebot.GroupRecallNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.operatorId != null)
                if ($util.Long)
                    (message.operatorId = $util.Long.fromValue(object.operatorId)).unsigned = false;
                else if (typeof object.operatorId === "string")
                    message.operatorId = parseInt(object.operatorId, 10);
                else if (typeof object.operatorId === "number")
                    message.operatorId = object.operatorId;
                else if (typeof object.operatorId === "object")
                    message.operatorId = new $util.LongBits(object.operatorId.low >>> 0, object.operatorId.high >>> 0).toNumber();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupRecallNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupRecallNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupRecallNoticeEvent
         * @static
         * @param {onebot.GroupRecallNoticeEvent} message GroupRecallNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupRecallNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.operatorId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.operatorId = options.longs === String ? "0" : 0;
                object.messageId = 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                if (typeof message.operatorId === "number")
                    object.operatorId = options.longs === String ? String(message.operatorId) : message.operatorId;
                else
                    object.operatorId = options.longs === String ? $util.Long.prototype.toString.call(message.operatorId) : options.longs === Number ? new $util.LongBits(message.operatorId.low >>> 0, message.operatorId.high >>> 0).toNumber() : message.operatorId;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupRecallNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupRecallNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupRecallNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupRecallNoticeEvent;
    })();

    onebot.FriendRecallNoticeEvent = (function() {

        /**
         * Properties of a FriendRecallNoticeEvent.
         * @memberof onebot
         * @interface IFriendRecallNoticeEvent
         * @property {Long|null} [time] FriendRecallNoticeEvent time
         * @property {Long|null} [selfId] FriendRecallNoticeEvent selfId
         * @property {string|null} [postType] FriendRecallNoticeEvent postType
         * @property {string|null} [noticeType] FriendRecallNoticeEvent noticeType
         * @property {Long|null} [userId] FriendRecallNoticeEvent userId
         * @property {number|null} [messageId] FriendRecallNoticeEvent messageId
         * @property {Object.<string,string>|null} [extra] FriendRecallNoticeEvent extra
         */

        /**
         * Constructs a new FriendRecallNoticeEvent.
         * @memberof onebot
         * @classdesc Represents a FriendRecallNoticeEvent.
         * @implements IFriendRecallNoticeEvent
         * @constructor
         * @param {onebot.IFriendRecallNoticeEvent=} [properties] Properties to set
         */
        function FriendRecallNoticeEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FriendRecallNoticeEvent time.
         * @member {Long} time
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRecallNoticeEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRecallNoticeEvent postType.
         * @member {string} postType
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.postType = "";

        /**
         * FriendRecallNoticeEvent noticeType.
         * @member {string} noticeType
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.noticeType = "";

        /**
         * FriendRecallNoticeEvent userId.
         * @member {Long} userId
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRecallNoticeEvent messageId.
         * @member {number} messageId
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.messageId = 0;

        /**
         * FriendRecallNoticeEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         */
        FriendRecallNoticeEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new FriendRecallNoticeEvent instance using the specified properties.
         * @function create
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {onebot.IFriendRecallNoticeEvent=} [properties] Properties to set
         * @returns {onebot.FriendRecallNoticeEvent} FriendRecallNoticeEvent instance
         */
        FriendRecallNoticeEvent.create = function create(properties) {
            return new FriendRecallNoticeEvent(properties);
        };

        /**
         * Encodes the specified FriendRecallNoticeEvent message. Does not implicitly {@link onebot.FriendRecallNoticeEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {onebot.IFriendRecallNoticeEvent} message FriendRecallNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendRecallNoticeEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.noticeType != null && Object.hasOwnProperty.call(message, "noticeType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.noticeType);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.userId);
            if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.messageId);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified FriendRecallNoticeEvent message, length delimited. Does not implicitly {@link onebot.FriendRecallNoticeEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {onebot.IFriendRecallNoticeEvent} message FriendRecallNoticeEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendRecallNoticeEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FriendRecallNoticeEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.FriendRecallNoticeEvent} FriendRecallNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendRecallNoticeEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.FriendRecallNoticeEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.userId = reader.int64();
                    break;
                case 6:
                    message.messageId = reader.int32();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FriendRecallNoticeEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.FriendRecallNoticeEvent} FriendRecallNoticeEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendRecallNoticeEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FriendRecallNoticeEvent message.
         * @function verify
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FriendRecallNoticeEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                if (!$util.isString(message.noticeType))
                    return "noticeType: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                if (!$util.isInteger(message.messageId))
                    return "messageId: integer expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a FriendRecallNoticeEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.FriendRecallNoticeEvent} FriendRecallNoticeEvent
         */
        FriendRecallNoticeEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.FriendRecallNoticeEvent)
                return object;
            var message = new $root.onebot.FriendRecallNoticeEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.noticeType != null)
                message.noticeType = String(object.noticeType);
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.messageId != null)
                message.messageId = object.messageId | 0;
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.FriendRecallNoticeEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a FriendRecallNoticeEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.FriendRecallNoticeEvent
         * @static
         * @param {onebot.FriendRecallNoticeEvent} message FriendRecallNoticeEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FriendRecallNoticeEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.noticeType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.messageId = 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                object.noticeType = message.noticeType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.messageId != null && message.hasOwnProperty("messageId"))
                object.messageId = message.messageId;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this FriendRecallNoticeEvent to JSON.
         * @function toJSON
         * @memberof onebot.FriendRecallNoticeEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FriendRecallNoticeEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FriendRecallNoticeEvent;
    })();

    onebot.FriendRequestEvent = (function() {

        /**
         * Properties of a FriendRequestEvent.
         * @memberof onebot
         * @interface IFriendRequestEvent
         * @property {Long|null} [time] FriendRequestEvent time
         * @property {Long|null} [selfId] FriendRequestEvent selfId
         * @property {string|null} [postType] FriendRequestEvent postType
         * @property {string|null} [requestType] FriendRequestEvent requestType
         * @property {Long|null} [userId] FriendRequestEvent userId
         * @property {string|null} [comment] FriendRequestEvent comment
         * @property {string|null} [flag] FriendRequestEvent flag
         * @property {Object.<string,string>|null} [extra] FriendRequestEvent extra
         */

        /**
         * Constructs a new FriendRequestEvent.
         * @memberof onebot
         * @classdesc Represents a FriendRequestEvent.
         * @implements IFriendRequestEvent
         * @constructor
         * @param {onebot.IFriendRequestEvent=} [properties] Properties to set
         */
        function FriendRequestEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FriendRequestEvent time.
         * @member {Long} time
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRequestEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRequestEvent postType.
         * @member {string} postType
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.postType = "";

        /**
         * FriendRequestEvent requestType.
         * @member {string} requestType
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.requestType = "";

        /**
         * FriendRequestEvent userId.
         * @member {Long} userId
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FriendRequestEvent comment.
         * @member {string} comment
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.comment = "";

        /**
         * FriendRequestEvent flag.
         * @member {string} flag
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.flag = "";

        /**
         * FriendRequestEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.FriendRequestEvent
         * @instance
         */
        FriendRequestEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new FriendRequestEvent instance using the specified properties.
         * @function create
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {onebot.IFriendRequestEvent=} [properties] Properties to set
         * @returns {onebot.FriendRequestEvent} FriendRequestEvent instance
         */
        FriendRequestEvent.create = function create(properties) {
            return new FriendRequestEvent(properties);
        };

        /**
         * Encodes the specified FriendRequestEvent message. Does not implicitly {@link onebot.FriendRequestEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {onebot.IFriendRequestEvent} message FriendRequestEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendRequestEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.requestType != null && Object.hasOwnProperty.call(message, "requestType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestType);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.userId);
            if (message.comment != null && Object.hasOwnProperty.call(message, "comment"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comment);
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.flag);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified FriendRequestEvent message, length delimited. Does not implicitly {@link onebot.FriendRequestEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {onebot.IFriendRequestEvent} message FriendRequestEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendRequestEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FriendRequestEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.FriendRequestEvent} FriendRequestEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendRequestEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.FriendRequestEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.requestType = reader.string();
                    break;
                case 5:
                    message.userId = reader.int64();
                    break;
                case 6:
                    message.comment = reader.string();
                    break;
                case 7:
                    message.flag = reader.string();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FriendRequestEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.FriendRequestEvent} FriendRequestEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendRequestEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FriendRequestEvent message.
         * @function verify
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FriendRequestEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.requestType != null && message.hasOwnProperty("requestType"))
                if (!$util.isString(message.requestType))
                    return "requestType: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.comment != null && message.hasOwnProperty("comment"))
                if (!$util.isString(message.comment))
                    return "comment: string expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (!$util.isString(message.flag))
                    return "flag: string expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a FriendRequestEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.FriendRequestEvent} FriendRequestEvent
         */
        FriendRequestEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.FriendRequestEvent)
                return object;
            var message = new $root.onebot.FriendRequestEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.requestType != null)
                message.requestType = String(object.requestType);
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.comment != null)
                message.comment = String(object.comment);
            if (object.flag != null)
                message.flag = String(object.flag);
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.FriendRequestEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a FriendRequestEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.FriendRequestEvent
         * @static
         * @param {onebot.FriendRequestEvent} message FriendRequestEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FriendRequestEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.requestType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.comment = "";
                object.flag = "";
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.requestType != null && message.hasOwnProperty("requestType"))
                object.requestType = message.requestType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.comment != null && message.hasOwnProperty("comment"))
                object.comment = message.comment;
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this FriendRequestEvent to JSON.
         * @function toJSON
         * @memberof onebot.FriendRequestEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FriendRequestEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FriendRequestEvent;
    })();

    onebot.GroupRequestEvent = (function() {

        /**
         * Properties of a GroupRequestEvent.
         * @memberof onebot
         * @interface IGroupRequestEvent
         * @property {Long|null} [time] GroupRequestEvent time
         * @property {Long|null} [selfId] GroupRequestEvent selfId
         * @property {string|null} [postType] GroupRequestEvent postType
         * @property {string|null} [requestType] GroupRequestEvent requestType
         * @property {string|null} [subType] GroupRequestEvent subType
         * @property {Long|null} [groupId] GroupRequestEvent groupId
         * @property {Long|null} [userId] GroupRequestEvent userId
         * @property {string|null} [comment] GroupRequestEvent comment
         * @property {string|null} [flag] GroupRequestEvent flag
         * @property {Object.<string,string>|null} [extra] GroupRequestEvent extra
         */

        /**
         * Constructs a new GroupRequestEvent.
         * @memberof onebot
         * @classdesc Represents a GroupRequestEvent.
         * @implements IGroupRequestEvent
         * @constructor
         * @param {onebot.IGroupRequestEvent=} [properties] Properties to set
         */
        function GroupRequestEvent(properties) {
            this.extra = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupRequestEvent time.
         * @member {Long} time
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRequestEvent selfId.
         * @member {Long} selfId
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.selfId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRequestEvent postType.
         * @member {string} postType
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.postType = "";

        /**
         * GroupRequestEvent requestType.
         * @member {string} requestType
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.requestType = "";

        /**
         * GroupRequestEvent subType.
         * @member {string} subType
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.subType = "";

        /**
         * GroupRequestEvent groupId.
         * @member {Long} groupId
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.groupId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRequestEvent userId.
         * @member {Long} userId
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * GroupRequestEvent comment.
         * @member {string} comment
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.comment = "";

        /**
         * GroupRequestEvent flag.
         * @member {string} flag
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.flag = "";

        /**
         * GroupRequestEvent extra.
         * @member {Object.<string,string>} extra
         * @memberof onebot.GroupRequestEvent
         * @instance
         */
        GroupRequestEvent.prototype.extra = $util.emptyObject;

        /**
         * Creates a new GroupRequestEvent instance using the specified properties.
         * @function create
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {onebot.IGroupRequestEvent=} [properties] Properties to set
         * @returns {onebot.GroupRequestEvent} GroupRequestEvent instance
         */
        GroupRequestEvent.create = function create(properties) {
            return new GroupRequestEvent(properties);
        };

        /**
         * Encodes the specified GroupRequestEvent message. Does not implicitly {@link onebot.GroupRequestEvent.verify|verify} messages.
         * @function encode
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {onebot.IGroupRequestEvent} message GroupRequestEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupRequestEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
            if (message.selfId != null && Object.hasOwnProperty.call(message, "selfId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.selfId);
            if (message.postType != null && Object.hasOwnProperty.call(message, "postType"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.postType);
            if (message.requestType != null && Object.hasOwnProperty.call(message, "requestType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestType);
            if (message.subType != null && Object.hasOwnProperty.call(message, "subType"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subType);
            if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.groupId);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.userId);
            if (message.comment != null && Object.hasOwnProperty.call(message, "comment"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.comment);
            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.flag);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                for (var keys = Object.keys(message.extra), i = 0; i < keys.length; ++i)
                    writer.uint32(/* id 255, wireType 2 =*/2042).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.extra[keys[i]]).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GroupRequestEvent message, length delimited. Does not implicitly {@link onebot.GroupRequestEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {onebot.IGroupRequestEvent} message GroupRequestEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupRequestEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupRequestEvent message from the specified reader or buffer.
         * @function decode
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onebot.GroupRequestEvent} GroupRequestEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupRequestEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onebot.GroupRequestEvent(), key, value;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int64();
                    break;
                case 2:
                    message.selfId = reader.int64();
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.requestType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = reader.int64();
                    break;
                case 7:
                    message.userId = reader.int64();
                    break;
                case 8:
                    message.comment = reader.string();
                    break;
                case 9:
                    message.flag = reader.string();
                    break;
                case 255:
                    if (message.extra === $util.emptyObject)
                        message.extra = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.string();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.extra[key] = value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupRequestEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onebot.GroupRequestEvent} GroupRequestEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupRequestEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupRequestEvent message.
         * @function verify
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupRequestEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (!$util.isInteger(message.selfId) && !(message.selfId && $util.isInteger(message.selfId.low) && $util.isInteger(message.selfId.high)))
                    return "selfId: integer|Long expected";
            if (message.postType != null && message.hasOwnProperty("postType"))
                if (!$util.isString(message.postType))
                    return "postType: string expected";
            if (message.requestType != null && message.hasOwnProperty("requestType"))
                if (!$util.isString(message.requestType))
                    return "requestType: string expected";
            if (message.subType != null && message.hasOwnProperty("subType"))
                if (!$util.isString(message.subType))
                    return "subType: string expected";
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (!$util.isInteger(message.groupId) && !(message.groupId && $util.isInteger(message.groupId.low) && $util.isInteger(message.groupId.high)))
                    return "groupId: integer|Long expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.comment != null && message.hasOwnProperty("comment"))
                if (!$util.isString(message.comment))
                    return "comment: string expected";
            if (message.flag != null && message.hasOwnProperty("flag"))
                if (!$util.isString(message.flag))
                    return "flag: string expected";
            if (message.extra != null && message.hasOwnProperty("extra")) {
                if (!$util.isObject(message.extra))
                    return "extra: object expected";
                var key = Object.keys(message.extra);
                for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.extra[key[i]]))
                        return "extra: string{k:string} expected";
            }
            return null;
        };

        /**
         * Creates a GroupRequestEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onebot.GroupRequestEvent} GroupRequestEvent
         */
        GroupRequestEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.onebot.GroupRequestEvent)
                return object;
            var message = new $root.onebot.GroupRequestEvent();
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            if (object.selfId != null)
                if ($util.Long)
                    (message.selfId = $util.Long.fromValue(object.selfId)).unsigned = false;
                else if (typeof object.selfId === "string")
                    message.selfId = parseInt(object.selfId, 10);
                else if (typeof object.selfId === "number")
                    message.selfId = object.selfId;
                else if (typeof object.selfId === "object")
                    message.selfId = new $util.LongBits(object.selfId.low >>> 0, object.selfId.high >>> 0).toNumber();
            if (object.postType != null)
                message.postType = String(object.postType);
            if (object.requestType != null)
                message.requestType = String(object.requestType);
            if (object.subType != null)
                message.subType = String(object.subType);
            if (object.groupId != null)
                if ($util.Long)
                    (message.groupId = $util.Long.fromValue(object.groupId)).unsigned = false;
                else if (typeof object.groupId === "string")
                    message.groupId = parseInt(object.groupId, 10);
                else if (typeof object.groupId === "number")
                    message.groupId = object.groupId;
                else if (typeof object.groupId === "object")
                    message.groupId = new $util.LongBits(object.groupId.low >>> 0, object.groupId.high >>> 0).toNumber();
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.comment != null)
                message.comment = String(object.comment);
            if (object.flag != null)
                message.flag = String(object.flag);
            if (object.extra) {
                if (typeof object.extra !== "object")
                    throw TypeError(".onebot.GroupRequestEvent.extra: object expected");
                message.extra = {};
                for (var keys = Object.keys(object.extra), i = 0; i < keys.length; ++i)
                    message.extra[keys[i]] = String(object.extra[keys[i]]);
            }
            return message;
        };

        /**
         * Creates a plain object from a GroupRequestEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onebot.GroupRequestEvent
         * @static
         * @param {onebot.GroupRequestEvent} message GroupRequestEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupRequestEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.objects || options.defaults)
                object.extra = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.selfId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.selfId = options.longs === String ? "0" : 0;
                object.postType = "";
                object.requestType = "";
                object.subType = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.groupId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.groupId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.comment = "";
                object.flag = "";
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            if (message.selfId != null && message.hasOwnProperty("selfId"))
                if (typeof message.selfId === "number")
                    object.selfId = options.longs === String ? String(message.selfId) : message.selfId;
                else
                    object.selfId = options.longs === String ? $util.Long.prototype.toString.call(message.selfId) : options.longs === Number ? new $util.LongBits(message.selfId.low >>> 0, message.selfId.high >>> 0).toNumber() : message.selfId;
            if (message.postType != null && message.hasOwnProperty("postType"))
                object.postType = message.postType;
            if (message.requestType != null && message.hasOwnProperty("requestType"))
                object.requestType = message.requestType;
            if (message.subType != null && message.hasOwnProperty("subType"))
                object.subType = message.subType;
            if (message.groupId != null && message.hasOwnProperty("groupId"))
                if (typeof message.groupId === "number")
                    object.groupId = options.longs === String ? String(message.groupId) : message.groupId;
                else
                    object.groupId = options.longs === String ? $util.Long.prototype.toString.call(message.groupId) : options.longs === Number ? new $util.LongBits(message.groupId.low >>> 0, message.groupId.high >>> 0).toNumber() : message.groupId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.comment != null && message.hasOwnProperty("comment"))
                object.comment = message.comment;
            if (message.flag != null && message.hasOwnProperty("flag"))
                object.flag = message.flag;
            var keys2;
            if (message.extra && (keys2 = Object.keys(message.extra)).length) {
                object.extra = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.extra[keys2[j]] = message.extra[keys2[j]];
            }
            return object;
        };

        /**
         * Converts this GroupRequestEvent to JSON.
         * @function toJSON
         * @memberof onebot.GroupRequestEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupRequestEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GroupRequestEvent;
    })();

    return onebot;
})();

module.exports = $root;
